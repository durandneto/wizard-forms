[{"/private/var/www/oberholtzermedia-form/src/components/Profile/Address/index.tsx":"1","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/index.tsx":"2","/private/var/www/oberholtzermedia-form/src/App.tsx":"3","/private/var/www/oberholtzermedia-form/src/context/Profile.Contex.tsx":"4","/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/index.tsx":"5","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/index.tsx":"6","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/table.tsx":"7","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/table.tsx":"8","/private/var/www/oberholtzermedia-form/src/components/Profile/Address/table.tsx":"9","/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/table.tsx":"10","/private/var/www/oberholtzermedia-form/src/components/ProgressHeader.tsx":"11","/private/var/www/oberholtzermedia-form/src/context/App.Contex.tsx":"12","/private/var/www/oberholtzermedia-form/src/context/Tabs.Context.tsx":"13","/private/var/www/oberholtzermedia-form/src/actions/profile.ts":"14","/private/var/www/oberholtzermedia-form/src/index.tsx":"15","/private/var/www/oberholtzermedia-form/src/components/Progress.tsx":"16","/private/var/www/oberholtzermedia-form/src/components/Review/index.tsx":"17","/private/var/www/oberholtzermedia-form/src/reportWebVitals.ts":"18","/private/var/www/oberholtzermedia-form/src/components/Form/Item.tsx":"19","/private/var/www/oberholtzermedia-form/src/context/Diabetes.Contex.tsx":"20","/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/index.tsx":"21","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/index.tsx":"22","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/table.tsx":"23","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/index.tsx":"24","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/table.tsx":"25","/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/table.tsx":"26","/private/var/www/oberholtzermedia-form/src/components/Form/DiabetesFamilyMember.tsx":"27","/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/index.tsx":"28","/private/var/www/oberholtzermedia-form/src/components/Form/CardiacFamilyMember.tsx":"29","/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/table.tsx":"30","/private/var/www/oberholtzermedia-form/src/context/Cardiac.Contex.tsx":"31","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/index.tsx":"32","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/table.tsx":"33","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/index.tsx":"34","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/table.tsx":"35","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/table.tsx":"36","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/index.tsx":"37","/private/var/www/oberholtzermedia-form/src/context/Cancer.Contex.tsx":"38","/private/var/www/oberholtzermedia-form/src/components/Form/CancerFamilyMember.tsx":"39","/private/var/www/oberholtzermedia-form/src/utils/index.ts":"40","/private/var/www/oberholtzermedia-form/src/components/SubmitFormModal/index.tsx":"41","/private/var/www/oberholtzermedia-form/src/components/ProgressBottom.tsx":"42","/private/var/www/oberholtzermedia-form/src/context/Agent.Contex.tsx":"43","/private/var/www/oberholtzermedia-form/src/components/Agent/Info/table.tsx":"44","/private/var/www/oberholtzermedia-form/src/components/Agent/Info/index.tsx":"45","/private/var/www/oberholtzermedia-form/src/components/templates/index.tsx":"46","/private/var/www/oberholtzermedia-form/src/actions/medicare.ts":"47","/private/var/www/oberholtzermedia-form/src/context/Auth.Context.tsx":"48","/private/var/www/oberholtzermedia-form/src/components/Stepper/index.tsx":"49","/private/var/www/oberholtzermedia-form/src/components/Stepper/Card.tsx":"50","/private/var/www/oberholtzermedia-form/src/stories/Button.stories.tsx":"51","/private/var/www/oberholtzermedia-form/src/stories/Page.tsx":"52","/private/var/www/oberholtzermedia-form/src/stories/Button.tsx":"53","/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/Stepper.stories.tsx":"54","/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/index.tsx":"55","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Stepper.tsx":"56","/private/var/www/oberholtzermedia-form/src/v2/Reducer/App.tsx":"57","/private/var/www/oberholtzermedia-form/src/v2/components/Agent/index.tsx":"58","/private/var/www/oberholtzermedia-form/src/v2/store/index.tsx":"59","/private/var/www/oberholtzermedia-form/src/v2/components/User/index.tsx":"60","/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/Accordeon.stories.tsx":"61","/private/var/www/oberholtzermedia-form/src/stories/Header.tsx":"62","/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/index.tsx":"63","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PersonalInfo.tsx":"64","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Agent/index.tsx":"65","/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/index.tsx":"66","/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/User.initialState.ts":"67","/private/var/www/oberholtzermedia-form/src/v2/components/common/InputPhone/index.tsx":"68","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AditionalInfo.tsx":"69","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AddressInfo.tsx":"70","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/MediCare.tsx":"71","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PrimaryCare.tsx":"72","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/index.tsx":"73","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/index.ts":"74","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.initialState.ts":"75","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/quiz/index.tsx":"76"},{"size":6835,"mtime":1613598456793,"results":"77","hashOfConfig":"78"},{"size":17118,"mtime":1613613568801,"results":"79","hashOfConfig":"78"},{"size":2987,"mtime":1613989987756,"results":"80","hashOfConfig":"78"},{"size":3497,"mtime":1613963556951,"results":"81","hashOfConfig":"78"},{"size":5974,"mtime":1613971429200,"results":"82","hashOfConfig":"78"},{"size":3001,"mtime":1613597118746,"results":"83","hashOfConfig":"78"},{"size":703,"mtime":1613403705684,"results":"84","hashOfConfig":"78"},{"size":1312,"mtime":1613576467503,"results":"85","hashOfConfig":"78"},{"size":686,"mtime":1613403327887,"results":"86","hashOfConfig":"78"},{"size":650,"mtime":1613971429201,"results":"87","hashOfConfig":"78"},{"size":544,"mtime":1613143561414,"results":"88","hashOfConfig":"78"},{"size":89,"mtime":1612819422010,"results":"89","hashOfConfig":"78"},{"size":724,"mtime":1613488546809,"results":"90","hashOfConfig":"78"},{"size":2289,"mtime":1613977269014,"results":"91","hashOfConfig":"78"},{"size":559,"mtime":1613756313798,"results":"92","hashOfConfig":"78"},{"size":5343,"mtime":1613962984278,"results":"93","hashOfConfig":"78"},{"size":6960,"mtime":1613677981749,"results":"94","hashOfConfig":"78"},{"size":425,"mtime":1613576502476,"results":"95","hashOfConfig":"78"},{"size":710,"mtime":1613570208513,"results":"96","hashOfConfig":"78"},{"size":2776,"mtime":1613574064582,"results":"97","hashOfConfig":"78"},{"size":3768,"mtime":1613584816620,"results":"98","hashOfConfig":"78"},{"size":1923,"mtime":1613578955055,"results":"99","hashOfConfig":"78"},{"size":521,"mtime":1613403417425,"results":"100","hashOfConfig":"78"},{"size":2790,"mtime":1613578988850,"results":"101","hashOfConfig":"78"},{"size":1028,"mtime":1613403774860,"results":"102","hashOfConfig":"78"},{"size":757,"mtime":1613403391480,"results":"103","hashOfConfig":"78"},{"size":6071,"mtime":1613509366464,"results":"104","hashOfConfig":"78"},{"size":2792,"mtime":1613578939232,"results":"105","hashOfConfig":"78"},{"size":6488,"mtime":1613509400924,"results":"106","hashOfConfig":"78"},{"size":1047,"mtime":1613403435426,"results":"107","hashOfConfig":"78"},{"size":4113,"mtime":1613574054464,"results":"108","hashOfConfig":"78"},{"size":7366,"mtime":1613578921460,"results":"109","hashOfConfig":"78"},{"size":1038,"mtime":1613403449855,"results":"110","hashOfConfig":"78"},{"size":2990,"mtime":1613610369777,"results":"111","hashOfConfig":"78"},{"size":1027,"mtime":1613403481121,"results":"112","hashOfConfig":"78"},{"size":953,"mtime":1613403467909,"results":"113","hashOfConfig":"78"},{"size":13328,"mtime":1613688704837,"results":"114","hashOfConfig":"78"},{"size":8005,"mtime":1613688809996,"results":"115","hashOfConfig":"78"},{"size":6538,"mtime":1613509400924,"results":"116","hashOfConfig":"78"},{"size":494,"mtime":1613677416518,"results":"117","hashOfConfig":"78"},{"size":917,"mtime":1613576476343,"results":"118","hashOfConfig":"78"},{"size":1876,"mtime":1613145467747,"results":"119","hashOfConfig":"78"},{"size":715,"mtime":1613584955733,"results":"120","hashOfConfig":"78"},{"size":589,"mtime":1613403507544,"results":"121","hashOfConfig":"78"},{"size":2209,"mtime":1613593666534,"results":"122","hashOfConfig":"78"},{"size":1053,"mtime":1613596463312,"results":"123","hashOfConfig":"78"},{"size":5612,"mtime":1613971429197,"results":"124","hashOfConfig":"78"},{"size":982,"mtime":1613576453991,"results":"125","hashOfConfig":"78"},{"size":1433,"mtime":1613679183815,"results":"126","hashOfConfig":"78"},{"size":7267,"mtime":1613690758660,"results":"127","hashOfConfig":"78"},{"size":804,"mtime":1613741654448,"results":"128","hashOfConfig":"78"},{"size":2415,"mtime":1613741309402,"results":"129","hashOfConfig":"78"},{"size":941,"mtime":1613741309393,"results":"130","hashOfConfig":"78"},{"size":705,"mtime":1613757809504,"results":"131","hashOfConfig":"78"},{"size":2860,"mtime":1613767773769,"results":"132","hashOfConfig":"78"},{"size":2427,"mtime":1613985499214,"results":"133","hashOfConfig":"78"},{"size":585,"mtime":1613749191644,"results":"134","hashOfConfig":"78"},{"size":5122,"mtime":1613986529923,"results":"135","hashOfConfig":"78"},{"size":1142,"mtime":1613985660200,"results":"136","hashOfConfig":"78"},{"size":4782,"mtime":1613981340415,"results":"137","hashOfConfig":"78"},{"size":736,"mtime":1613769854724,"results":"138","hashOfConfig":"78"},{"size":1356,"mtime":1613741309397,"results":"139","hashOfConfig":"78"},{"size":4385,"mtime":1613991431410,"results":"140","hashOfConfig":"78"},{"size":9104,"mtime":1613981060838,"results":"141","hashOfConfig":"78"},{"size":1468,"mtime":1613973263777,"results":"142","hashOfConfig":"78"},{"size":9947,"mtime":1613980921692,"results":"143","hashOfConfig":"78"},{"size":2421,"mtime":1613980843316,"results":"144","hashOfConfig":"78"},{"size":1327,"mtime":1613935441212,"results":"145","hashOfConfig":"78"},{"size":10739,"mtime":1613978314575,"results":"146","hashOfConfig":"78"},{"size":8128,"mtime":1613978601087,"results":"147","hashOfConfig":"78"},{"size":8353,"mtime":1613981455718,"results":"148","hashOfConfig":"78"},{"size":3509,"mtime":1613974795349,"results":"149","hashOfConfig":"78"},{"size":3682,"mtime":1613991128926,"results":"150","hashOfConfig":"78"},{"size":1198,"mtime":1613987217489,"results":"151","hashOfConfig":"78"},{"size":3859,"mtime":1613985610053,"results":"152","hashOfConfig":"78"},{"size":5274,"mtime":1613993589857,"results":"153","hashOfConfig":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},"1j9z5km",{"filePath":"158","messages":"159","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"161"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"161"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"197"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"192"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"192"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"161"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"161"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"192"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"186"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"230"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"161"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"192"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"161"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"189"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"161"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"192"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"274"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"161"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"161"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"192"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"292"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"336","messages":"337","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/private/var/www/oberholtzermedia-form/src/components/Profile/Address/index.tsx",["344"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n  FormFeedback,\n  CustomInput,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileAddressDataInterface } from \"../../../context/Profile.Contex\";\nimport { calculateError } from \"../../../utils\";\nimport TableInfo from \"./table\";\n\nlet states = [\n  \"AK\",\n  \"AL\",\n  \"AR\",\n  \"AS\",\n  \"AZ\",\n  \"CA\",\n  \"CO\",\n  \"CT\",\n  \"DC\",\n  \"DE\",\n  \"FL\",\n  \"GA\",\n  \"GU\",\n  \"HI\",\n  \"IA\",\n  \"ID\",\n  \"IL\",\n  \"IN\",\n  \"KS\",\n  \"KY\",\n  \"LA\",\n  \"MA\",\n  \"MD\",\n  \"ME\",\n  \"MI\",\n  \"MN\",\n  \"MO\",\n  \"MS\",\n  \"MT\",\n  \"NC\",\n  \"ND\",\n  \"NE\",\n  \"NH\",\n  \"NJ\",\n  \"NM\",\n  \"NV\",\n  \"NY\",\n  \"OH\",\n  \"OK\",\n  \"OR\",\n  \"PA\",\n  \"PR\",\n  \"RI\",\n  \"SC\",\n  \"SD\",\n  \"TN\",\n  \"TX\",\n  \"UT\",\n  \"VA\",\n  \"VI\",\n  \"VT\",\n  \"WA\",\n  \"WI\",\n  \"WV\",\n  \"WY\",\n];\nconst Address = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Profile, updateContext, validateAddress } = useContext(AppContext);\n  const {\n    tabs: { Address },\n  } = Profile;\n\n  const save = useCallback(() => {\n    const error: ProfileAddressDataInterface = {\n      streetLine: null,\n      streetLine2: null,\n      city: null,\n      state: null,\n      postalCode: null,\n    };\n\n    if (Address.data.streetLine === null || Address.data.streetLine === \"\") {\n      error.streetLine = \"Street line can not be empty.\";\n    }\n\n    if (Address.data.postalCode === null || Address.data.postalCode === \"\") {\n      error.postalCode = \"Postal Code can not be empty.\";\n    }\n\n    if (Address.data.city === null || Address.data.city === \"\") {\n      error.city = \"City can not be empty.\";\n    }\n\n    if (Address.data.state === null || Address.data.state === \"\") {\n      error.state = \"State can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Address.data, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [Address.data]);\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(Address.error);\n  }, [Address.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  console.log(\"Address\", { Address });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {showError && (\n            <Row>\n              <Col>\n                <Alert color=\"danger\">error</Alert>\n              </Col>\n            </Row>\n          )}\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"examplePassword\">Street Address</Label>\n                <Input\n                  invalid={Address.error?.streetLine}\n                  disabled={loading}\n                  value={Address.data.streetLine}\n                  onChange={(e) => {\n                    updateContext(\"streetLine\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.streetLine}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"address2\">Apartament/ Unit</Label>\n                <Input\n                  disabled={loading}\n                  value={Address.data.streetLine2}\n                  id=\"address2\"\n                  onChange={(e) => {\n                    updateContext(\"streetLine2\", e.target.value);\n                  }}\n                />\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"city\">City</Label>\n                <Input\n                  invalid={Address.error?.city}\n                  disabled={loading}\n                  value={Address.data.city}\n                  id=\"city\"\n                  onChange={(e) => {\n                    updateContext(\"city\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.city}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup>\n                <Label for=\"exampleCustomSelect\">Custom Select</Label>\n                <CustomInput\n                  type=\"select\"\n                  id=\"exampleCustomSelect\"\n                  name=\"customSelect\"\n                  disabled={loading}\n                  invalid={Address.error?.state}\n                  value={Address.data.state}\n                  onChange={(e: any) => {\n                    updateContext(\"state\", e.target.value);\n                  }}\n                >\n                  <option value=\"\">Select</option>\n                  {states.map((s: string) => (\n                    <option value={s} key={`state-${s}`}>\n                      {s}\n                    </option>\n                  ))}\n                </CustomInput>\n                <FormFeedback>{Address.error?.state}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"postalcode\">Zip code</Label>\n                <Input\n                  invalid={Address.error?.postalCode}\n                  disabled={loading}\n                  value={Address.data.postalCode}\n                  id=\"postalcode\"\n                  onChange={(e) => {\n                    updateContext(\"postalCode\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.postalCode}</FormFeedback>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={{ size: 12, offset: 0 }} sm={{ size: 4, offset: 8 }}>\n              <Button\n                color={loading ? \"\" : \"success\"}\n                onClick={() => {\n                  if (!loading) {\n                    setLoading(true);\n                    validateAddress(Address.data)\n                      .then((r: any) => {\n                        setLoading(false);\n                        updateContext(\"error\", null);\n                        updateContext(\"success\", true);\n                      })\n                      .catch((err: any) => {\n                        updateContext(\n                          \"error\",\n                          err.response.data.message.join(\", \")\n                        );\n                        updateContext(\"success\", false);\n                        setLoading(false);\n                      });\n                  }\n                }}\n              >\n                {loading ? `Validating ...` : `Validate Address`}\n              </Button>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Address;\n",["345","346"],"/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/index.tsx",["347","348","349","350","351","352","353","354","355","356","357","358"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  DropdownToggle,\n  Alert,\n  DropdownMenu,\n  DropdownItem,\n  FormFeedback,\n  InputGroup,\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  CustomInput,\n} from \"reactstrap\";\nimport TableInfo from \"./table\";\n\nimport InputMask from \"react-input-mask\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileUserDataInterface } from \"../../../context/Profile.Contex\";\nimport FormItem from \"../../Form/Item\";\nimport { calculateError } from \"../../../utils\";\n\nconst Ethnicity: Array<string> = [\n  \"Asian\",\n  \"African American\",\n  \"Ashkenzai Jewish\",\n  \"Caucasian\",\n  \"French Canadian\",\n  \"Hispanic\",\n  \"Indian\",\n  \"Middle Eastern\",\n  \"Native American\",\n  \"Pacific Islander\",\n  \"Other\",\n];\n\nconst PersonalInfo = (props: any) => {\n  const { Profile, updateContext, ContextData, setContextData } = useContext(\n    AppContext\n  );\n  const {\n    tabs: { PersonalInfo },\n  } = Profile;\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [dropdownAltOpen, setAltDropdownOpen] = useState(false);\n  const [code, setCode] = useState(PersonalInfo.data.altPhoneCode || \"Area\");\n  const [altCode, setAltCode] = useState(\n    PersonalInfo.data.altPhoneCode || \"Area\"\n  );\n\n  const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\n  const toggleAltDropDown = () => setAltDropdownOpen(!dropdownAltOpen);\n\n  const save = useCallback(() => {\n    const error: ProfileUserDataInterface = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      gender: null,\n      birthDate: null,\n      phone: null,\n      phoneCode: null,\n      altPhone: null,\n      altPhoneCode: null,\n      ethnicity: null,\n      salivaSwabTest: null,\n      isAlzheimerorDementiatype: null,\n      previousTests: null,\n      isNursingLiving: null,\n    };\n\n    if (\n      PersonalInfo.data.firstName === null ||\n      PersonalInfo.data.firstName === \"\"\n    ) {\n      error.firstName = \"First name can not be empty.\";\n    }\n\n    if (PersonalInfo.data.previousTests.length === 0) {\n      error.previousTests = \"Previous generic test can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.lastName === null ||\n      PersonalInfo.data.lastName === \"\"\n    ) {\n      error.lastName = \"Last name can not be empty.\";\n    }\n\n    if (PersonalInfo.data.gender === null || PersonalInfo.data.gender === \"\") {\n      error.gender = \"Gender can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.ethnicity === null ||\n      PersonalInfo.data.ethnicity === \"\"\n    ) {\n      error.ethnicity = \"Ethnicity can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.birthDate === null ||\n      PersonalInfo.data.birthDate === \"\"\n    ) {\n      error.birthDate = \"DOB can not be empty.\";\n    }\n\n    if (PersonalInfo.data.phone === null || PersonalInfo.data.phone === \"\") {\n      error.phone = \"Phone can not be empty.\";\n    }\n    if (PersonalInfo.data.email === null || PersonalInfo.data.email === \"\") {\n      error.email = \"E-mail can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [PersonalInfo.data.firstName, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [PersonalInfo.data]);\n\n  const showError: boolean = useMemo(() => {\n    console.log(PersonalInfo.error);\n    return calculateError(PersonalInfo.error);\n  }, [PersonalInfo.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  console.log({ showError });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"4\">\n              <FormItem\n                error={PersonalInfo.error?.firstName}\n                id=\"PersonalInfoFirstName\"\n                label=\"First name (*)\"\n                value={PersonalInfo.data.firstName}\n                onChange={(e: any) => {\n                  updateContext(\"firstName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormItem\n                id=\"PersonalInfoLastName\"\n                label=\"Last name (*)\"\n                value={PersonalInfo.data.lastName}\n                error={PersonalInfo.error?.lastName}\n                onChange={(e: any) => {\n                  updateContext(\"lastName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for=\"RadioMale\">Gender</Label>\n              <FormGroup>\n                <CustomInput\n                  invalid={PersonalInfo.error?.gender}\n                  onChange={(e) => {\n                    updateContext(\"gender\", e.target.value);\n                  }}\n                  bsSize=\"sm\"\n                  type=\"radio\"\n                  value=\"male\"\n                  checked={PersonalInfo.data.gender === \"male\"}\n                  name=\"gender\"\n                  id=\"RadioMale\"\n                  label=\"Male\"\n                  inline\n                />\n                <CustomInput\n                  onChange={(e) => {\n                    updateContext(\"gender\", e.target.value);\n                  }}\n                  invalid={PersonalInfo.error?.gender}\n                  bsSize=\"sm\"\n                  type=\"radio\"\n                  value=\"female\"\n                  checked={PersonalInfo.data.gender === \"female\"}\n                  name=\"gender\"\n                  id=\"RadioFemale\"\n                  label=\"Female\"\n                  inline\n                />\n                <FormFeedback>{PersonalInfo.error?.gender}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for={`form-input-id-phone`}>Phone</Label>\n              <InputGroup>\n                {/* <InputGroupButtonDropdown\n                  addonType=\"append\"\n                  isOpen={dropdownOpen}\n                  toggle={toggleDropDown}\n                >\n                  <DropdownToggle caret>{code}</DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem header>Area</DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setCode(\"+ 1\");\n                        updateContext(\"phoneCode\", \"+ 1\");\n                      }}\n                    >\n                      + 1\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setCode(\"+ 778\");\n                        updateContext(\"phoneCode\", \"+ 778\");\n                      }}\n                    >\n                      + 778\n                    </DropdownItem>\n                  </DropdownMenu>\n                </InputGroupButtonDropdown> */}\n                <Input\n                  type=\"tel\"\n                  mask=\"999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  value={PersonalInfo.data.phone}\n                  invalid={PersonalInfo.error?.phone}\n                  tag={InputMask}\n                  onChange={(e) => {\n                    updateContext(\"phone\", e.target.value);\n                  }}\n                />\n              </InputGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for={`form-input-id-phone`}>Alt. Phone</Label>\n              <InputGroup>\n                {/* <InputGroupButtonDropdown\n                  addonType=\"append\"\n                  isOpen={dropdownAltOpen}\n                  toggle={toggleAltDropDown}\n                >\n                  <DropdownToggle caret>{altCode}</DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem header>Area</DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setAltCode(\"+ 1\");\n                        updateContext(\"altPhoneCode\", \"+ 1\");\n                      }}\n                    >\n                      + 1\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setAltCode(\"+ 778\");\n                        updateContext(\"altPhoneCode\", \"+ 778\");\n                      }}\n                    >\n                      + 778\n                    </DropdownItem>\n                  </DropdownMenu>\n                </InputGroupButtonDropdown> */}\n                <Input\n                  type=\"tel\"\n                  mask=\"999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  tag={InputMask}\n                  value={PersonalInfo.data.altPhone}\n                  invalid={PersonalInfo.error?.altPhone}\n                  onChange={(e: any) => {\n                    updateContext(\"altPhone\", e.target.value);\n                  }}\n                />\n              </InputGroup>\n            </Col>\n            <Col xs=\"4\">\n              <FormItem\n                id=\"emailAddress\"\n                label=\"Email Address\"\n                value={PersonalInfo.data.email}\n                error={PersonalInfo.error?.email}\n                onChange={(e: any) => {\n                  updateContext(\"email\", e.target.value);\n                }}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col sx=\"12\" sm=\"4\">\n              <FormGroup>\n                <Label for=\"birthDate\">Birth Date</Label>\n                <Input\n                  bsSize=\"sm\"\n                  type=\"date\"\n                  name=\"date\"\n                  id=\"birthDate\"\n                  min=\"1920-01-01\"\n                  max=\"2000-01-01\"\n                  placeholder=\"Birth date\"\n                  value={PersonalInfo.data.birthDate}\n                  invalid={PersonalInfo.error?.birthDate}\n                  onChange={(e) => {\n                    updateContext(\"birthDate\", e.target.value);\n                  }}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <Label for=\"RadioEthnicity\">Ethnicity</Label>\n              <FormGroup>\n                {Ethnicity.map((et, key) => (\n                  <CustomInput\n                    onChange={(e) => updateContext(\"ethnicity\", e.target.value)}\n                    bsSize=\"sm\"\n                    type=\"radio\"\n                    value={et}\n                    invalid={PersonalInfo.error?.ethnicity}\n                    checked={PersonalInfo.data.ethnicity === et}\n                    name=\"RadioEthnicity\"\n                    id={`Ethnicity-id-${key}`}\n                    key={`Ethnicity-id-${key}`}\n                    label={et}\n                    inline\n                  />\n                ))}\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for={`typeOfNursinLiving`}>\n                  <b>\n                    Currenly living in a nursing home or assisted living\n                    facility?\n                  </b>\n                </Label>\n                <CustomInput\n                  value={PersonalInfo.data.isNursingLiving}\n                  onChange={(e: any) => {\n                    updateContext(\"isNursingLiving\", e.target.value);\n                  }}\n                  type=\"select\"\n                  id={`typeOfNursinLiving`}\n                >\n                  <option value=\"\">Select</option>\n                  <option value=\"Yes\">Yes</option>\n                  <option value=\"No\">No</option>\n                </CustomInput>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for={`AlzheimerorDementiatype`}>\n                  <b>Do you have Alzheimer's or Dementia?</b>\n                </Label>\n                <CustomInput\n                  value={PersonalInfo.data.isAlzheimerorDementiatype}\n                  onChange={(e: any) => {\n                    updateContext(\"isAlzheimerorDementiatype\", e.target.value);\n                  }}\n                  type=\"select\"\n                  id={`AlzheimerorDementiatype`}\n                >\n                  <option value=\"\">Select</option>\n                  <option value=\"Yes\">Yes</option>\n                  <option value=\"No\">No</option>\n                </CustomInput>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\">\n              <br />\n              <Label>\n                <b>Have you ever taken a Saliva Swab DNA test?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Yes\"\n                  checked={PersonalInfo.data.salivaSwabTest === \"Yes\"}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      updateContext(\"salivaSwabTest\", \"Yes\");\n                    } else {\n                      updateContext(\"salivaSwabTest\", \"No\");\n                    }\n                  }}\n                />\n                <Label check>Yes, I did.</Label>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\">\n              <br />\n              <Label for=\"RadioEthnicity\">\n                <b>Previous Generic Test </b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Cardiac\"\n                  checked={PersonalInfo.data.previousTests.includes(\"Cardiac\")}\n                  invalid={PersonalInfo.error?.previousTests}\n                  onChange={(e) => {\n                    ContextData.Cardiac.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Cardiac</Label>\n              </FormGroup>\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Diabetes\"\n                  invalid={PersonalInfo.error?.previousTests}\n                  checked={PersonalInfo.data.previousTests.includes(\"Diabetes\")}\n                  onChange={(e) => {\n                    ContextData.Diabetes.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Diabetes</Label>\n              </FormGroup>\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Cancer\"\n                  checked={PersonalInfo.data.previousTests.includes(\"Cancer\")}\n                  invalid={PersonalInfo.error?.previousTests}\n                  onChange={(e) => {\n                    ContextData.Cancer.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Cancer</Label>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default PersonalInfo;\n",["359","360"],"/private/var/www/oberholtzermedia-form/src/App.tsx",["361","362","363","364","365","366","367","368","369"],"/private/var/www/oberholtzermedia-form/src/context/Profile.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/index.tsx",["370","371","372","373","374","375","376","377","378","379","380","381","382"],"/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/index.tsx",["383","384","385","386","387","388"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  InputGroup,\n  Container,\n  Alert,\n  Row,\n  Col,\n  Form,\n  FormFeedback,\n  Label,\n  Input,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport InputMask from \"react-input-mask\";\nimport TableInfo from \"./table\";\nimport FormItem from \"../../Form/Item\";\nimport { ProfilePrimaryCareDataInterface } from \"../../../context/Profile.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst PhysicianInformation = (props: any) => {\n  const { Profile, updateContext } = useContext(AppContext);\n  const {\n    tabs: { PrimaryCare },\n  } = Profile;\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [code, setCode] = useState(PrimaryCare.data.code || \"Area\");\n\n  const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\n\n  const save = useCallback(() => {\n    const error: ProfilePrimaryCareDataInterface = {\n      fullName: null,\n      phone: null,\n    };\n\n    if (\n      PrimaryCare.data.fullName === null ||\n      PrimaryCare.data.fullName === \"\"\n    ) {\n      error.fullName = \"Name can not be empty.\";\n    }\n\n    if (PrimaryCare.data.phone === null || PrimaryCare.data.phone === \"\") {\n      error.phone = \"Name can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [PrimaryCare.data, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [PrimaryCare.data]);\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(PrimaryCare.error);\n  }, [PrimaryCare.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                label=\"Doctor name\"\n                id={`DoctorFullname`}\n                placeholder={\"Doctor Full name\"}\n                value={PrimaryCare.data.fullName}\n                error={PrimaryCare.error?.fullName}\n                onChange={(e: any) => {\n                  updateContext(\"fullName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <Label for={`form-input-id-phone`}>Phone</Label>\n              <InputGroup>\n                <Input\n                  type=\"tel\"\n                  mask=\"99999999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  value={PrimaryCare.data.phone}\n                  invalid={PrimaryCare.error?.phone}\n                  tag={InputMask}\n                  onChange={(e) => {\n                    updateContext(\"phone\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{PrimaryCare.error?.phone}</FormFeedback>\n              </InputGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default PhysicianInformation;\n",["389","390"],"/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/table.tsx",["391"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst PrimaryCareTable = (props: any) => {\n  const { Profile }  = useContext(AppContext)\n  const { tabs: { PrimaryCare: {data: PrimaryCare} } } = Profile\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Doctor fullname</th>\n          <th>Phone</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{PrimaryCare.fullName}</td>\n          <td>{PrimaryCare.phone}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default PrimaryCareTable;","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/table.tsx",["392"],"import { useContext } from \"react\";\nimport { Table } from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileInterface } from \"../../../context/Profile.Contex\";\n\nconst ProfileTable = (props: any) => {\n  const { Profile } = useContext(AppContext);\n  const {\n    tabs: {\n      PersonalInfo: { data: PersonalInfo },\n    },\n  } = Profile;\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Gender</th>\n          <th>Phone</th>\n          <th>Alt. Phone</th>\n          <th>Email Address</th>\n          <th>Birth Date</th>\n          <th>Ethnicity</th>\n          <th>Previous Tests only</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{PersonalInfo.firstName}</td>\n          <td>{PersonalInfo.lastName}</td>\n          <td>{PersonalInfo.gender}</td>\n          <td>{`${PersonalInfo.phoneCode} ${PersonalInfo.phone}`}</td>\n          <td>{`${PersonalInfo.altPhoneCode} ${PersonalInfo.altPhone}`}</td>\n          <td>{PersonalInfo.email}</td>\n          <td>{PersonalInfo.birthDate}</td>\n          <td>{PersonalInfo.ethnicity}</td>\n          <td>{PersonalInfo.previousTests.join(\",\")}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n};\n\nexport default ProfileTable;\n",["393","394"],"/private/var/www/oberholtzermedia-form/src/components/Profile/Address/table.tsx",["395"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Profile }  = useContext(AppContext)\n  const { tabs: { Address : { data: Address} } } = Profile\n  \n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Full Address</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{`${Address.streetLine}, ${Address.city} - ${Address.state} ${Address.postalCode}`}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/table.tsx",["396"],"/private/var/www/oberholtzermedia-form/src/components/ProgressHeader.tsx",[],["397","398"],"/private/var/www/oberholtzermedia-form/src/context/App.Contex.tsx",[],["399","400"],"/private/var/www/oberholtzermedia-form/src/context/Tabs.Context.tsx",[],["401","402"],"/private/var/www/oberholtzermedia-form/src/actions/profile.ts",["403","404","405","406"],"/private/var/www/oberholtzermedia-form/src/index.tsx",[],["407","408"],"/private/var/www/oberholtzermedia-form/src/components/Progress.tsx",["409","410","411","412","413","414"],"/private/var/www/oberholtzermedia-form/src/components/Review/index.tsx",["415","416","417","418"],"/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport { useState, useContext } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport {\n  UncontrolledPopover,\n  PopoverHeader,\n  PopoverBody,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Breadcrumb,\n  BreadcrumbItem,\n  Collapse,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  NavbarText,\n} from \"reactstrap\";\nimport { submitForm } from \"../../actions/medicare\";\nimport { AppContext } from \"../../context/App.Contex\";\nimport { calculateError } from \"../../utils\";\n\nconst PopoverContent = (props: any) => {\n  return (\n    <>\n      <PopoverHeader>\n        Error{\" \"}\n        <i style={{ color: \"#dc3545\" }} className=\"icon-attention-filled\"></i>\n      </PopoverHeader>\n      <PopoverBody>\n        {Object.values(props.error)\n          .filter((r: any) => r !== null)\n          .map((error: any) => (\n            <span>{Object.values(error)}</span>\n          ))}\n      </PopoverBody>\n    </>\n  );\n};\n\nconst PopoverContentSuccess = (props: any) => {\n  return (\n    <>\n      <PopoverHeader>\n        Success <i style={{ color: \"#155724\" }} className=\"icon-ok-1\"></i>\n      </PopoverHeader>\n      <PopoverBody>This section was successfully Validated</PopoverBody>\n    </>\n  );\n};\n\nconst ReviewModal = (props: any) => {\n  const {\n    tabsContext: tabs,\n    setIsSavingData,\n    setAPPError,\n    ContextData,\n  } = useContext(AppContext);\n\n  const [tables, setTables] = useState(() => {\n    const arr = new Array(tabs.length);\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = new Array(tabs[i].tabs.length).fill(true); // Creating an array of size 4 and filled of 1\n    }\n\n    return arr;\n  });\n\n  return (\n    <Modal isOpen={props.isOpen} toggle={props.toggle} size=\"lg\">\n      <ModalHeader toggle={props.toggle}>Form Review</ModalHeader>\n      <ModalBody>\n        <Container>\n          {Object.values(ContextData).map((context: any, tabIndex: number) => (\n            <Row key={`review-modal-index-${tabIndex}`}>\n              <Col xs=\"12\">\n                <h4>{context.label}</h4>\n                {Object.values(context.tabs).map(\n                  (item: any, itemIndex: number) => {\n                    if (!item.isRequired && item.index === 0)\n                      return <p>No record found</p>;\n                    if (!item.isRequired && item.index > 0) return <span />;\n\n                    return (\n                      <div>\n                        <Navbar color=\"light\" light expand=\"md\">\n                          <NavbarBrand href=\"#\">{context.label} /</NavbarBrand>\n                          <Nav className=\"mr-auto\" navbar>\n                            <NavItem>\n                              <NavLink href=\"#\">{item.label}</NavLink>\n                            </NavItem>\n                          </Nav>\n                          {calculateError(item.error) && (\n                            <NavbarText>\n                              <div id={`propover-error-${item.id}`}>\n                                <i\n                                  style={{ color: \"#dc3545\" }}\n                                  className=\"icon-attention-filled\"\n                                ></i>\n                                {/* <Button onClick={()=>{\n                                                                        // const t = tables\n                                                                        // t[tabIndex][itemIndex] = !t[tabIndex][itemIndex]\n                                                                        // setTables([...tables, t])\n                                                                    }} \n                                                                    color=\"link\">\n                                                                        {\n                                                                            tables[tabIndex][itemIndex] ? `Quick fix` : `Save`\n                                                                        }\n                                                                    </Button> */}\n                              </div>\n                              <UncontrolledPopover\n                                trigger=\"hover\"\n                                placement=\"left\"\n                                target={`propover-error-${item.id}`}\n                              >\n                                {({ scheduleUpdate }) => (\n                                  <PopoverContent {...item} />\n                                )}\n                              </UncontrolledPopover>\n                            </NavbarText>\n                          )}\n                          {item.success && (\n                            <>\n                              <div id={`propover-success-${item.id}`}>\n                                <i\n                                  style={{ color: \"#155724\" }}\n                                  className=\"icon-ok-1\"\n                                ></i>\n                              </div>\n                              <UncontrolledPopover\n                                trigger=\"hover\"\n                                placement=\"left\"\n                                target={`propover-success-${item.id}`}\n                              >\n                                {({ scheduleUpdate }) => (\n                                  <PopoverContentSuccess />\n                                )}\n                              </UncontrolledPopover>\n                            </>\n                          )}\n                        </Navbar>\n                        <item.component table={tables[tabIndex][itemIndex]} />\n                      </div>\n                    );\n                  }\n                )}\n              </Col>\n            </Row>\n          ))}\n          {/* <Row>\n                    <Col xs=\"12\">\n                        <div className=\"box_contact\">\n                            <i className=\"pe-7s-id\"></i>\n                            <h4>Personal Info</h4>\n                            <blockquote className=\"blockquote styled\">\n\t\t\t\t\t\t\t<small>First name: <cite title=\"\"><b>Jhon</b></cite></small>\n\t\t\t\t\t\t\t<small>Last name: <cite title=\"\"><b>Doe</b></cite></small>\n\t\t\t\t\t\t</blockquote>\n                        </div>\n                    </Col>\n                </Row> */}\n        </Container>\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            props.toggle();\n            setAPPError(null);\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            setIsSavingData(true);\n            submitForm(ContextData)\n              .then((r) => {\n                debugger;\n              })\n              .catch(setAPPError);\n          }}\n        >\n          Submit\n        </Button>{\" \"}\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default ReviewModal;\n","/private/var/www/oberholtzermedia-form/src/reportWebVitals.ts",[],["419","420"],"/private/var/www/oberholtzermedia-form/src/components/Form/Item.tsx",[],"/private/var/www/oberholtzermedia-form/src/context/Diabetes.Contex.tsx",[],["421","422"],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/index.tsx",["423","424","425","426","427","428"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  CustomInput,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport {\n  DiabetesDiagnostic,\n  DiabetesDiagnosticDataInterface,\n} from \"../../../context/Diabetes.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst Diagnostic = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { Diagnostic },\n  } = Diabetes;\n\n  const save = useCallback(() => {\n    const error: DiabetesDiagnosticDataInterface = {\n      BMI: {\n        value: null,\n      },\n      Diagnostic: {\n        list: null,\n        isRCEDiabetesTransfer: null,\n      },\n      FamilyMemberList: { list: null },\n    };\n\n    if (Diagnostic.data.list.length === 0) {\n      error.Diagnostic.list = \"Diagnostic list can not be empty.\";\n    }\n\n    updateContext(\"error\", error.Diagnostic);\n    updateContext(\"success\", !calculateError(error.Diagnostic));\n  }, [Diagnostic.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [Diagnostic.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <Label>\n                <b>Have you been diagnosed with any of the following?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <p> (check all that apply)</p>\n            </Col>\n            <Col xs=\"12\">\n              {DiabetesDiagnostic.map((diagnostic: string) => (\n                <FormGroup check inline>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      value={diagnostic}\n                      checked={Diagnostic.data.list.includes(diagnostic)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          updateContext(\"list\", [\n                            ...Diagnostic.data.list,\n                            e.target.value,\n                          ]);\n                        } else {\n                          const index = Diagnostic.data.list.findIndex(\n                            (i: string) => i === e.target.value\n                          );\n                          const newPreviousTests = Diagnostic.data.list;\n                          newPreviousTests.splice(index, 1);\n                          updateContext(\"list\", newPreviousTests);\n                        }\n                      }}\n                    />{\" \"}\n                    {diagnostic}\n                  </Label>\n                </FormGroup>\n              ))}\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <br />\n              <FormGroup>\n                <Label for=\"isRCEDiabetesTransferCheckbox\">\n                  <b>Check here if doing a RCE Diabetes transfer</b>\n                </Label>\n                <div>\n                  <CustomInput\n                    onClick={(e: any) => {\n                      updateContext(\"isRCEDiabetesTransfer\", e.target.checked);\n                    }}\n                    checked={Diagnostic.data.isRCEDiabetesTransfer}\n                    type=\"checkbox\"\n                    id=\"isRCEDiabetesTransferCheckbox\"\n                    label=\"Yes, I'm.\"\n                  />\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Diagnostic;\n","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/index.tsx",["429","430","431","432","433","434","435","436"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport FormItem from \"../../Form/Item\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport { DiabetesDiagnosticDataInterface } from \"../../../context/Diabetes.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst BMIComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { BMI },\n  } = Diabetes;\n\n  const save = useCallback(() => {\n    const error: DiabetesDiagnosticDataInterface = {\n      BMI: {\n        value: null,\n      },\n      Diagnostic: {\n        list: null,\n        isRCEDiabetesTransfer: null,\n      },\n      FamilyMemberList: { list: null },\n    };\n\n    if (BMI.data.value === \"\") {\n      error.BMI.value = \"BMI can not be empty.\";\n    }\n\n    updateContext(\"error\", error.BMI);\n    updateContext(\"success\", !calculateError(error.BMI));\n  }, [BMI.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [BMI.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  console.log({ BMI });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <FormItem\n                label=\"BMI\"\n                error={BMI.error?.value}\n                onChange={(e: any) => {\n                  updateContext(\"value\", e.target.value);\n                }}\n                placeholder=\"BMI\"\n                id=\"BMI\"\n                value={BMI.data.value}\n                disabled={loading}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default BMIComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/index.tsx",["437","438","439","440","441"],"import { useContext, useState } from \"react\";\nimport DiabetesFamilyMemberForm from \"../../Form/DiabetesFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  DiabetesFamilyMemberInterface,\n} from \"../../../context/Diabetes.Contex\";\n\nimport { guidGenerator } from \"../../../utils\";\n\nconst DiabetesFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Diabetes;\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: DiabetesFamilyMemberInterface, index: number) => (\n                <Row key={`FamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <DiabetesFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`FamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: DiabetesFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default DiabetesFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/table.tsx",["442"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Diabetes }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic} } } = Diabetes\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>List of diagnostics</th>\n          <th>Is RCE Diabetes transfer</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.list.join(\", \")}.</td>\n          <td>{Diagnostic.isRCEDiabetesTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Form/DiabetesFamilyMember.tsx",["443"],"import FormItem from  \"./Item\"\nimport { Container, Row, Col, Form, FormGroup, Label, Input,\n    Alert, Button, Card, CustomInput } from 'reactstrap';\nimport { DiabetesFamilyMemberInterface } from \"../../context/Diabetes.Contex\";\nimport { useState } from \"react\";\n\ninterface FormDiabetesFamilyMemberInterface {\n  success: boolean;\n  error: string;\n  onSave: (fm: DiabetesFamilyMemberInterface) => void;\n  onRemove: () => void;\n  id: string;\n  loading: boolean;\n  disabled: boolean;\n  model: DiabetesFamilyMemberInterface;\n  index: number;\n}\n\nconst Relationship = [{value: \"MOM\", label:\"Mom\"},\n{value: \"DAD\", label:\"Dad\"},\n{value: \"BROTHER\", label:\"Brother\"},\n{value: \"SISTER\", label:\"Sister\"},\n{value: \"GRANDMOTHER\", label:\"Grandmother\"},\n{value: \"GRANDFATHER\", label:\"Grandfather\"},\n{value: \"COUSIN\", label:\"Cousin\"},\n{value: \"AUNT\", label:\"Aunt\"},\n{value: \"UNCLE\", label:\"Uncle\"},\n{value: \"GREATGRANDMOTHER\", label:\"Great Grandmother\"},\n{value: \"GREATGRANDFATHER\", label:\"Great Grandfather\"},\n{value: \"SON\", label:\"Son\"},\n{value: \"DAUGHTER\", label:\"Daughter\"},\n{value: \"NIECE\", label:\"Niece\"},\n{value: \"NEWPHEW\", label:\"Nephew\"},\n{value: \"HALF-SISTER\", label:\"Half-sister\"},\n{value: \"HALF-BROTHER\", label:\"Half-brother\"}]\n\nconst DiabetesFamilyMemberForm = ({model, success, error, onSave, id, loading, disabled, index, onRemove }: FormDiabetesFamilyMemberInterface) => {\n  const [fData, onChange] = useState(model);\n  \n  return (\n  <div className=\"col-xs-12\" style={{marginBottom: \"20px\"}}>\n    <Card style={{padding: \"15px\"}}>\n    <Container >\n      <Row>\n        <Col xs=\"11\">\n        <h4 style={{color: \"#007bff\"}}>Family Member {index + 1}</h4>\n        </Col>\n        <Col xs=\"1\">\n          <Button outline color=\"secondary\"\n            onClick={onRemove}\n          >X</Button>\n        </Col>\n      </Row>\n        {\n          error && (\n            <Row>\n                <Col>\n                    <Alert color=\"danger\">\n                        {error}\n                    </Alert>\n                </Col>\n            </Row>\n          )\n        }\n      <Row>\n        <Col xs=\"12\" sm=\"4\">\n            <FormItem id={`userFirstNameFormFamilyMember-${id}`} label=\"First name (*)\" value={fData.firstName}\n            onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                firstName: e.target.value\n              })\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"4\">\n            <FormItem id={`userLastNameFormFamilyMember-${id}`} label=\"Last name (*)\"  value={fData.lastName} onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                lastName: e.target.value\n              })\n\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"4\">\n            <Label for={`genderFormFamilyMember-${id}-male`}>Gender</Label>\n            <FormGroup>\n              <CustomInput  onChange={e => {\n                onChange({\n                ...fData,\n                gender: e.target.value\n              })\n                }}\n                bsSize=\"sm\" type=\"radio\" value=\"male\" checked={fData.gender === \"male\"} name={`genderFormFamilyMember-${id}`} id={`genderFormFamilyMember-${id}-male`} label=\"Male\"  inline/>\n                <CustomInput  onChange={e => {\n                  onChange({\n                ...fData,\n                gender: e.target.value\n              })\n                }}\n                bsSize=\"sm\" type=\"radio\" value=\"female\" checked={fData.gender === \"female\"}  name={`genderFormFamilyMember-${id}`} id={`genderFormFamilyMember-${id}-female`} label=\"Female\"  inline/>\n            </FormGroup>\n          </Col>\n      </Row>\n      <Row>\n        <Col xs=\"12\" sm=\"6\" >\n          <FormGroup>\n            <Label for=\"birthDate\">Birth Date</Label>\n            <Input\n              bsSize=\"sm\"\n              type=\"date\"\n              name=\"date\"\n              id=\"birthDate\"\n              placeholder=\"Birth date\"\n              value={fData.birthDate}\n              onChange={e => {\n                onChange({\n                  ...fData,\n                  birthDate: e.target.value\n                })\n              }}\n              \n            />\n          </FormGroup>\n        </Col>\n        <Col xs=\"12\" sm=\"6\">\n          <FormGroup>\n            <Label for={`RelationshipFormFamilyMember`}>Relationship to patient</Label>\n            <CustomInput\n            value={fData.relationship || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                relationship: e.target.value\n              })\n            }}\n             type=\"select\" id={`RelationshipFormFamilyMember`} name=\"family_member_one_cancer\">\n              <option value=\"\">Select</option>\n              {\n                Relationship.map((s) => (\n                  <option key={`relationship-diabetes-${s.value}`}  value={s.value} >{s.label}</option>\n                ))\n              }\n            </CustomInput>\n          </FormGroup>\n        </Col>\n          <Col xs=\"12\" sm=\"6\">\n            <FormItem id={`DiagnosisOrSymptomFormFamilyMember-${id}`} label=\"Diagnosis or Symptoms (*)\" value={fData.diagnosisOrSymptoms} onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                diagnosisOrSymptoms: e.target.value\n              })\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"6\">\n            <FormItem \n              id={`AgeOfOnsetFormFamilyMember-${id}`}\n              label=\"Age of onset (*)\" value={fData.ageOfOnset}\n              onChange={(e: any)=>{\n                onChange({\n                  ...fData,\n                  ageOfOnset: e.target.value\n                })\n              }}/>\n          </Col>\n      </Row>\n      <Row>\n        <Col sm={{ size: '2', offset: 10 }}>\n          <Button color=\"success\" onClick={() => {\n            onSave(fData)\n          }}>Save</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {\n            fData !== model && <span>Unsaved data</span>\n          }\n        </Col>\n      </Row>\n    </Container>\n  </Card>\n</div>\n  )}\n\n  export default DiabetesFamilyMemberForm",["444","445"],"/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/index.tsx",["446","447","448","449","450"],"import { useContext, useState } from \"react\";\nimport CardiacFamilyMemberForm from \"../../Form/CardiacFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  CardiacFamilyMemberInterface,\n} from \"../../../context/Cardiac.Contex\";\nimport { guidGenerator } from \"../../../utils\";\n\nconst CardiacFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Cardiac, updateContext } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Cardiac;\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: CardiacFamilyMemberInterface, index: number) => (\n                <Row key={`CardiacFamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <CardiacFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`CardiacFamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: CardiacFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default CardiacFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Form/CardiacFamilyMember.tsx",[],["451","452"],"/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/context/Cardiac.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/index.tsx",["453","454","455","456","457","458","459"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  CustomInput,\n  CardImgOverlay,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport {\n  CardiacDataInterface,\n  CardiacDiagnosticInterface,\n  FamilyMemberHeartConditions,\n} from \"../../../context/Cardiac.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst Diagnostic = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const { Cardiac, updateContext } = useContext(AppContext);\n  const {\n    tabs: { Diagnostic },\n  } = Cardiac;\n\n  const save = useCallback(() => {\n    const error: CardiacDiagnosticInterface = {\n      typeOfCardiac: null,\n      age: null,\n      prescribedMedications: null,\n      heartMedicationList: null,\n      OTC: null,\n      diabetesType: null,\n      hasDiabetes: null,\n      isRCECardioTransfer: null,\n      otherDiagnosis: null,\n    };\n    if (Diagnostic.data.typeOfCardiac.length === 0) {\n      error.typeOfCardiac = \"Indicated test can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Diagnostic.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [Diagnostic.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <Label>\n                <b>Have you been diagnosed with any of the following?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <p> (check all that apply)</p>\n            </Col>\n            <Col xs=\"12\">\n              {FamilyMemberHeartConditions.map((condition: any) => (\n                <FormGroup\n                  check\n                  inline\n                  key={`Cardiac-FamilyMemberHeartConditions-condition-${condition.value}`}\n                >\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      value={condition.value}\n                      checked={Diagnostic.data.typeOfCardiac.includes(\n                        condition.value\n                      )}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          updateContext(\"typeOfCardiac\", [\n                            ...Diagnostic.data.typeOfCardiac,\n                            e.target.value,\n                          ]);\n                        } else {\n                          const index = Diagnostic.data.typeOfCardiac.findIndex(\n                            (i: string) => i === e.target.value\n                          );\n                          const newPreviousTests =\n                            Diagnostic.data.typeOfCardiac;\n                          newPreviousTests.splice(index, 1);\n                          updateContext(\"typeOfCardiac\", newPreviousTests);\n                        }\n                      }}\n                    />{\" \"}\n                    {condition.label}\n                  </Label>\n                </FormGroup>\n              ))}\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-prescrebied-medication-1\">\n                  <b>\n                    Have you ever been prescribed medications for you heart like\n                    Nitrates, Renexa or Nitrostat or any other drugs for High\n                    Blood Pressure or High Cholesterol?\n                  </b>\n                </Label>\n                <div>\n                  {[\"Yes\", \"No\"].map((type: string, index: number) => (\n                    <CustomInput\n                      inline\n                      value={type}\n                      checked={Diagnostic.data.prescribedMedications === type}\n                      onClick={(e: any) => {\n                        updateContext(\"prescribedMedications\", e.target.value);\n                      }}\n                      type=\"radio\"\n                      id={`Cardiac-FamilyMemberHeartConditions-prescrebied-medication-${index}`}\n                      key={`Cardiac-FamilyMemberHeartConditions-prescrebied-medication-${index}`}\n                      name=\"Cardiac-FamilyMemberHeartConditions-prescrebied-medication-Radio\"\n                      label={type}\n                    />\n                  ))}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-diabetesType-1\">\n                  <b>Do you have any type of diabetes?</b>\n                </Label>\n                <div>\n                  {[\"Type 1\", \"Type 2\", \"None\"].map(\n                    (type: string, index: number) => (\n                      <CustomInput\n                        inline\n                        onClick={(e: any) => {\n                          updateContext(\"diabetesType\", e.target.value);\n                        }}\n                        value={type}\n                        checked={Diagnostic.data.diabetesType === type}\n                        type=\"radio\"\n                        id={`Cardiac-FamilyMemberHeartConditions-diabetesType-${index}`}\n                        key={`Cardiac-FamilyMemberHeartConditions-diabetesType-${index}`}\n                        name=\"Cardiac-FamilyMemberHeartConditions-diabetesType-Radio\"\n                        label={type}\n                      />\n                    )\n                  )}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-OTC\">\n                  <b>\n                    List All medications, prescribed medications and all OTC:\n                  </b>\n                </Label>\n                <Input\n                  onChange={(e: any) => {\n                    updateContext(\"OTC\", e.target.value);\n                  }}\n                  value={Diagnostic.data.OTC}\n                  type=\"textarea\"\n                  name=\"text\"\n                  id=\"Cardiac-FamilyMemberHeartConditions-OTC\"\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <FormGroup>\n                <Label for=\"isRCECardioTransferCheckbox\">\n                  <b>Check here if doing a RCE cardio transfer</b>\n                </Label>\n                <div>\n                  <CustomInput\n                    onClick={(e: any) => {\n                      updateContext(\"isRCECardioTransfer\", e.target.checked);\n                    }}\n                    checked={Diagnostic.data.isRCECardioTransfer}\n                    type=\"checkbox\"\n                    id=\"isRCECardioTransferCheckbox\"\n                    label=\"Yes, I'm.\"\n                  />\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Diagnostic;\n","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/table.tsx",["460","461","462"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Cardiac, updateContext, Error }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic } } } = Cardiac\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Diagnosed</th>\n          <th>Prescribed Medications</th>\n          <th>Diabetes Type</th>\n          <th>Prescribed medications and all OTC</th>\n          <th>Is RCE cardio transfer?</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.typeOfCardiac.join(\", \")}.</td>\n          <td>{Diagnostic.prescribedMedications}</td>\n          <td>{Diagnostic.diabetesType}</td>\n          <td>{Diagnostic.OTC}</td>\n          <td>{Diagnostic.isRCECardioTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/index.tsx",["463","464","465","466","467","468","469","470"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport CancerFamilyMemberForm from \"../../Form/CancerFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  CancerFamilyMemberInterface,\n} from \"../../../context/Cancer.Contex\";\nimport { guidGenerator } from \"../../../utils\";\n\nconst CancerFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Cancer, updateContext, Error } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Cancer;\n\n  const save = useCallback(() => {\n    updateContext(\"success\", true);\n  }, [FamilyMember.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [FamilyMember.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: CancerFamilyMemberInterface, index: number) => (\n                <Row key={`CancerFamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <CancerFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`CancerFamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: CancerFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default CancerFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/table.tsx",["471","472","473"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Cancer, updateContext, Error }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic } } } = Cancer\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Diagnosed</th>\n          <th>Prescribed Medications</th>\n          <th>Diabetes Type</th>\n          <th>Prescribed medications and all OTC</th>\n          <th>Is RCE Cancer transfer?</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.indicationTest}</td>\n          <td>{Diagnostic.isDiagnosed ? 'Yes' : 'No'}</td>\n          <td>{Diagnostic.treatment}</td>\n          <td>{Diagnostic.OTC}</td>\n          <td>{Diagnostic.isRCECancerTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/index.tsx",["474","475","476","477","478","479","480","481","482","483","484","485","486","487"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormFeedback,\n  CustomInput,\n  Button,\n  ButtonGroup,\n} from \"reactstrap\";\nimport InputMask from \"react-input-mask\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport ProgressMobileStepper from \"../../Stepper\";\nimport {\n  FamilyMemberHeartConditions,\n  DiagnosedCancerList,\n  TreatmentCancerList,\n  CancerDiagnosticInterface,\n  ListInterface,\n} from \"../../../context/Cancer.Contex\";\nimport { calculateError } from \"../../../utils\";\nimport OutlinedCard from \"../../Stepper/Card\";\n\nconst Diagnostic = (props: any) => {\n  const { Cancer, updateContext } = useContext(AppContext);\n  const {\n    tabs: { Diagnostic },\n  } = Cancer;\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [currentStepItem, setCurrentStepItem] = useState<any>(() => {\n    const [ent, value] = Object.entries(Diagnostic.data.cancerList)[\n      currentStep\n    ];\n    return {\n      slug: ent,\n      ...((value as unknown) as ListInterface),\n    };\n  });\n\n  const save = useCallback(() => {\n    const error: CancerDiagnosticInterface = {\n      indicationTest: null,\n      isDiagnosed: null,\n      isRCECancerTransfer: null,\n      treatment: null,\n      OTC: null,\n      cancerList: Object.keys(Diagnostic.data.cancerList).reduce(\n        (a: any, c: string) => {\n          a[c] = null;\n          return a;\n        },\n        {}\n      ),\n    };\n\n    if (Diagnostic.data.isDiagnosed === \"\") {\n      error.isDiagnosed = \"Indicated test can not be empty.\";\n    } else if (Diagnostic.data.isDiagnosed === \"Yes\") {\n      // if (Diagnostic.data.indicationTest === \"\") {\n      //   error.indicationTest = \"Indicated test can not be empty.\";\n      // }\n      // if (Diagnostic.data.OTC === \"\") {\n      //   error.OTC = \"OTC can not be empty.\";\n      // }\n      Object.entries(Diagnostic.data.cancerList).map((l) => {\n        const [slug, value] = l;\n        const item: ListInterface = (value as unknown) as ListInterface;\n        if (item.value === \"\") {\n          error.cancerList[slug] = `${slug} is required`;\n        } else if (item.value === \"Yes\") {\n          if (!item?.secondValue) {\n            error.cancerList[slug] = `${item.secondLabel} is required`;\n          }\n          if (item.radio && !item.radio.value) {\n            error.cancerList[slug] = `${item.radio.label} is required`;\n          }\n          if (item.number && !item.number.value) {\n            error.cancerList[slug] = `${item.number.label} is required`;\n          }\n        }\n      });\n      debugger;\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Diagnostic.data]);\n  const validateField = useCallback((): boolean => {\n    let error = null;\n    if (Diagnostic.data.cancerList[currentStepItem.slug].value === \"\") {\n      error = `${currentStepItem.slug} is required`;\n    } else if (\n      Diagnostic.data.cancerList[currentStepItem.slug].value === \"Yes\"\n    ) {\n      if (!Diagnostic.data.cancerList[currentStepItem.slug]?.secondValue) {\n        error = `${currentStepItem.secondLabel} is required`;\n      }\n      if (\n        currentStepItem.radio &&\n        !Diagnostic.data.cancerList[currentStepItem.slug].radio.value\n      ) {\n        error = `${currentStepItem.radio.label} is required`;\n      }\n      if (\n        currentStepItem.number &&\n        !Diagnostic.data.cancerList[currentStepItem.slug].number.value\n      ) {\n        error = `${currentStepItem.number.label} is required`;\n      }\n    }\n    const nextError = {\n      ...Diagnostic.error,\n      cancerList: {\n        ...Diagnostic.error?.cancerList,\n        [currentStepItem.slug]: error,\n      },\n    };\n    updateContext(\"error\", nextError);\n    // updateContext(\"success\", !calculateError(error));\n    return error ? false : true;\n  }, [currentStepItem]);\n\n  const steps = useMemo(\n    () => Object.values(Diagnostic.data.cancerList).length,\n    [Diagnostic.data.cancerList]\n  );\n\n  useEffect(() => {\n    const [ent, value] = Object.entries(Diagnostic.data.cancerList)[\n      currentStep\n    ];\n    setCurrentStepItem({\n      slug: ent,\n      ...((value as unknown) as ListInterface),\n    });\n  }, [currentStep]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [Diagnostic.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <FormGroup>\n                <Label for=\"Cancer-FamilyMemberHeartConditions-isDiagnosed-1\">\n                  <b>Have you ever been diagnosed with any type of cancer?</b>\n                </Label>\n                <div>\n                  <ButtonGroup size=\"lg\">\n                    <Button\n                      outline={Diagnostic.data.isDiagnosed !== \"Yes\"}\n                      color={\"primary\"}\n                      onClick={(e: any) => updateContext(\"isDiagnosed\", \"Yes\")}\n                    >\n                      Yes\n                    </Button>\n                    <Button\n                      outline={Diagnostic.data.isDiagnosed !== \"No\"}\n                      onClick={(e: any) => updateContext(\"isDiagnosed\", \"No\")}\n                    >\n                      No\n                    </Button>\n                  </ButtonGroup>\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          {Diagnostic.data.isDiagnosed === \"Yes\" && (\n            <>\n              <Row\n                key={`ListInterface-${currentStepItem.slug}-${currentStepItem.label}`}\n              >\n                {console.log(currentStepItem)}\n                <Col xs=\"12\">\n                  <OutlinedCard\n                    {...currentStepItem}\n                    invalid={Diagnostic.error?.cancerList[currentStepItem.slug]}\n                    // currentStepItem.slug={currentStepItem.slug}\n                    id={`ListInterface-currentStepItem-id-${currentStepItem.label}`}\n                    onChange={(value: string) => {\n                      updateContext(\"cancerList\", {\n                        ...Diagnostic.data.cancerList,\n                        [currentStepItem.slug]: {\n                          ...Diagnostic.data.cancerList[currentStepItem.slug],\n                          value,\n                        },\n                      });\n                      debugger;\n                      if (value === \"No\" && currentStep < steps - 1) {\n                        setCurrentStep(currentStep + 1);\n                      }\n                      //  else {\n                      //   Diagnostic.save();\n                      // }\n                    }}\n                    secondValue={\n                      Diagnostic.data.cancerList[currentStepItem.slug]\n                        .secondValue\n                    }\n                    radio={\n                      Diagnostic.data.cancerList[currentStepItem.slug].radio\n                    }\n                    // number={\n                    //   Diagnostic.data.cancerList[currentStepItem.slug].number\n                    // }\n                    onSecondLabelChange={(value: number) => {\n                      debugger;\n                      updateContext(\"cancerList\", {\n                        ...Diagnostic.data.cancerList,\n                        [currentStepItem.slug]: {\n                          ...Diagnostic.data.cancerList[currentStepItem.slug],\n                          secondValue: value,\n                        },\n                      });\n                    }}\n                    onRadioChange={(value: string) => {\n                      debugger;\n                      updateContext(\"cancerList\", {\n                        ...Diagnostic.data.cancerList,\n                        [currentStepItem.slug]: {\n                          ...Diagnostic.data.cancerList[currentStepItem.slug],\n                          radio: {\n                            ...Diagnostic.data.cancerList[currentStepItem.slug]\n                              .radio,\n                            value,\n                          },\n                        },\n                      });\n                    }}\n                    value={\n                      Diagnostic.data.cancerList[currentStepItem.slug].value\n                    }\n                  />\n                </Col>\n              </Row>\n              <ProgressMobileStepper\n                activeStep={currentStep}\n                handleBack={() => {\n                  setCurrentStep(currentStep - 1);\n                }}\n                handleNext={() => {\n                  if (validateField()) {\n                    setCurrentStep(currentStep + 1);\n                  }\n                }}\n                steps={steps}\n              />\n              {/* <Row>\n                <Col xs=\"12\">\n                  <FormGroup>\n                    <Label for=\"Cancer-FamilyMemberHeartConditions-indicationTest-1\">\n                      <b>Indication for testing selection</b>\n                    </Label>\n                    <div>\n                      {DiagnosedCancerList.map((type: any, index: number) => (\n                        <CustomInput\n                          inline\n                          onClick={(e: any) => {\n                            updateContext(\"indicationTest\", e.target.value);\n                          }}\n                          value={type.value}\n                          invalid={Diagnostic.error?.indicationTest}\n                          checked={\n                            Diagnostic.data.indicationTest === type.value\n                          }\n                          type=\"radio\"\n                          id={`Cancer-FamilyMemberHeartConditions-indicationTest-${index}`}\n                          key={`Cancer-FamilyMemberHeartConditions-indicationTest-${index}`}\n                          name=\"Cancer-FamilyMemberHeartConditions-indicationTest-Radio\"\n                          label={type.label}\n                        />\n                      ))}\n                    </div>\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs=\"12\">\n                  <FormGroup>\n                    <Label for=\"Cancer-FamilyMemberHeartConditions-treatment-1\">\n                      <b>Previous or current treatment</b>\n                    </Label>\n                    <div>\n                      {TreatmentCancerList.map(\n                        (treatment: any, index: number) => (\n                          <CustomInput\n                            inline\n                            onClick={(e: any) => {\n                              updateContext(\"treatment\", e.target.value);\n                            }}\n                            value={treatment.value}\n                            checked={Diagnostic.data.treatment.value}\n                            type=\"radio\"\n                            id={`Cancer-FamilyMemberHeartConditions-treatment-${index}`}\n                            key={`Cancer-FamilyMemberHeartConditions-treatment-${index}`}\n                            name=\"Cancer-FamilyMemberHeartConditions-treatment-Radio\"\n                            label={treatment.label}\n                          />\n                        )\n                      )}\n                    </div>\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs=\"12\">\n                  <FormGroup>\n                    <Label for=\"Cancer-FamilyMemberHeartConditions-OTC\">\n                      <b>\n                        List All medications, prescribed medications and all\n                        OTC:\n                      </b>\n                    </Label>\n                    <Input\n                      onChange={(e: any) => {\n                        updateContext(\"OTC\", e.target.value);\n                      }}\n                      value={Diagnostic.data.OTC}\n                      type=\"textarea\"\n                      name=\"text\"\n                      id=\"Cancer-FamilyMemberHeartConditions-OTC\"\n                    />\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs=\"12\">\n                  <FormGroup>\n                    <Label for=\"isRCECancerTransferCheckbox\">\n                      <b>Check here if doing a RCE Cancer transfer</b>\n                    </Label>\n                    <div>\n                      <CustomInput\n                        onClick={(e: any) => {\n                          updateContext(\n                            \"isRCECancerTransfer\",\n                            e.target.checked\n                          );\n                        }}\n                        checked={Diagnostic.data.isRCECancerTransfer}\n                        type=\"checkbox\"\n                        id=\"isRCECancerTransferCheckbox\"\n                        label=\"Yes, I'm.\"\n                      />\n                    </div>\n                  </FormGroup>\n                </Col>\n              </Row> */}\n            </>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Diagnostic;\n","/private/var/www/oberholtzermedia-form/src/context/Cancer.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Form/CancerFamilyMember.tsx",["488"],"import FormItem from  \"./Item\"\nimport { Container, Row, Col, FormGroup, Label, Input,\n    Alert, Button, Card, CustomInput } from 'reactstrap';\nimport { CancerFamilyMemberInterface, FamilyMemberHeartConditions, Relationship } from \"../../context/Cancer.Contex\";\nimport { useState } from \"react\";\n\ninterface FormCancerFamilyMemberInterface {\n  success: boolean;\n  error: string;\n  onSave: (fm: CancerFamilyMemberInterface) => void;\n  onRemove: () => void;\n  id: string;\n  loading: boolean;\n  disabled: boolean;\n  model: CancerFamilyMemberInterface;\n  index: number;\n}\n\nconst CancerFamilyMember = ({model, success, error, onSave, id, loading, disabled, index, onRemove }: FormCancerFamilyMemberInterface) => {\n  const [fData, onChange] = useState(model);\n  \n  return (\n  <div className=\"col-xs-12\" style={{marginBottom: \"20px\"}}>\n    <Card style={{padding: \"15px\"}}>\n    <Container >\n      <Row>\n        <Col xs=\"11\">\n          <h4 style={{color: \"#007bff\"}}>Family Member {index + 1}</h4>\n        </Col>\n        <Col xs=\"1\">\n          <Button outline color=\"secondary\"\n            onClick={onRemove}\n          >X</Button>\n        </Col>\n      </Row>\n        {\n          error && (\n            <Row>\n                <Col>\n                    <Alert color=\"danger\">\n                        {error}\n                    </Alert>\n                </Col>\n            </Row>\n          )\n        }\n      <Row>\n      <Col xs=\"12\" sm=\"3\" >\n          <FormGroup>\n            <Label for={`AgeOfDiagnosisCancerFormFamilyMember${id}`}>Age of diagnosis</Label>\n            <Input\n              bsSize=\"sm\"\n              type=\"text\"\n              name=\"AgeOfDiagnosis\"\n              id={`AgeOfDiagnosisCancerFormFamilyMember${id}`}\n              placeholder=\"Age of diagnosis\"\n              value={fData.ageOfDiagnosis || ''}\n              onChange={e => {\n                onChange({\n                  ...fData,\n                  ageOfDiagnosis: e.target.value\n                })\n              }}\n            />\n          </FormGroup>\n        </Col>\n      <Col xs=\"12\" sm=\"3\">\n          <FormGroup>\n            <Label for={`RelationshipCancerFormFamilyMember${id}`}>Relationship</Label>\n            <CustomInput\n            value={fData.relationship || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                relationship: e.target.value\n              })\n            }}\n             type=\"select\" id={`RelationshipCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              {\n                Relationship.map((s) => (\n                  <option value={s.value} key={s.value} >{s.label}</option>\n                ))\n              }\n            </CustomInput>\n          </FormGroup>\n        </Col>\n      <Col xs=\"12\" sm=\"3\">\n          <FormGroup>\n            <Label for={`materialOrPaternalCancerFormFamilyMember${id}`}>Maternal or Paternal</Label>\n            <CustomInput\n            value={fData.materialOrPaternal || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                materialOrPaternal: e.target.value\n              })\n            }}\n             type=\"select\" id={`materialOrPaternalCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              <option value=\"Maternal\" >Maternal</option>\n              <option value=\"Paternal\" >Paternal</option>\n            </CustomInput>\n          </FormGroup>\n        </Col>\n        <Col xs=\"12\" sm=\"3\">\n          <FormItem\n            id={`ageCancerFormFamilyMember-${id}`}\n            label=\"Family Member Age\" \n            value={fData.age}\n            onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                age: e.target.value\n              })\n            }}/>\n        </Col>\n      </Row>\n      {/* <Row> */}\n        {/* <Col xs=\"12\">\n            <Label><b>Have you been diagnosed with any of the following?</b></Label>\n        </Col>\n        <Col xs=\"12\">\n            <p> (check all that apply)</p>\n        </Col> */}\n        {/* <Col xs=\"12\">\n          {\n            FamilyMemberHeartConditions.map((condition: any, index: number) => (\n              <FormGroup check inline key={`CancerFamilyMember-heart-condition-${index}`}>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    value={condition.value}\n                    checked={fData.heartConditions.includes(condition.value)}\n                    onChange={e => {\n                      if (e.target.checked) {\n                        onChange({\n                          ...fData,\n                          heartConditions: \n                          [\n                            ...fData.heartConditions,\n                            e.target.value\n                          ]\n                        })\n                      } else {\n                        const index = fData.heartConditions.findIndex((i: string) => i === e.target.value)\n                        const heartConditions = fData.heartConditions\n                        heartConditions.splice(index, 1)\n                        onChange({\n                          ...fData,\n                          heartConditions\n                        })\n                      }\n                    }}/> { condition.label }\n                </Label>\n              </FormGroup>\n            ))\n          }\n        </Col>  */}\n      {/* </Row> */}\n      <Row>\n        <Col xs=\"4\" >\n          <br />\n          <FormGroup>\n            <Label for={`typeOfCancerCancerFormFamilyMember${id}`}>Has any type of Cancer?</Label>\n            <CustomInput\n            value={fData.typeOfCancer || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                typeOfCancer: e.target.value\n              })\n            }}\n             type=\"select\" id={`typeOfCancerCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              <option value=\"Yes\" >Yes</option>\n              <option value=\"No\" >No</option>\n            </CustomInput>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={{ size: '2', offset: 10 }}>\n          <Button color=\"success\" onClick={() => {\n            onSave(fData)\n          }}>Save</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {\n            fData !== model && <span>Unsaved data</span>\n          }\n        </Col>\n      </Row>\n    </Container>\n  </Card>\n</div>\n  )}\n\n  export default CancerFamilyMember","/private/var/www/oberholtzermedia-form/src/utils/index.ts",[],"/private/var/www/oberholtzermedia-form/src/components/SubmitFormModal/index.tsx",["489","490","491"],"/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport { useContext, useEffect } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport { submitForm } from \"../../actions/medicare\";\nimport { AppContext } from \"../../context/App.Contex\";\n\nconst SubmitFormModal = (props: any) => {\n  const { ContextData, APPError } = useContext(AppContext);\n\n  console.log(\"SubmitFormModal\", { APPError });\n  return (\n    <Modal isOpen={props.isOpen} size=\"lg\">\n      <ModalHeader>Form Sync</ModalHeader>\n      <ModalBody>\n        {APPError ? `${APPError.message}` : \"Saving form ...\"}\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={props.onCancel}>\n          Cancel\n        </Button>\n        {/* <Button color=\"primary\" onClick={props.toggle}>Submit</Button>{' '} */}\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default SubmitFormModal;\n","/private/var/www/oberholtzermedia-form/src/components/ProgressBottom.tsx",["492","493","494","495","496","497","498"],"/private/var/www/oberholtzermedia-form/src/context/Agent.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Agent/Info/table.tsx",[],["499","500"],"/private/var/www/oberholtzermedia-form/src/components/Agent/Info/index.tsx",["501","502","503","504","505","506","507","508","509","510"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  CustomInput,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport FormItem from \"../../Form/Item\";\nimport { calculateError } from \"../../../utils\";\n\nconst AgentInfo = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Agent, updateContext } = useContext(AppContext);\n\n  const {\n    tabs: { Info },\n  } = Agent;\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(Info.error);\n  }, [Info.error]);\n\n  const save = useCallback(() => {\n    const error: {\n      url: null | string;\n      name: null | string;\n    } = {\n      url: null,\n      name: null,\n    };\n\n    if (Info.data.url === \"\") {\n      error.url = \"Url can not be empty.\";\n    }\n\n    if (Info.data.name === \"\") {\n      error.name = \"Name can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Info.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [Info.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                id={`agentUrlFormFamilyMember-url`}\n                label=\"Recording URL\"\n                value={Info.data.url}\n                error={Info.error?.url}\n                onChange={(e: any) => {\n                  updateContext(\"url\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                id={`agentNameFormFamilyMember-name`}\n                label=\"Agent name\"\n                value={Info.data.name}\n                error={Info.error?.name || null}\n                onChange={(e: any) => {\n                  updateContext(\"name\", e.target.value);\n                }}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default AgentInfo;\n","/private/var/www/oberholtzermedia-form/src/components/templates/index.tsx",["511","512","513"],"import { useContext } from \"react\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\nimport { AppContext } from \"../../context/App.Contex\";\n\nimport Progress from \"../Progress\";\n\nconst TPage = () => {\n  const { activeTab, activePanel, updateContext } = useContext(AppContext);\n  console.log({ activePanel });\n  return (\n    <div id=\"wizard_container\">\n      <div id=\"top-wizard\">\n        <Container>\n          <Row>\n            <Col>\n              <Progress />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h3>{activePanel.label}</h3>\n              <p>\n                Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum hass been the industry's standard dummy\n                text ever since the 1500s,{\" \"}\n              </p>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div id=\"middle-wizard\">\n        <activePanel.component />\n      </div>\n      <div id=\"bottom-wizard\"></div>\n    </div>\n  );\n};\n\nexport default TPage;\n","/private/var/www/oberholtzermedia-form/src/actions/medicare.ts",["514"],"/private/var/www/oberholtzermedia-form/src/context/Auth.Context.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Stepper/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Stepper/Card.tsx",["515","516","517","518","519","520","521"],"import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Grid, Divider } from \"@material-ui/core\";\nimport InputMask from \"react-input-mask\";\nimport { Button, ButtonGroup, Input } from \"reactstrap\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction FormRow() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default function OutlinedCard(props: any) {\n  const {\n    onChange,\n    onSecondLabelChange,\n    id,\n    label,\n    value,\n    checked,\n    hint,\n    error,\n    secondLabel,\n    ps,\n    secondValue,\n    onRadioChange,\n    radio,\n    invalid,\n    description,\n  } = props;\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {label}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {description}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {`${hint ? hint : \"\"} ${ps ? ps : secondLabel}`}\n        </Typography>\n        <Divider />\n        <Typography className={classes.pos}>\n          {value === \"Yes\" && (\n            <>\n              {secondLabel && (\n                <>\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    {secondLabel}\n                  </Typography>\n                  <Input\n                    type=\"tel\"\n                    mask=\"99\"\n                    maskChar=\"\"\n                    invalid={invalid}\n                    value={secondValue}\n                    id={`Cancer-FamilyMemberHeartConditions-second-label-form-${id}`}\n                    tag={InputMask}\n                    onChange={(e: any) => onSecondLabelChange(e.target.value)}\n                  />\n                </>\n              )}\n            </>\n          )}\n        </Typography>\n\n        {invalid && <Alert severity=\"error\">{invalid}</Alert>}\n      </CardContent>\n      <CardActions>\n        <ButtonGroup>\n          <Button\n            outline={value !== \"Yes\"}\n            color={\"primary\"}\n            onClick={(e: any) => onChange(\"Yes\")}\n          >\n            Yes\n          </Button>\n          <Button outline={value !== \"No\"} onClick={(e: any) => onChange(\"No\")}>\n            No\n          </Button>\n        </ButtonGroup>\n      </CardActions>\n    </Card>\n  );\n}\n\n// const ButtonG = ({\n//   onChange,\n//   onSecondLabelChange,\n//   id,\n//   label,\n//   value,\n//   checked,\n//   error,\n//   secondLabel,\n//   secondValue,\n//   onRadioChange,\n//   radio,\n//   invalid,\n// }: any) => {\n//   return (\n//     <>\n//       <Row>\n//         <Col xs=\"12\" sm={value === \"Yes\" ? \"2\" : \"12\"}>\n//           {label}\n//           <br />\n// <ButtonGroup size=\"lg\">\n//   <Button\n//     outline={value !== \"Yes\"}\n//     color={\"primary\"}\n//     onClick={(e: any) => onChange(\"Yes\")}\n//   >\n//     Yes\n//   </Button>\n//   <Button\n//     outline={value !== \"No\"}\n//     onClick={(e: any) => onChange(\"No\")}\n//   >\n//     No\n//   </Button>\n// </ButtonGroup>\n\n//           {/* <FormGroup inline>\n//             <Label\n//               for={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//               inline\n//             >\n//               {label}\n//             </Label>\n//             <div>\n//               <CustomInput\n//                 inline\n//                 invalid={invalid}\n//                 onClick={(e: any) => onChange(\"Yes\")}\n//                 value={value}\n//                 checked={value === \"Yes\"}\n//                 type=\"radio\"\n//                 id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 label={\"Yes\"}\n//               />\n//               <CustomInput\n//                 inline\n//                 invalid={invalid}\n//                 onClick={(e: any) => onChange(\"No\")}\n//                 value={value}\n//                 checked={value === \"No\"}\n//                 type=\"radio\"\n//                 id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-no-${id}`}\n//                 name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 label={\"No\"}\n//               />\n//             </div>\n//           </FormGroup> */}\n//         </Col>\n//         {value === \"Yes\" && (\n//           <>\n// {secondLabel && (\n//   <Col xs=\"12\" sm=\"5\">\n//     <FormGroup>\n//       <Label>{secondLabel}</Label>\n//       <Input\n//         type=\"tel\"\n//         mask=\"99\"\n//         maskChar=\"\"\n//         invalid={invalid}\n//         value={secondValue}\n//         id={`Cancer-FamilyMemberHeartConditions-second-label-form-${id}`}\n//         tag={InputMask}\n//         onChange={(e: any) => onSecondLabelChange(e.target.value)}\n//       />\n//       <FormFeedback>{error}</FormFeedback>\n//     </FormGroup>\n//   </Col>\n// )}\n//             {radio && (\n//               <Col xs=\"12\" sm=\"5\">\n//                 <FormGroup inline>\n//                   <Label\n//                     for={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                     inline\n//                   >\n//                     {label}\n//                   </Label>\n//                   <div>\n//                     {radio.items.map((r: any) => (\n//                       <CustomInput\n//                         inline\n//                         invalid={invalid}\n//                         onClick={(e: any) => onRadioChange(r.value)}\n//                         value={value}\n//                         checked={radio.value === r.value}\n//                         type=\"radio\"\n//                         id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-${r.value}-form-${id}`}\n//                         name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-${r.value}-form-${id}`}\n//                         label={r.label}\n//                       />\n//                     ))}\n//                   </div>\n//                 </FormGroup>\n//               </Col>\n//             )}\n//           </>\n//         )}\n//         {invalid && <div>{invalid}</div>}\n//       </Row>\n//     </>\n//   );\n// };\n","/private/var/www/oberholtzermedia-form/src/stories/Button.stories.tsx",[],["522","523"],"/private/var/www/oberholtzermedia-form/src/stories/Page.tsx",[],"/private/var/www/oberholtzermedia-form/src/stories/Button.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/Stepper.stories.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Stepper.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/App.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/Agent/index.tsx",["524","525","526","527"],"/private/var/www/oberholtzermedia-form/src/v2/store/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/User/index.tsx",["528","529","530"],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/Accordeon.stories.tsx",[],"/private/var/www/oberholtzermedia-form/src/stories/Header.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PersonalInfo.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Agent/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/User.initialState.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/InputPhone/index.tsx",["531"],"import React from \"react\";\nimport MaskedInput from \"react-text-mask\";\nimport Input from \"@material-ui/core/Input\";\nimport { TextField } from \"@material-ui/core\";\n\ninterface TextMaskCustomProps {\n  inputRef: (ref: HTMLInputElement | null) => void;\n}\n\nfunction TextMaskCustom(props: TextMaskCustomProps) {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref: any) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      mask={[\n        \"(\",\n        /[1-9]/,\n        /\\d/,\n        /\\d/,\n        \")\",\n        \" \",\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        \"-\",\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        /\\d/,\n      ]}\n      placeholderChar={\"\\u2000\"}\n      showMask\n    />\n  );\n}\n\nexport default function InputPhone({\n  value,\n  onChange,\n  name,\n  id,\n  error,\n  label,\n  helperText,\n  placeholder,\n}: any) {\n  return (\n    <TextField\n      value={value}\n      onChange={onChange}\n      fullWidth\n      InputProps={{\n        inputComponent: TextMaskCustom as any,\n      }}\n      id={id}\n      label={label}\n      error={error}\n      style={{ margin: 8 }}\n      placeholder={placeholder}\n      helperText={helperText}\n      InputLabelProps={{\n        shrink: true,\n      }}\n      margin=\"dense\"\n      variant=\"outlined\"\n      name={name}\n    />\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AditionalInfo.tsx",["532","533","534","535","536","537","538","539","540","541"],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AddressInfo.tsx",["542","543","544","545","546","547","548","549","550","551","552"],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/MediCare.tsx",["553","554","555","556","557","558","559","560","561","562","563"],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PrimaryCare.tsx",["564"],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/index.tsx",["565","566","567","568","569","570"],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/index.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.initialState.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/quiz/index.tsx",["571","572","573"],{"ruleId":"574","severity":1,"message":"575","line":116,"column":6,"nodeType":"576","endLine":116,"endColumn":20,"suggestions":"577"},{"ruleId":"578","replacedBy":"579"},{"ruleId":"580","replacedBy":"581"},{"ruleId":"582","severity":1,"message":"583","line":3,"column":3,"nodeType":"584","messageId":"585","endLine":3,"endColumn":17},{"ruleId":"582","severity":1,"message":"586","line":4,"column":3,"nodeType":"584","messageId":"585","endLine":4,"endColumn":8},{"ruleId":"582","severity":1,"message":"587","line":5,"column":3,"nodeType":"584","messageId":"585","endLine":5,"endColumn":15},{"ruleId":"582","severity":1,"message":"588","line":6,"column":3,"nodeType":"584","messageId":"585","endLine":6,"endColumn":15},{"ruleId":"582","severity":1,"message":"589","line":50,"column":10,"nodeType":"584","messageId":"585","endLine":50,"endColumn":14},{"ruleId":"582","severity":1,"message":"590","line":50,"column":16,"nodeType":"584","messageId":"585","endLine":50,"endColumn":23},{"ruleId":"582","severity":1,"message":"591","line":51,"column":10,"nodeType":"584","messageId":"585","endLine":51,"endColumn":17},{"ruleId":"582","severity":1,"message":"592","line":51,"column":19,"nodeType":"584","messageId":"585","endLine":51,"endColumn":29},{"ruleId":"582","severity":1,"message":"593","line":55,"column":9,"nodeType":"584","messageId":"585","endLine":55,"endColumn":23},{"ruleId":"582","severity":1,"message":"594","line":56,"column":9,"nodeType":"584","messageId":"585","endLine":56,"endColumn":26},{"ruleId":"574","severity":1,"message":"595","line":121,"column":6,"nodeType":"576","endLine":121,"endColumn":50,"suggestions":"596"},{"ruleId":"574","severity":1,"message":"575","line":125,"column":6,"nodeType":"576","endLine":125,"endColumn":25,"suggestions":"597"},{"ruleId":"578","replacedBy":"598"},{"ruleId":"580","replacedBy":"599"},{"ruleId":"582","severity":1,"message":"600","line":3,"column":10,"nodeType":"584","messageId":"585","endLine":3,"endColumn":26},{"ruleId":"582","severity":1,"message":"601","line":4,"column":8,"nodeType":"584","messageId":"585","endLine":4,"endColumn":20},{"ruleId":"582","severity":1,"message":"602","line":5,"column":3,"nodeType":"584","messageId":"585","endLine":5,"endColumn":17},{"ruleId":"582","severity":1,"message":"603","line":6,"column":3,"nodeType":"584","messageId":"585","endLine":6,"endColumn":19},{"ruleId":"582","severity":1,"message":"604","line":9,"column":8,"nodeType":"584","messageId":"585","endLine":9,"endColumn":24},{"ruleId":"582","severity":1,"message":"605","line":12,"column":8,"nodeType":"584","messageId":"585","endLine":12,"endColumn":13},{"ruleId":"582","severity":1,"message":"606","line":14,"column":8,"nodeType":"584","messageId":"585","endLine":14,"endColumn":13},{"ruleId":"582","severity":1,"message":"607","line":53,"column":10,"nodeType":"584","messageId":"585","endLine":53,"endColumn":17},{"ruleId":"582","severity":1,"message":"608","line":69,"column":25,"nodeType":"584","messageId":"585","endLine":69,"endColumn":40},{"ruleId":"582","severity":1,"message":"609","line":16,"column":3,"nodeType":"584","messageId":"585","endLine":16,"endColumn":7},{"ruleId":"582","severity":1,"message":"610","line":17,"column":3,"nodeType":"584","messageId":"585","endLine":17,"endColumn":11},{"ruleId":"582","severity":1,"message":"611","line":18,"column":3,"nodeType":"584","messageId":"585","endLine":18,"endColumn":12},{"ruleId":"582","severity":1,"message":"612","line":19,"column":3,"nodeType":"584","messageId":"585","endLine":19,"endColumn":14},{"ruleId":"582","severity":1,"message":"613","line":20,"column":3,"nodeType":"584","messageId":"585","endLine":20,"endColumn":8},{"ruleId":"582","severity":1,"message":"614","line":26,"column":10,"nodeType":"584","messageId":"585","endLine":26,"endColumn":38},{"ruleId":"582","severity":1,"message":"615","line":31,"column":10,"nodeType":"584","messageId":"585","endLine":31,"endColumn":17},{"ruleId":"582","severity":1,"message":"616","line":34,"column":5,"nodeType":"584","messageId":"585","endLine":34,"endColumn":14},{"ruleId":"582","severity":1,"message":"617","line":37,"column":5,"nodeType":"584","messageId":"585","endLine":37,"endColumn":21},{"ruleId":"582","severity":1,"message":"618","line":39,"column":5,"nodeType":"584","messageId":"585","endLine":39,"endColumn":10},{"ruleId":"582","severity":1,"message":"619","line":40,"column":5,"nodeType":"584","messageId":"585","endLine":40,"endColumn":13},{"ruleId":"582","severity":1,"message":"620","line":41,"column":5,"nodeType":"584","messageId":"585","endLine":41,"endColumn":17},{"ruleId":"574","severity":1,"message":"575","line":110,"column":6,"nodeType":"576","endLine":110,"endColumn":25,"suggestions":"621"},{"ruleId":"582","severity":1,"message":"586","line":5,"column":3,"nodeType":"584","messageId":"585","endLine":5,"endColumn":8},{"ruleId":"582","severity":1,"message":"589","line":27,"column":10,"nodeType":"584","messageId":"585","endLine":27,"endColumn":14},{"ruleId":"582","severity":1,"message":"590","line":27,"column":16,"nodeType":"584","messageId":"585","endLine":27,"endColumn":23},{"ruleId":"582","severity":1,"message":"593","line":29,"column":9,"nodeType":"584","messageId":"585","endLine":29,"endColumn":23},{"ruleId":"574","severity":1,"message":"575","line":54,"column":6,"nodeType":"576","endLine":54,"endColumn":24,"suggestions":"622"},{"ruleId":"582","severity":1,"message":"623","line":56,"column":9,"nodeType":"584","messageId":"585","endLine":56,"endColumn":27},{"ruleId":"578","replacedBy":"624"},{"ruleId":"580","replacedBy":"625"},{"ruleId":"582","severity":1,"message":"626","line":4,"column":10,"nodeType":"584","messageId":"585","endLine":4,"endColumn":26},{"ruleId":"582","severity":1,"message":"626","line":4,"column":10,"nodeType":"584","messageId":"585","endLine":4,"endColumn":26},{"ruleId":"578","replacedBy":"627"},{"ruleId":"580","replacedBy":"628"},{"ruleId":"582","severity":1,"message":"626","line":4,"column":10,"nodeType":"584","messageId":"585","endLine":4,"endColumn":26},{"ruleId":"582","severity":1,"message":"626","line":4,"column":10,"nodeType":"584","messageId":"585","endLine":4,"endColumn":26},{"ruleId":"578","replacedBy":"629"},{"ruleId":"580","replacedBy":"630"},{"ruleId":"578","replacedBy":"631"},{"ruleId":"580","replacedBy":"632"},{"ruleId":"578","replacedBy":"633"},{"ruleId":"580","replacedBy":"634"},{"ruleId":"582","severity":1,"message":"635","line":3,"column":18,"nodeType":"584","messageId":"585","endLine":3,"endColumn":28},{"ruleId":"582","severity":1,"message":"636","line":5,"column":3,"nodeType":"584","messageId":"585","endLine":5,"endColumn":30},{"ruleId":"582","severity":1,"message":"614","line":6,"column":3,"nodeType":"584","messageId":"585","endLine":6,"endColumn":31},{"ruleId":"582","severity":1,"message":"637","line":7,"column":3,"nodeType":"584","messageId":"585","endLine":7,"endColumn":27},{"ruleId":"578","replacedBy":"638"},{"ruleId":"580","replacedBy":"639"},{"ruleId":"582","severity":1,"message":"640","line":1,"column":10,"nodeType":"584","messageId":"585","endLine":1,"endColumn":26},{"ruleId":"582","severity":1,"message":"641","line":11,"column":22,"nodeType":"584","messageId":"585","endLine":11,"endColumn":29},{"ruleId":"582","severity":1,"message":"642","line":39,"column":5,"nodeType":"584","messageId":"585","endLine":39,"endColumn":12},{"ruleId":"582","severity":1,"message":"643","line":40,"column":5,"nodeType":"584","messageId":"585","endLine":40,"endColumn":18},{"ruleId":"582","severity":1,"message":"644","line":44,"column":5,"nodeType":"584","messageId":"585","endLine":44,"endColumn":16},{"ruleId":"582","severity":1,"message":"645","line":45,"column":5,"nodeType":"584","messageId":"585","endLine":45,"endColumn":23},{"ruleId":"582","severity":1,"message":"646","line":13,"column":3,"nodeType":"584","messageId":"585","endLine":13,"endColumn":13},{"ruleId":"582","severity":1,"message":"647","line":14,"column":3,"nodeType":"584","messageId":"585","endLine":14,"endColumn":17},{"ruleId":"582","severity":1,"message":"648","line":15,"column":3,"nodeType":"584","messageId":"585","endLine":15,"endColumn":11},{"ruleId":"582","severity":1,"message":"649","line":64,"column":18,"nodeType":"584","messageId":"585","endLine":64,"endColumn":27},{"ruleId":"578","replacedBy":"650"},{"ruleId":"580","replacedBy":"651"},{"ruleId":"578","replacedBy":"652"},{"ruleId":"580","replacedBy":"653"},{"ruleId":"582","severity":1,"message":"586","line":11,"column":3,"nodeType":"584","messageId":"585","endLine":11,"endColumn":8},{"ruleId":"582","severity":1,"message":"654","line":12,"column":3,"nodeType":"584","messageId":"585","endLine":12,"endColumn":9},{"ruleId":"582","severity":1,"message":"655","line":24,"column":10,"nodeType":"584","messageId":"585","endLine":24,"endColumn":17},{"ruleId":"582","severity":1,"message":"656","line":24,"column":19,"nodeType":"584","messageId":"585","endLine":24,"endColumn":29},{"ruleId":"574","severity":1,"message":"657","line":49,"column":6,"nodeType":"576","endLine":49,"endColumn":23,"suggestions":"658"},{"ruleId":"574","severity":1,"message":"575","line":56,"column":6,"nodeType":"576","endLine":56,"endColumn":23,"suggestions":"659"},{"ruleId":"582","severity":1,"message":"660","line":8,"column":3,"nodeType":"584","messageId":"585","endLine":8,"endColumn":12},{"ruleId":"582","severity":1,"message":"661","line":9,"column":3,"nodeType":"584","messageId":"585","endLine":9,"endColumn":8},{"ruleId":"582","severity":1,"message":"662","line":10,"column":3,"nodeType":"584","messageId":"585","endLine":10,"endColumn":8},{"ruleId":"582","severity":1,"message":"586","line":11,"column":3,"nodeType":"584","messageId":"585","endLine":11,"endColumn":8},{"ruleId":"582","severity":1,"message":"654","line":12,"column":3,"nodeType":"584","messageId":"585","endLine":12,"endColumn":9},{"ruleId":"582","severity":1,"message":"656","line":20,"column":19,"nodeType":"584","messageId":"585","endLine":20,"endColumn":29},{"ruleId":"574","severity":1,"message":"657","line":45,"column":6,"nodeType":"576","endLine":45,"endColumn":16,"suggestions":"663"},{"ruleId":"574","severity":1,"message":"575","line":52,"column":6,"nodeType":"576","endLine":52,"endColumn":16,"suggestions":"664"},{"ruleId":"582","severity":1,"message":"660","line":8,"column":3,"nodeType":"584","messageId":"585","endLine":8,"endColumn":12},{"ruleId":"582","severity":1,"message":"661","line":9,"column":3,"nodeType":"584","messageId":"585","endLine":9,"endColumn":8},{"ruleId":"582","severity":1,"message":"662","line":10,"column":3,"nodeType":"584","messageId":"585","endLine":10,"endColumn":8},{"ruleId":"582","severity":1,"message":"586","line":11,"column":3,"nodeType":"584","messageId":"585","endLine":11,"endColumn":8},{"ruleId":"582","severity":1,"message":"656","line":24,"column":19,"nodeType":"584","messageId":"585","endLine":24,"endColumn":29},{"ruleId":"582","severity":1,"message":"626","line":4,"column":10,"nodeType":"584","messageId":"585","endLine":4,"endColumn":26},{"ruleId":"582","severity":1,"message":"665","line":2,"column":31,"nodeType":"584","messageId":"585","endLine":2,"endColumn":35},{"ruleId":"578","replacedBy":"666"},{"ruleId":"580","replacedBy":"667"},{"ruleId":"582","severity":1,"message":"660","line":8,"column":3,"nodeType":"584","messageId":"585","endLine":8,"endColumn":12},{"ruleId":"582","severity":1,"message":"661","line":9,"column":3,"nodeType":"584","messageId":"585","endLine":9,"endColumn":8},{"ruleId":"582","severity":1,"message":"662","line":10,"column":3,"nodeType":"584","messageId":"585","endLine":10,"endColumn":8},{"ruleId":"582","severity":1,"message":"586","line":11,"column":3,"nodeType":"584","messageId":"585","endLine":11,"endColumn":8},{"ruleId":"582","severity":1,"message":"656","line":23,"column":19,"nodeType":"584","messageId":"585","endLine":23,"endColumn":29},{"ruleId":"578","replacedBy":"668"},{"ruleId":"580","replacedBy":"669"},{"ruleId":"582","severity":1,"message":"586","line":10,"column":3,"nodeType":"584","messageId":"585","endLine":10,"endColumn":8},{"ruleId":"582","severity":1,"message":"670","line":12,"column":3,"nodeType":"584","messageId":"585","endLine":12,"endColumn":17},{"ruleId":"582","severity":1,"message":"671","line":18,"column":3,"nodeType":"584","messageId":"585","endLine":18,"endColumn":23},{"ruleId":"582","severity":1,"message":"655","line":25,"column":10,"nodeType":"584","messageId":"585","endLine":25,"endColumn":17},{"ruleId":"582","severity":1,"message":"656","line":25,"column":19,"nodeType":"584","messageId":"585","endLine":25,"endColumn":29},{"ruleId":"574","severity":1,"message":"657","line":49,"column":6,"nodeType":"576","endLine":49,"endColumn":23,"suggestions":"672"},{"ruleId":"574","severity":1,"message":"575","line":56,"column":6,"nodeType":"576","endLine":56,"endColumn":23,"suggestions":"673"},{"ruleId":"582","severity":1,"message":"626","line":4,"column":10,"nodeType":"584","messageId":"585","endLine":4,"endColumn":26},{"ruleId":"582","severity":1,"message":"674","line":7,"column":20,"nodeType":"584","messageId":"585","endLine":7,"endColumn":33},{"ruleId":"582","severity":1,"message":"618","line":7,"column":35,"nodeType":"584","messageId":"585","endLine":7,"endColumn":40},{"ruleId":"582","severity":1,"message":"660","line":8,"column":3,"nodeType":"584","messageId":"585","endLine":8,"endColumn":12},{"ruleId":"582","severity":1,"message":"661","line":9,"column":3,"nodeType":"584","messageId":"585","endLine":9,"endColumn":8},{"ruleId":"582","severity":1,"message":"662","line":10,"column":3,"nodeType":"584","messageId":"585","endLine":10,"endColumn":8},{"ruleId":"582","severity":1,"message":"586","line":11,"column":3,"nodeType":"584","messageId":"585","endLine":11,"endColumn":8},{"ruleId":"582","severity":1,"message":"656","line":23,"column":19,"nodeType":"584","messageId":"585","endLine":23,"endColumn":29},{"ruleId":"582","severity":1,"message":"618","line":26,"column":34,"nodeType":"584","messageId":"585","endLine":26,"endColumn":39},{"ruleId":"574","severity":1,"message":"657","line":33,"column":6,"nodeType":"576","endLine":33,"endColumn":25,"suggestions":"675"},{"ruleId":"574","severity":1,"message":"575","line":37,"column":6,"nodeType":"576","endLine":37,"endColumn":25,"suggestions":"676"},{"ruleId":"582","severity":1,"message":"626","line":4,"column":10,"nodeType":"584","messageId":"585","endLine":4,"endColumn":26},{"ruleId":"582","severity":1,"message":"674","line":7,"column":19,"nodeType":"584","messageId":"585","endLine":7,"endColumn":32},{"ruleId":"582","severity":1,"message":"618","line":7,"column":34,"nodeType":"584","messageId":"585","endLine":7,"endColumn":39},{"ruleId":"582","severity":1,"message":"662","line":9,"column":3,"nodeType":"584","messageId":"585","endLine":9,"endColumn":8},{"ruleId":"582","severity":1,"message":"677","line":10,"column":3,"nodeType":"584","messageId":"585","endLine":10,"endColumn":15},{"ruleId":"582","severity":1,"message":"678","line":11,"column":3,"nodeType":"584","messageId":"585","endLine":11,"endColumn":14},{"ruleId":"582","severity":1,"message":"679","line":15,"column":8,"nodeType":"584","messageId":"585","endLine":15,"endColumn":17},{"ruleId":"582","severity":1,"message":"680","line":20,"column":3,"nodeType":"584","messageId":"585","endLine":20,"endColumn":30},{"ruleId":"582","severity":1,"message":"681","line":21,"column":3,"nodeType":"584","messageId":"585","endLine":21,"endColumn":22},{"ruleId":"582","severity":1,"message":"682","line":22,"column":3,"nodeType":"584","messageId":"585","endLine":22,"endColumn":22},{"ruleId":"582","severity":1,"message":"655","line":35,"column":10,"nodeType":"584","messageId":"585","endLine":35,"endColumn":17},{"ruleId":"582","severity":1,"message":"656","line":35,"column":19,"nodeType":"584","messageId":"585","endLine":35,"endColumn":29},{"ruleId":"683","severity":1,"message":"684","line":72,"column":58,"nodeType":"685","messageId":"686","endLine":72,"endColumn":60},{"ruleId":"574","severity":1,"message":"657","line":94,"column":6,"nodeType":"576","endLine":94,"endColumn":23,"suggestions":"687"},{"ruleId":"574","severity":1,"message":"688","line":128,"column":6,"nodeType":"576","endLine":128,"endColumn":23,"suggestions":"689"},{"ruleId":"574","severity":1,"message":"690","line":143,"column":6,"nodeType":"576","endLine":143,"endColumn":19,"suggestions":"691"},{"ruleId":"574","severity":1,"message":"575","line":147,"column":6,"nodeType":"576","endLine":147,"endColumn":23,"suggestions":"692"},{"ruleId":"582","severity":1,"message":"680","line":4,"column":39,"nodeType":"584","messageId":"585","endLine":4,"endColumn":66},{"ruleId":"582","severity":1,"message":"693","line":2,"column":22,"nodeType":"584","messageId":"585","endLine":2,"endColumn":31},{"ruleId":"582","severity":1,"message":"694","line":4,"column":10,"nodeType":"584","messageId":"585","endLine":4,"endColumn":20},{"ruleId":"582","severity":1,"message":"695","line":8,"column":11,"nodeType":"584","messageId":"585","endLine":8,"endColumn":22},{"ruleId":"582","severity":1,"message":"640","line":1,"column":10,"nodeType":"584","messageId":"585","endLine":1,"endColumn":26},{"ruleId":"582","severity":1,"message":"696","line":9,"column":3,"nodeType":"584","messageId":"585","endLine":9,"endColumn":22},{"ruleId":"582","severity":1,"message":"697","line":14,"column":7,"nodeType":"584","messageId":"585","endLine":14,"endColumn":21},{"ruleId":"582","severity":1,"message":"698","line":27,"column":23,"nodeType":"584","messageId":"585","endLine":27,"endColumn":37},{"ruleId":"582","severity":1,"message":"699","line":28,"column":7,"nodeType":"584","messageId":"585","endLine":28,"endColumn":14},{"ruleId":"582","severity":1,"message":"700","line":28,"column":16,"nodeType":"584","messageId":"585","endLine":28,"endColumn":29},{"ruleId":"582","severity":1,"message":"644","line":28,"column":31,"nodeType":"584","messageId":"585","endLine":28,"endColumn":42},{"ruleId":"578","replacedBy":"701"},{"ruleId":"580","replacedBy":"702"},{"ruleId":"582","severity":1,"message":"660","line":7,"column":3,"nodeType":"584","messageId":"585","endLine":7,"endColumn":12},{"ruleId":"582","severity":1,"message":"661","line":8,"column":3,"nodeType":"584","messageId":"585","endLine":8,"endColumn":8},{"ruleId":"582","severity":1,"message":"662","line":9,"column":3,"nodeType":"584","messageId":"585","endLine":9,"endColumn":8},{"ruleId":"582","severity":1,"message":"586","line":10,"column":3,"nodeType":"584","messageId":"585","endLine":10,"endColumn":8},{"ruleId":"582","severity":1,"message":"678","line":11,"column":3,"nodeType":"584","messageId":"585","endLine":11,"endColumn":14},{"ruleId":"582","severity":1,"message":"655","line":20,"column":10,"nodeType":"584","messageId":"585","endLine":20,"endColumn":17},{"ruleId":"582","severity":1,"message":"656","line":20,"column":19,"nodeType":"584","messageId":"585","endLine":20,"endColumn":29},{"ruleId":"582","severity":1,"message":"623","line":28,"column":9,"nodeType":"584","messageId":"585","endLine":28,"endColumn":27},{"ruleId":"574","severity":1,"message":"657","line":51,"column":6,"nodeType":"576","endLine":51,"endColumn":17,"suggestions":"703"},{"ruleId":"574","severity":1,"message":"575","line":55,"column":6,"nodeType":"576","endLine":55,"endColumn":17,"suggestions":"704"},{"ruleId":"582","severity":1,"message":"654","line":2,"column":31,"nodeType":"584","messageId":"585","endLine":2,"endColumn":37},{"ruleId":"582","severity":1,"message":"616","line":8,"column":11,"nodeType":"584","messageId":"585","endLine":8,"endColumn":20},{"ruleId":"582","severity":1,"message":"674","line":8,"column":35,"nodeType":"584","messageId":"585","endLine":8,"endColumn":48},{"ruleId":"582","severity":1,"message":"705","line":3,"column":10,"nodeType":"584","messageId":"585","endLine":3,"endColumn":26},{"ruleId":"582","severity":1,"message":"706","line":7,"column":22,"nodeType":"584","messageId":"585","endLine":7,"endColumn":34},{"ruleId":"582","severity":1,"message":"707","line":35,"column":10,"nodeType":"584","messageId":"585","endLine":35,"endColumn":17},{"ruleId":"582","severity":1,"message":"708","line":59,"column":5,"nodeType":"584","messageId":"585","endLine":59,"endColumn":12},{"ruleId":"582","severity":1,"message":"709","line":61,"column":5,"nodeType":"584","messageId":"585","endLine":61,"endColumn":10},{"ruleId":"582","severity":1,"message":"710","line":65,"column":5,"nodeType":"584","messageId":"585","endLine":65,"endColumn":18},{"ruleId":"582","severity":1,"message":"711","line":66,"column":5,"nodeType":"584","messageId":"585","endLine":66,"endColumn":10},{"ruleId":"582","severity":1,"message":"712","line":71,"column":9,"nodeType":"584","messageId":"585","endLine":71,"endColumn":13},{"ruleId":"578","replacedBy":"713"},{"ruleId":"580","replacedBy":"714"},{"ruleId":"582","severity":1,"message":"715","line":1,"column":40,"nodeType":"584","messageId":"585","endLine":1,"endColumn":50},{"ruleId":"582","severity":1,"message":"716","line":7,"column":24,"nodeType":"584","messageId":"585","endLine":7,"endColumn":29},{"ruleId":"574","severity":1,"message":"717","line":65,"column":6,"nodeType":"576","endLine":65,"endColumn":24,"suggestions":"718"},{"ruleId":"574","severity":1,"message":"717","line":72,"column":6,"nodeType":"576","endLine":72,"endColumn":26,"suggestions":"719"},{"ruleId":"582","severity":1,"message":"716","line":6,"column":24,"nodeType":"584","messageId":"585","endLine":6,"endColumn":29},{"ruleId":"574","severity":1,"message":"717","line":59,"column":6,"nodeType":"576","endLine":59,"endColumn":23,"suggestions":"720"},{"ruleId":"574","severity":1,"message":"717","line":65,"column":6,"nodeType":"576","endLine":65,"endColumn":25,"suggestions":"721"},{"ruleId":"582","severity":1,"message":"662","line":3,"column":8,"nodeType":"584","messageId":"585","endLine":3,"endColumn":13},{"ruleId":"582","severity":1,"message":"722","line":13,"column":3,"nodeType":"584","messageId":"585","endLine":13,"endColumn":12},{"ruleId":"582","severity":1,"message":"723","line":16,"column":8,"nodeType":"584","messageId":"585","endLine":16,"endColumn":20},{"ruleId":"582","severity":1,"message":"724","line":18,"column":3,"nodeType":"584","messageId":"585","endLine":18,"endColumn":21},{"ruleId":"582","severity":1,"message":"725","line":19,"column":3,"nodeType":"584","messageId":"585","endLine":19,"endColumn":26},{"ruleId":"582","severity":1,"message":"726","line":22,"column":8,"nodeType":"584","messageId":"585","endLine":22,"endColumn":13},{"ruleId":"582","severity":1,"message":"727","line":23,"column":8,"nodeType":"584","messageId":"585","endLine":23,"endColumn":18},{"ruleId":"582","severity":1,"message":"728","line":32,"column":10,"nodeType":"584","messageId":"585","endLine":32,"endColumn":23},{"ruleId":"582","severity":1,"message":"729","line":33,"column":8,"nodeType":"584","messageId":"585","endLine":33,"endColumn":18},{"ruleId":"582","severity":1,"message":"730","line":63,"column":25,"nodeType":"584","messageId":"585","endLine":63,"endColumn":31},{"ruleId":"582","severity":1,"message":"731","line":64,"column":9,"nodeType":"584","messageId":"585","endLine":64,"endColumn":25},{"ruleId":"582","severity":1,"message":"732","line":8,"column":3,"nodeType":"584","messageId":"585","endLine":8,"endColumn":11},{"ruleId":"582","severity":1,"message":"660","line":9,"column":3,"nodeType":"584","messageId":"585","endLine":9,"endColumn":12},{"ruleId":"582","severity":1,"message":"723","line":16,"column":8,"nodeType":"584","messageId":"585","endLine":16,"endColumn":20},{"ruleId":"582","severity":1,"message":"724","line":18,"column":3,"nodeType":"584","messageId":"585","endLine":18,"endColumn":21},{"ruleId":"582","severity":1,"message":"725","line":19,"column":3,"nodeType":"584","messageId":"585","endLine":19,"endColumn":26},{"ruleId":"582","severity":1,"message":"726","line":22,"column":8,"nodeType":"584","messageId":"585","endLine":22,"endColumn":13},{"ruleId":"582","severity":1,"message":"727","line":23,"column":8,"nodeType":"584","messageId":"585","endLine":23,"endColumn":18},{"ruleId":"582","severity":1,"message":"733","line":24,"column":8,"nodeType":"584","messageId":"585","endLine":24,"endColumn":24},{"ruleId":"582","severity":1,"message":"734","line":26,"column":8,"nodeType":"584","messageId":"585","endLine":26,"endColumn":17},{"ruleId":"582","severity":1,"message":"729","line":32,"column":8,"nodeType":"584","messageId":"585","endLine":32,"endColumn":18},{"ruleId":"582","severity":1,"message":"731","line":71,"column":9,"nodeType":"584","messageId":"585","endLine":71,"endColumn":25},{"ruleId":"582","severity":1,"message":"735","line":9,"column":8,"nodeType":"584","messageId":"585","endLine":9,"endColumn":17},{"ruleId":"582","severity":1,"message":"736","line":14,"column":18,"nodeType":"584","messageId":"585","endLine":14,"endColumn":24},{"ruleId":"582","severity":1,"message":"723","line":16,"column":8,"nodeType":"584","messageId":"585","endLine":16,"endColumn":20},{"ruleId":"582","severity":1,"message":"724","line":18,"column":3,"nodeType":"584","messageId":"585","endLine":18,"endColumn":21},{"ruleId":"582","severity":1,"message":"725","line":19,"column":3,"nodeType":"584","messageId":"585","endLine":19,"endColumn":26},{"ruleId":"582","severity":1,"message":"726","line":22,"column":8,"nodeType":"584","messageId":"585","endLine":22,"endColumn":13},{"ruleId":"582","severity":1,"message":"727","line":23,"column":8,"nodeType":"584","messageId":"585","endLine":23,"endColumn":18},{"ruleId":"582","severity":1,"message":"737","line":28,"column":10,"nodeType":"584","messageId":"585","endLine":28,"endColumn":27},{"ruleId":"582","severity":1,"message":"729","line":29,"column":8,"nodeType":"584","messageId":"585","endLine":29,"endColumn":18},{"ruleId":"582","severity":1,"message":"738","line":64,"column":7,"nodeType":"584","messageId":"585","endLine":64,"endColumn":11},{"ruleId":"683","severity":1,"message":"739","line":196,"column":38,"nodeType":"685","messageId":"740","endLine":196,"endColumn":40},{"ruleId":"582","severity":1,"message":"656","line":42,"column":19,"nodeType":"584","messageId":"585","endLine":42,"endColumn":29},{"ruleId":"582","severity":1,"message":"715","line":1,"column":40,"nodeType":"584","messageId":"585","endLine":1,"endColumn":50},{"ruleId":"582","severity":1,"message":"741","line":5,"column":25,"nodeType":"584","messageId":"585","endLine":5,"endColumn":41},{"ruleId":"582","severity":1,"message":"716","line":6,"column":24,"nodeType":"584","messageId":"585","endLine":6,"endColumn":29},{"ruleId":"582","severity":1,"message":"742","line":50,"column":9,"nodeType":"584","messageId":"585","endLine":50,"endColumn":21},{"ruleId":"574","severity":1,"message":"717","line":74,"column":6,"nodeType":"576","endLine":74,"endColumn":25,"suggestions":"743"},{"ruleId":"574","severity":1,"message":"717","line":81,"column":6,"nodeType":"576","endLine":81,"endColumn":27,"suggestions":"744"},{"ruleId":"582","severity":1,"message":"654","line":5,"column":3,"nodeType":"584","messageId":"585","endLine":5,"endColumn":9},{"ruleId":"582","severity":1,"message":"716","line":10,"column":3,"nodeType":"584","messageId":"585","endLine":10,"endColumn":8},{"ruleId":"582","severity":1,"message":"745","line":14,"column":3,"nodeType":"584","messageId":"585","endLine":14,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'save' and 'updateContext'. Either include them or remove the dependency array.","ArrayExpression",["746"],"no-native-reassign",["747"],"no-negated-in-lhs",["748"],"@typescript-eslint/no-unused-vars","'DropdownToggle' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'code' is assigned a value but never used.","'setCode' is assigned a value but never used.","'altCode' is assigned a value but never used.","'setAltCode' is assigned a value but never used.","'toggleDropDown' is assigned a value but never used.","'toggleAltDropDown' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'PersonalInfo.data.birthDate', 'PersonalInfo.data.email', 'PersonalInfo.data.ethnicity', 'PersonalInfo.data.gender', 'PersonalInfo.data.lastName', 'PersonalInfo.data.phone', and 'PersonalInfo.data.previousTests.length'. Either include them or remove the dependency array.",["749"],["750"],["747"],["748"],"'StepperInterface' is defined but never used.","'SteppReducer' is defined but never used.","'initialStepper' is defined but never used.","'SET_CURRENT_STEP' is defined but never used.","'useScrollTrigger' is defined but never used.","'Slide' is defined but never used.","'Agent' is defined but never used.","'Counter' is defined but never used.","'StepperDispatch' is assigned a value but never used.","'Card' is defined but never used.","'CardText' is defined but never used.","'CardTitle' is defined but never used.","'CardColumns' is defined but never used.","'Table' is defined but never used.","'ProfileMedicareDataInterface' is defined but never used.","'mResult' is assigned a value but never used.","'activeTab' is assigned a value but never used.","'registerFunction' is assigned a value but never used.","'Error' is assigned a value but never used.","'setError' is assigned a value but never used.","'setActiveTab' is assigned a value but never used.",["751"],["752"],"'showError' is assigned a value but never used.",["747"],["748"],"'ProfileInterface' is defined but never used.",["747"],["748"],["747"],["748"],["747"],["748"],["747"],["748"],"'compareAsc' is defined but never used.","'ProfileAddressDataInterface' is defined but never used.","'ProfileUserDataInterface' is defined but never used.",["747"],["748"],"'TabItemInterface' is defined but never used.","'useMemo' is defined but never used.","'nextTab' is assigned a value but never used.","'goToNextPanel' is assigned a value but never used.","'goToNextTab' is assigned a value but never used.","'setIsReviewingData' is assigned a value but never used.","'Breadcrumb' is defined but never used.","'BreadcrumbItem' is defined but never used.","'Collapse' is defined but never used.","'setTables' is assigned a value but never used.",["747"],["748"],["747"],["748"],"'Button' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'updateContext'. Either include it or remove the dependency array.",["753"],["754"],"'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.",["755"],["756"],"'Form' is defined but never used.",["747"],["748"],["747"],["748"],"'CardImgOverlay' is defined but never used.","'CardiacDataInterface' is defined but never used.",["757"],["758"],"'updateContext' is assigned a value but never used.",["759"],["760"],"'FormFeedback' is defined but never used.","'CustomInput' is defined but never used.","'InputMask' is defined but never used.","'FamilyMemberHeartConditions' is defined but never used.","'DiagnosedCancerList' is defined but never used.","'TreatmentCancerList' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["761"],"React Hook useCallback has missing dependencies: 'Diagnostic.data.cancerList', 'Diagnostic.error', and 'updateContext'. Either include them or remove the dependency array.",["762"],"React Hook useEffect has a missing dependency: 'Diagnostic.data.cancerList'. Either include it or remove the dependency array.",["763"],["764"],"'useEffect' is defined but never used.","'submitForm' is defined but never used.","'ContextData' is assigned a value but never used.","'UncontrolledPopover' is defined but never used.","'PopoverContent' is assigned a value but never used.","'setActivePanel' is assigned a value but never used.","'prevTab' is assigned a value but never used.","'backToPrevTab' is assigned a value but never used.",["747"],["748"],["765"],["766"],"'AppDataInterface' is defined but never used.","'createStyles' is defined but never used.","'FormRow' is defined but never used.","'checked' is assigned a value but never used.","'error' is assigned a value but never used.","'onRadioChange' is assigned a value but never used.","'radio' is assigned a value but never used.","'bull' is assigned a value but never used.",["747"],["748"],"'useReducer' is defined but never used.","'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'StepperDispatch'. Either include it or remove the dependency array.",["767"],["768"],["769"],["770"],"'TextField' is defined but never used.","'DateFnsUtils' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'EthnicityList' is defined but never used.","'InputPhone' is defined but never used.","'setErr' is assigned a value but never used.","'handleDateChange' is assigned a value but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'FormLabel' is defined but never used.","'TableHead' is defined but never used.","'Select' is defined but never used.","'AddressStatesList' is defined but never used.","'rows' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'CANCER_SET_ERROR' is defined but never used.","'handleChange' is assigned a value but never used.",["771"],["772"],"'Typography' is defined but never used.",{"desc":"773","fix":"774"},"no-global-assign","no-unsafe-negation",{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"777","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"784","fix":"792"},{"desc":"793","fix":"794"},{"desc":"795","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},{"desc":"784","fix":"803"},{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"812","fix":"813"},{"desc":"814","fix":"815"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},"Update the dependencies array to be: [Address.data, save, updateContext]",{"range":"820","text":"821"},"Update the dependencies array to be: [PersonalInfo.data.birthDate, PersonalInfo.data.email, PersonalInfo.data.ethnicity, PersonalInfo.data.firstName, PersonalInfo.data.gender, PersonalInfo.data.lastName, PersonalInfo.data.phone, PersonalInfo.data.previousTests.length, updateContext]",{"range":"822","text":"823"},"Update the dependencies array to be: [PersonalInfo.data, save, updateContext]",{"range":"824","text":"825"},{"range":"826","text":"825"},"Update the dependencies array to be: [PrimaryCare.data, save, updateContext]",{"range":"827","text":"828"},"Update the dependencies array to be: [Diagnostic.data.list.length, updateContext]",{"range":"829","text":"830"},"Update the dependencies array to be: [Diagnostic.data, save, updateContext]",{"range":"831","text":"832"},"Update the dependencies array to be: [BMI.data.value, updateContext]",{"range":"833","text":"834"},"Update the dependencies array to be: [BMI.data, save, updateContext]",{"range":"835","text":"836"},"Update the dependencies array to be: [Diagnostic.data.typeOfCardiac.length, updateContext]",{"range":"837","text":"838"},{"range":"839","text":"832"},"Update the dependencies array to be: [updateContext]",{"range":"840","text":"841"},"Update the dependencies array to be: [FamilyMember.data, save, updateContext]",{"range":"842","text":"843"},"Update the dependencies array to be: [Diagnostic.data.cancerList, Diagnostic.data.isDiagnosed, updateContext]",{"range":"844","text":"845"},"Update the dependencies array to be: [Diagnostic.data.cancerList, Diagnostic.error, currentStepItem.number, currentStepItem.radio, currentStepItem.secondLabel, currentStepItem.slug, updateContext]",{"range":"846","text":"847"},"Update the dependencies array to be: [Diagnostic.data.cancerList, currentStep]",{"range":"848","text":"849"},{"range":"850","text":"832"},"Update the dependencies array to be: [Info.data.name, Info.data.url, updateContext]",{"range":"851","text":"852"},"Update the dependencies array to be: [Info.data, save, updateContext]",{"range":"853","text":"854"},"Update the dependencies array to be: [AgentState.error, StepperDispatch]",{"range":"855","text":"856"},"Update the dependencies array to be: [AgentState.success, StepperDispatch]",{"range":"857","text":"858"},"Update the dependencies array to be: [StepperDispatch, UserState.error]",{"range":"859","text":"860"},"Update the dependencies array to be: [StepperDispatch, UserState.success]",{"range":"861","text":"862"},"Update the dependencies array to be: [CancerState.error, StepperDispatch]",{"range":"863","text":"864"},"Update the dependencies array to be: [CancerState.success, StepperDispatch]",{"range":"865","text":"866"},[2036,2050],"[Address.data, save, updateContext]",[3147,3191],"[PersonalInfo.data.birthDate, PersonalInfo.data.email, PersonalInfo.data.ethnicity, PersonalInfo.data.firstName, PersonalInfo.data.gender, PersonalInfo.data.lastName, PersonalInfo.data.phone, PersonalInfo.data.previousTests.length, updateContext]",[3253,3272],"[PersonalInfo.data, save, updateContext]",[2982,3001],[1472,1490],"[PrimaryCare.data, save, updateContext]",[1162,1179],"[Diagnostic.data.list.length, updateContext]",[1281,1298],"[Diagnostic.data, save, updateContext]",[1112,1122],"[BMI.data.value, updateContext]",[1224,1234],"[BMI.data, save, updateContext]",[1244,1261],"[Diagnostic.data.typeOfCardiac.length, updateContext]",[1363,1380],[852,871],"[updateContext]",[933,952],"[FamilyMember.data, save, updateContext]",[2826,2843],"[Diagnostic.data.cancerList, Diagnostic.data.isDiagnosed, updateContext]",[3986,4003],"[Diagnostic.data.cancerList, Diagnostic.error, currentStepItem.number, currentStepItem.radio, currentStepItem.secondLabel, currentStepItem.slug, updateContext]",[4348,4361],"[Diagnostic.data.cancerList, currentStep]",[4423,4440],[1106,1117],"[Info.data.name, Info.data.url, updateContext]",[1179,1190],"[Info.data, save, updateContext]",[1811,1829],"[AgentState.error, StepperDispatch]",[1984,2004],"[AgentState.success, StepperDispatch]",[1652,1669],"[StepperDispatch, UserState.error]",[1784,1803],"[StepperDispatch, UserState.success]",[1911,1930],"[CancerState.error, StepperDispatch]",[2086,2107],"[CancerState.success, StepperDispatch]"]