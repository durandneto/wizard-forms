[{"/private/var/www/oberholtzermedia-form/src/components/Profile/Address/index.tsx":"1","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/index.tsx":"2","/private/var/www/oberholtzermedia-form/src/App.tsx":"3","/private/var/www/oberholtzermedia-form/src/context/Profile.Contex.tsx":"4","/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/index.tsx":"5","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/index.tsx":"6","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/table.tsx":"7","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/table.tsx":"8","/private/var/www/oberholtzermedia-form/src/components/Profile/Address/table.tsx":"9","/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/table.tsx":"10","/private/var/www/oberholtzermedia-form/src/components/ProgressHeader.tsx":"11","/private/var/www/oberholtzermedia-form/src/context/App.Contex.tsx":"12","/private/var/www/oberholtzermedia-form/src/context/Tabs.Context.tsx":"13","/private/var/www/oberholtzermedia-form/src/actions/profile.ts":"14","/private/var/www/oberholtzermedia-form/src/index.tsx":"15","/private/var/www/oberholtzermedia-form/src/components/Progress.tsx":"16","/private/var/www/oberholtzermedia-form/src/components/Review/index.tsx":"17","/private/var/www/oberholtzermedia-form/src/reportWebVitals.ts":"18","/private/var/www/oberholtzermedia-form/src/components/Form/Item.tsx":"19","/private/var/www/oberholtzermedia-form/src/context/Diabetes.Contex.tsx":"20","/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/index.tsx":"21","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/index.tsx":"22","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/table.tsx":"23","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/index.tsx":"24","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/table.tsx":"25","/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/table.tsx":"26","/private/var/www/oberholtzermedia-form/src/components/Form/DiabetesFamilyMember.tsx":"27","/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/index.tsx":"28","/private/var/www/oberholtzermedia-form/src/components/Form/CardiacFamilyMember.tsx":"29","/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/table.tsx":"30","/private/var/www/oberholtzermedia-form/src/context/Cardiac.Contex.tsx":"31","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/index.tsx":"32","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/table.tsx":"33","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/index.tsx":"34","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/table.tsx":"35","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/table.tsx":"36","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/index.tsx":"37","/private/var/www/oberholtzermedia-form/src/context/Cancer.Contex.tsx":"38","/private/var/www/oberholtzermedia-form/src/components/Form/CancerFamilyMember.tsx":"39","/private/var/www/oberholtzermedia-form/src/utils/index.ts":"40","/private/var/www/oberholtzermedia-form/src/components/SubmitFormModal/index.tsx":"41","/private/var/www/oberholtzermedia-form/src/components/ProgressBottom.tsx":"42","/private/var/www/oberholtzermedia-form/src/context/Agent.Contex.tsx":"43","/private/var/www/oberholtzermedia-form/src/components/Agent/Info/table.tsx":"44","/private/var/www/oberholtzermedia-form/src/components/Agent/Info/index.tsx":"45","/private/var/www/oberholtzermedia-form/src/components/templates/index.tsx":"46","/private/var/www/oberholtzermedia-form/src/actions/medicare.ts":"47","/private/var/www/oberholtzermedia-form/src/context/Auth.Context.tsx":"48","/private/var/www/oberholtzermedia-form/src/components/Stepper/index.tsx":"49","/private/var/www/oberholtzermedia-form/src/components/Stepper/Card.tsx":"50","/private/var/www/oberholtzermedia-form/src/stories/Button.stories.tsx":"51","/private/var/www/oberholtzermedia-form/src/stories/Page.tsx":"52","/private/var/www/oberholtzermedia-form/src/stories/Button.tsx":"53","/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/Stepper.stories.tsx":"54","/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/index.tsx":"55","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Stepper.tsx":"56","/private/var/www/oberholtzermedia-form/src/v2/Reducer/App.tsx":"57","/private/var/www/oberholtzermedia-form/src/v2/components/Agent/index.tsx":"58","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Agent.tsx":"59"},{"size":6835,"mtime":1613598456793,"results":"60","hashOfConfig":"61"},{"size":17118,"mtime":1613613568801,"results":"62","hashOfConfig":"61"},{"size":3794,"mtime":1613754175788,"results":"63","hashOfConfig":"61"},{"size":3672,"mtime":1613603622030,"results":"64","hashOfConfig":"61"},{"size":5974,"mtime":1613596070952,"results":"65","hashOfConfig":"61"},{"size":3001,"mtime":1613597118746,"results":"66","hashOfConfig":"61"},{"size":703,"mtime":1613403705684,"results":"67","hashOfConfig":"61"},{"size":1312,"mtime":1613576467503,"results":"68","hashOfConfig":"61"},{"size":686,"mtime":1613403327887,"results":"69","hashOfConfig":"61"},{"size":630,"mtime":1613403306888,"results":"70","hashOfConfig":"61"},{"size":544,"mtime":1613143561414,"results":"71","hashOfConfig":"61"},{"size":89,"mtime":1612819422010,"results":"72","hashOfConfig":"61"},{"size":724,"mtime":1613488546809,"results":"73","hashOfConfig":"61"},{"size":1854,"mtime":1613595873270,"results":"74","hashOfConfig":"61"},{"size":500,"mtime":1612288231247,"results":"75","hashOfConfig":"61"},{"size":5463,"mtime":1613677972834,"results":"76","hashOfConfig":"61"},{"size":6960,"mtime":1613677981749,"results":"77","hashOfConfig":"61"},{"size":425,"mtime":1613576502476,"results":"78","hashOfConfig":"61"},{"size":710,"mtime":1613570208513,"results":"79","hashOfConfig":"61"},{"size":2776,"mtime":1613574064582,"results":"80","hashOfConfig":"61"},{"size":3768,"mtime":1613584816620,"results":"81","hashOfConfig":"61"},{"size":1923,"mtime":1613578955055,"results":"82","hashOfConfig":"61"},{"size":521,"mtime":1613403417425,"results":"83","hashOfConfig":"61"},{"size":2790,"mtime":1613578988850,"results":"84","hashOfConfig":"61"},{"size":1028,"mtime":1613403774860,"results":"85","hashOfConfig":"61"},{"size":757,"mtime":1613403391480,"results":"86","hashOfConfig":"61"},{"size":6071,"mtime":1613509366464,"results":"87","hashOfConfig":"61"},{"size":2792,"mtime":1613578939232,"results":"88","hashOfConfig":"61"},{"size":6488,"mtime":1613509400924,"results":"89","hashOfConfig":"61"},{"size":1047,"mtime":1613403435426,"results":"90","hashOfConfig":"61"},{"size":4113,"mtime":1613574054464,"results":"91","hashOfConfig":"61"},{"size":7366,"mtime":1613578921460,"results":"92","hashOfConfig":"61"},{"size":1038,"mtime":1613403449855,"results":"93","hashOfConfig":"61"},{"size":2990,"mtime":1613610369777,"results":"94","hashOfConfig":"61"},{"size":1027,"mtime":1613403481121,"results":"95","hashOfConfig":"61"},{"size":953,"mtime":1613403467909,"results":"96","hashOfConfig":"61"},{"size":13328,"mtime":1613688704837,"results":"97","hashOfConfig":"61"},{"size":8005,"mtime":1613688809996,"results":"98","hashOfConfig":"61"},{"size":6538,"mtime":1613509400924,"results":"99","hashOfConfig":"61"},{"size":494,"mtime":1613677416518,"results":"100","hashOfConfig":"61"},{"size":917,"mtime":1613576476343,"results":"101","hashOfConfig":"61"},{"size":1876,"mtime":1613145467747,"results":"102","hashOfConfig":"61"},{"size":715,"mtime":1613584955733,"results":"103","hashOfConfig":"61"},{"size":589,"mtime":1613403507544,"results":"104","hashOfConfig":"61"},{"size":2209,"mtime":1613593666534,"results":"105","hashOfConfig":"61"},{"size":1053,"mtime":1613596463312,"results":"106","hashOfConfig":"61"},{"size":6220,"mtime":1613596650804,"results":"107","hashOfConfig":"61"},{"size":982,"mtime":1613576453991,"results":"108","hashOfConfig":"61"},{"size":1433,"mtime":1613679183815,"results":"109","hashOfConfig":"61"},{"size":7267,"mtime":1613690758660,"results":"110","hashOfConfig":"61"},{"size":804,"mtime":1613741654448,"results":"111","hashOfConfig":"61"},{"size":2415,"mtime":1613741309402,"results":"112","hashOfConfig":"61"},{"size":941,"mtime":1613741309393,"results":"113","hashOfConfig":"61"},{"size":705,"mtime":1613748186703,"results":"114","hashOfConfig":"61"},{"size":2835,"mtime":1613750937497,"results":"115","hashOfConfig":"61"},{"size":764,"mtime":1613751013524,"results":"116","hashOfConfig":"61"},{"size":585,"mtime":1613749191644,"results":"117","hashOfConfig":"61"},{"size":2026,"mtime":1613754089528,"results":"118","hashOfConfig":"61"},{"size":1293,"mtime":1613754810924,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"123"},"1j9z5km",{"filePath":"124","messages":"125","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"127"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"140"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"140"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"127"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"156"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"156"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"123"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"127"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"156"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"140"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"156"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"140"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"127"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"140"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"127"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"123"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"156"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"140"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/private/var/www/oberholtzermedia-form/src/components/Profile/Address/index.tsx",["272"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n  FormFeedback,\n  CustomInput,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileAddressDataInterface } from \"../../../context/Profile.Contex\";\nimport { calculateError } from \"../../../utils\";\nimport TableInfo from \"./table\";\n\nlet states = [\n  \"AK\",\n  \"AL\",\n  \"AR\",\n  \"AS\",\n  \"AZ\",\n  \"CA\",\n  \"CO\",\n  \"CT\",\n  \"DC\",\n  \"DE\",\n  \"FL\",\n  \"GA\",\n  \"GU\",\n  \"HI\",\n  \"IA\",\n  \"ID\",\n  \"IL\",\n  \"IN\",\n  \"KS\",\n  \"KY\",\n  \"LA\",\n  \"MA\",\n  \"MD\",\n  \"ME\",\n  \"MI\",\n  \"MN\",\n  \"MO\",\n  \"MS\",\n  \"MT\",\n  \"NC\",\n  \"ND\",\n  \"NE\",\n  \"NH\",\n  \"NJ\",\n  \"NM\",\n  \"NV\",\n  \"NY\",\n  \"OH\",\n  \"OK\",\n  \"OR\",\n  \"PA\",\n  \"PR\",\n  \"RI\",\n  \"SC\",\n  \"SD\",\n  \"TN\",\n  \"TX\",\n  \"UT\",\n  \"VA\",\n  \"VI\",\n  \"VT\",\n  \"WA\",\n  \"WI\",\n  \"WV\",\n  \"WY\",\n];\nconst Address = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Profile, updateContext, validateAddress } = useContext(AppContext);\n  const {\n    tabs: { Address },\n  } = Profile;\n\n  const save = useCallback(() => {\n    const error: ProfileAddressDataInterface = {\n      streetLine: null,\n      streetLine2: null,\n      city: null,\n      state: null,\n      postalCode: null,\n    };\n\n    if (Address.data.streetLine === null || Address.data.streetLine === \"\") {\n      error.streetLine = \"Street line can not be empty.\";\n    }\n\n    if (Address.data.postalCode === null || Address.data.postalCode === \"\") {\n      error.postalCode = \"Postal Code can not be empty.\";\n    }\n\n    if (Address.data.city === null || Address.data.city === \"\") {\n      error.city = \"City can not be empty.\";\n    }\n\n    if (Address.data.state === null || Address.data.state === \"\") {\n      error.state = \"State can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Address.data, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [Address.data]);\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(Address.error);\n  }, [Address.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  console.log(\"Address\", { Address });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {showError && (\n            <Row>\n              <Col>\n                <Alert color=\"danger\">error</Alert>\n              </Col>\n            </Row>\n          )}\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"examplePassword\">Street Address</Label>\n                <Input\n                  invalid={Address.error?.streetLine}\n                  disabled={loading}\n                  value={Address.data.streetLine}\n                  onChange={(e) => {\n                    updateContext(\"streetLine\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.streetLine}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"address2\">Apartament/ Unit</Label>\n                <Input\n                  disabled={loading}\n                  value={Address.data.streetLine2}\n                  id=\"address2\"\n                  onChange={(e) => {\n                    updateContext(\"streetLine2\", e.target.value);\n                  }}\n                />\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"city\">City</Label>\n                <Input\n                  invalid={Address.error?.city}\n                  disabled={loading}\n                  value={Address.data.city}\n                  id=\"city\"\n                  onChange={(e) => {\n                    updateContext(\"city\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.city}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup>\n                <Label for=\"exampleCustomSelect\">Custom Select</Label>\n                <CustomInput\n                  type=\"select\"\n                  id=\"exampleCustomSelect\"\n                  name=\"customSelect\"\n                  disabled={loading}\n                  invalid={Address.error?.state}\n                  value={Address.data.state}\n                  onChange={(e: any) => {\n                    updateContext(\"state\", e.target.value);\n                  }}\n                >\n                  <option value=\"\">Select</option>\n                  {states.map((s: string) => (\n                    <option value={s} key={`state-${s}`}>\n                      {s}\n                    </option>\n                  ))}\n                </CustomInput>\n                <FormFeedback>{Address.error?.state}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"postalcode\">Zip code</Label>\n                <Input\n                  invalid={Address.error?.postalCode}\n                  disabled={loading}\n                  value={Address.data.postalCode}\n                  id=\"postalcode\"\n                  onChange={(e) => {\n                    updateContext(\"postalCode\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.postalCode}</FormFeedback>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={{ size: 12, offset: 0 }} sm={{ size: 4, offset: 8 }}>\n              <Button\n                color={loading ? \"\" : \"success\"}\n                onClick={() => {\n                  if (!loading) {\n                    setLoading(true);\n                    validateAddress(Address.data)\n                      .then((r: any) => {\n                        setLoading(false);\n                        updateContext(\"error\", null);\n                        updateContext(\"success\", true);\n                      })\n                      .catch((err: any) => {\n                        updateContext(\n                          \"error\",\n                          err.response.data.message.join(\", \")\n                        );\n                        updateContext(\"success\", false);\n                        setLoading(false);\n                      });\n                  }\n                }}\n              >\n                {loading ? `Validating ...` : `Validate Address`}\n              </Button>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Address;\n",["273","274"],"/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/index.tsx",["275","276","277","278","279","280","281","282","283","284","285","286"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  DropdownToggle,\n  Alert,\n  DropdownMenu,\n  DropdownItem,\n  FormFeedback,\n  InputGroup,\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  CustomInput,\n} from \"reactstrap\";\nimport TableInfo from \"./table\";\n\nimport InputMask from \"react-input-mask\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileUserDataInterface } from \"../../../context/Profile.Contex\";\nimport FormItem from \"../../Form/Item\";\nimport { calculateError } from \"../../../utils\";\n\nconst Ethnicity: Array<string> = [\n  \"Asian\",\n  \"African American\",\n  \"Ashkenzai Jewish\",\n  \"Caucasian\",\n  \"French Canadian\",\n  \"Hispanic\",\n  \"Indian\",\n  \"Middle Eastern\",\n  \"Native American\",\n  \"Pacific Islander\",\n  \"Other\",\n];\n\nconst PersonalInfo = (props: any) => {\n  const { Profile, updateContext, ContextData, setContextData } = useContext(\n    AppContext\n  );\n  const {\n    tabs: { PersonalInfo },\n  } = Profile;\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [dropdownAltOpen, setAltDropdownOpen] = useState(false);\n  const [code, setCode] = useState(PersonalInfo.data.altPhoneCode || \"Area\");\n  const [altCode, setAltCode] = useState(\n    PersonalInfo.data.altPhoneCode || \"Area\"\n  );\n\n  const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\n  const toggleAltDropDown = () => setAltDropdownOpen(!dropdownAltOpen);\n\n  const save = useCallback(() => {\n    const error: ProfileUserDataInterface = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      gender: null,\n      birthDate: null,\n      phone: null,\n      phoneCode: null,\n      altPhone: null,\n      altPhoneCode: null,\n      ethnicity: null,\n      salivaSwabTest: null,\n      isAlzheimerorDementiatype: null,\n      previousTests: null,\n      isNursingLiving: null,\n    };\n\n    if (\n      PersonalInfo.data.firstName === null ||\n      PersonalInfo.data.firstName === \"\"\n    ) {\n      error.firstName = \"First name can not be empty.\";\n    }\n\n    if (PersonalInfo.data.previousTests.length === 0) {\n      error.previousTests = \"Previous generic test can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.lastName === null ||\n      PersonalInfo.data.lastName === \"\"\n    ) {\n      error.lastName = \"Last name can not be empty.\";\n    }\n\n    if (PersonalInfo.data.gender === null || PersonalInfo.data.gender === \"\") {\n      error.gender = \"Gender can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.ethnicity === null ||\n      PersonalInfo.data.ethnicity === \"\"\n    ) {\n      error.ethnicity = \"Ethnicity can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.birthDate === null ||\n      PersonalInfo.data.birthDate === \"\"\n    ) {\n      error.birthDate = \"DOB can not be empty.\";\n    }\n\n    if (PersonalInfo.data.phone === null || PersonalInfo.data.phone === \"\") {\n      error.phone = \"Phone can not be empty.\";\n    }\n    if (PersonalInfo.data.email === null || PersonalInfo.data.email === \"\") {\n      error.email = \"E-mail can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [PersonalInfo.data.firstName, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [PersonalInfo.data]);\n\n  const showError: boolean = useMemo(() => {\n    console.log(PersonalInfo.error);\n    return calculateError(PersonalInfo.error);\n  }, [PersonalInfo.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  console.log({ showError });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"4\">\n              <FormItem\n                error={PersonalInfo.error?.firstName}\n                id=\"PersonalInfoFirstName\"\n                label=\"First name (*)\"\n                value={PersonalInfo.data.firstName}\n                onChange={(e: any) => {\n                  updateContext(\"firstName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormItem\n                id=\"PersonalInfoLastName\"\n                label=\"Last name (*)\"\n                value={PersonalInfo.data.lastName}\n                error={PersonalInfo.error?.lastName}\n                onChange={(e: any) => {\n                  updateContext(\"lastName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for=\"RadioMale\">Gender</Label>\n              <FormGroup>\n                <CustomInput\n                  invalid={PersonalInfo.error?.gender}\n                  onChange={(e) => {\n                    updateContext(\"gender\", e.target.value);\n                  }}\n                  bsSize=\"sm\"\n                  type=\"radio\"\n                  value=\"male\"\n                  checked={PersonalInfo.data.gender === \"male\"}\n                  name=\"gender\"\n                  id=\"RadioMale\"\n                  label=\"Male\"\n                  inline\n                />\n                <CustomInput\n                  onChange={(e) => {\n                    updateContext(\"gender\", e.target.value);\n                  }}\n                  invalid={PersonalInfo.error?.gender}\n                  bsSize=\"sm\"\n                  type=\"radio\"\n                  value=\"female\"\n                  checked={PersonalInfo.data.gender === \"female\"}\n                  name=\"gender\"\n                  id=\"RadioFemale\"\n                  label=\"Female\"\n                  inline\n                />\n                <FormFeedback>{PersonalInfo.error?.gender}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for={`form-input-id-phone`}>Phone</Label>\n              <InputGroup>\n                {/* <InputGroupButtonDropdown\n                  addonType=\"append\"\n                  isOpen={dropdownOpen}\n                  toggle={toggleDropDown}\n                >\n                  <DropdownToggle caret>{code}</DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem header>Area</DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setCode(\"+ 1\");\n                        updateContext(\"phoneCode\", \"+ 1\");\n                      }}\n                    >\n                      + 1\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setCode(\"+ 778\");\n                        updateContext(\"phoneCode\", \"+ 778\");\n                      }}\n                    >\n                      + 778\n                    </DropdownItem>\n                  </DropdownMenu>\n                </InputGroupButtonDropdown> */}\n                <Input\n                  type=\"tel\"\n                  mask=\"999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  value={PersonalInfo.data.phone}\n                  invalid={PersonalInfo.error?.phone}\n                  tag={InputMask}\n                  onChange={(e) => {\n                    updateContext(\"phone\", e.target.value);\n                  }}\n                />\n              </InputGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for={`form-input-id-phone`}>Alt. Phone</Label>\n              <InputGroup>\n                {/* <InputGroupButtonDropdown\n                  addonType=\"append\"\n                  isOpen={dropdownAltOpen}\n                  toggle={toggleAltDropDown}\n                >\n                  <DropdownToggle caret>{altCode}</DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem header>Area</DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setAltCode(\"+ 1\");\n                        updateContext(\"altPhoneCode\", \"+ 1\");\n                      }}\n                    >\n                      + 1\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setAltCode(\"+ 778\");\n                        updateContext(\"altPhoneCode\", \"+ 778\");\n                      }}\n                    >\n                      + 778\n                    </DropdownItem>\n                  </DropdownMenu>\n                </InputGroupButtonDropdown> */}\n                <Input\n                  type=\"tel\"\n                  mask=\"999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  tag={InputMask}\n                  value={PersonalInfo.data.altPhone}\n                  invalid={PersonalInfo.error?.altPhone}\n                  onChange={(e: any) => {\n                    updateContext(\"altPhone\", e.target.value);\n                  }}\n                />\n              </InputGroup>\n            </Col>\n            <Col xs=\"4\">\n              <FormItem\n                id=\"emailAddress\"\n                label=\"Email Address\"\n                value={PersonalInfo.data.email}\n                error={PersonalInfo.error?.email}\n                onChange={(e: any) => {\n                  updateContext(\"email\", e.target.value);\n                }}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col sx=\"12\" sm=\"4\">\n              <FormGroup>\n                <Label for=\"birthDate\">Birth Date</Label>\n                <Input\n                  bsSize=\"sm\"\n                  type=\"date\"\n                  name=\"date\"\n                  id=\"birthDate\"\n                  min=\"1920-01-01\"\n                  max=\"2000-01-01\"\n                  placeholder=\"Birth date\"\n                  value={PersonalInfo.data.birthDate}\n                  invalid={PersonalInfo.error?.birthDate}\n                  onChange={(e) => {\n                    updateContext(\"birthDate\", e.target.value);\n                  }}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <Label for=\"RadioEthnicity\">Ethnicity</Label>\n              <FormGroup>\n                {Ethnicity.map((et, key) => (\n                  <CustomInput\n                    onChange={(e) => updateContext(\"ethnicity\", e.target.value)}\n                    bsSize=\"sm\"\n                    type=\"radio\"\n                    value={et}\n                    invalid={PersonalInfo.error?.ethnicity}\n                    checked={PersonalInfo.data.ethnicity === et}\n                    name=\"RadioEthnicity\"\n                    id={`Ethnicity-id-${key}`}\n                    key={`Ethnicity-id-${key}`}\n                    label={et}\n                    inline\n                  />\n                ))}\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for={`typeOfNursinLiving`}>\n                  <b>\n                    Currenly living in a nursing home or assisted living\n                    facility?\n                  </b>\n                </Label>\n                <CustomInput\n                  value={PersonalInfo.data.isNursingLiving}\n                  onChange={(e: any) => {\n                    updateContext(\"isNursingLiving\", e.target.value);\n                  }}\n                  type=\"select\"\n                  id={`typeOfNursinLiving`}\n                >\n                  <option value=\"\">Select</option>\n                  <option value=\"Yes\">Yes</option>\n                  <option value=\"No\">No</option>\n                </CustomInput>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for={`AlzheimerorDementiatype`}>\n                  <b>Do you have Alzheimer's or Dementia?</b>\n                </Label>\n                <CustomInput\n                  value={PersonalInfo.data.isAlzheimerorDementiatype}\n                  onChange={(e: any) => {\n                    updateContext(\"isAlzheimerorDementiatype\", e.target.value);\n                  }}\n                  type=\"select\"\n                  id={`AlzheimerorDementiatype`}\n                >\n                  <option value=\"\">Select</option>\n                  <option value=\"Yes\">Yes</option>\n                  <option value=\"No\">No</option>\n                </CustomInput>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\">\n              <br />\n              <Label>\n                <b>Have you ever taken a Saliva Swab DNA test?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Yes\"\n                  checked={PersonalInfo.data.salivaSwabTest === \"Yes\"}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      updateContext(\"salivaSwabTest\", \"Yes\");\n                    } else {\n                      updateContext(\"salivaSwabTest\", \"No\");\n                    }\n                  }}\n                />\n                <Label check>Yes, I did.</Label>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\">\n              <br />\n              <Label for=\"RadioEthnicity\">\n                <b>Previous Generic Test </b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Cardiac\"\n                  checked={PersonalInfo.data.previousTests.includes(\"Cardiac\")}\n                  invalid={PersonalInfo.error?.previousTests}\n                  onChange={(e) => {\n                    ContextData.Cardiac.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Cardiac</Label>\n              </FormGroup>\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Diabetes\"\n                  invalid={PersonalInfo.error?.previousTests}\n                  checked={PersonalInfo.data.previousTests.includes(\"Diabetes\")}\n                  onChange={(e) => {\n                    ContextData.Diabetes.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Diabetes</Label>\n              </FormGroup>\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Cancer\"\n                  checked={PersonalInfo.data.previousTests.includes(\"Cancer\")}\n                  invalid={PersonalInfo.error?.previousTests}\n                  onChange={(e) => {\n                    ContextData.Cancer.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Cancer</Label>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default PersonalInfo;\n",["287","288"],"/private/var/www/oberholtzermedia-form/src/App.tsx",["289","290"],"import React, { useReducer } from \"react\";\nimport reducer, { AppInterface, init } from \"./v2/Reducer/App\";\nimport { StepperInterface } from \"./v2/components/common/Stepper\";\nimport SteppReducer, {\n  initialStepper,\n  SET_CURRENT_STEP,\n} from \"./v2/Reducer/Stepper\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Agent from \"./v2/components/Agent\";\nimport MainStepper from \"./v2/components/common/Stepper\";\n\ninterface Props {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window?: () => Window;\n  children?: React.ReactElement;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    Container: {\n      backgroundColor: \"#fff\",\n    },\n    AppBar: {\n      backgroundColor: \"#39394d\",\n      color: \"#fff\",\n      height: \"40px\",\n      padding: \"0 24px\",\n      top: 0,\n      margin: 0,\n      alignItems: \"center\",\n      position: \"fixed\",\n      width: \"100%\",\n    },\n    AppHeader: {\n      color: \"#232333\",\n      height: \"64px\",\n      marginTop: \"40px\",\n      padding: \"0 24px\",\n      alignItems: \"center\",\n      border: \"solid 1px #e7e7e7\",\n      backgroundColor: \"#fff\",\n    },\n  })\n);\n\nfunction Counter({ count }: AppInterface) {\n  const [state, dispatch] = useReducer(reducer, { count }, init);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: \"reset\", payload: { count } })}>\n        Reset\n      </button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n    </>\n  );\n}\n\nconst MainSteps2 = [\n  {\n    label: \"Agent\",\n    slug: \"Agent\",\n    children: <Agent />,\n    error: false,\n    success: false,\n    completed: false,\n  },\n  {\n    label: \"Profile\",\n    slug: \"Profile\",\n    children: <Agent />,\n    error: false,\n    success: false,\n    completed: false,\n  },\n  {\n    label: \"Cancer\",\n    slug: \"Cancer\",\n    children: <Counter count={10} />,\n    error: false,\n    success: false,\n    completed: false,\n  },\n  {\n    label: \"Cardiac\",\n    slug: \"Cardiac\",\n    children: <Counter count={10} />,\n    error: false,\n    success: false,\n    completed: false,\n  },\n  {\n    label: \"Diabetes\",\n    slug: \"Diabetes\",\n    children: <Counter count={10} />,\n    error: false,\n    success: false,\n    completed: false,\n  },\n];\nconst stepControl: StepperInterface = {\n  activeStep: 0,\n  control: false,\n  steps: MainSteps2,\n};\nexport default function App(props: Props) {\n  const classes = useStyles();\n  const [MainSteps, dispatch] = useReducer(\n    SteppReducer,\n    stepControl,\n    initialStepper\n  );\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Box className={classes.AppBar} my={2} display=\"flex\">\n        <div>Fixed bar</div>\n      </Box>\n      <Box className={classes.AppHeader} my={2} display=\"flex\">\n        <div>Header</div>\n      </Box>\n      <Container className={classes.Container}>\n        <Box my={2}>\n          <MainStepper\n            steps={MainSteps.steps}\n            activeStep={MainSteps.activeStep}\n            control={MainSteps.control}\n            onNext={(nextStep) => {\n              dispatch({ type: SET_CURRENT_STEP, step: nextStep });\n            }}\n            onPrevious={(previoustStep) => {\n              dispatch({ type: SET_CURRENT_STEP, step: previoustStep });\n            }}\n            onFinished={() => {\n              alert(\"finished\");\n            }}\n          />\n        </Box>\n      </Container>\n    </React.Fragment>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/context/Profile.Contex.tsx",[],["291","292"],"/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/index.tsx",["293","294","295","296","297","298","299","300","301","302","303","304","305"],"import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  InputGroupAddon,\n  Button,\n  Form,\n  Col,\n  Row,\n  Alert,\n  Container,\n  Card,\n  CardText,\n  CardTitle,\n  CardColumns,\n  Table,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\n\nimport TableInfo from \"./table\";\nimport FormItem from \"../../Form/Item\";\nimport { ProfileMedicareDataInterface } from \"../../../context/Profile.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst MedicareID = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [mResult, setResult] = useState({});\n\n  const {\n    activeTab,\n    Profile,\n    checkMedicare,\n    registerFunction,\n    updateContext,\n    Error,\n    setError,\n    setActiveTab,\n  } = useContext(AppContext);\n  const {\n    tabs: { Medicare },\n  } = Profile;\n  const {\n    tabs: { PersonalInfo },\n  } = Profile;\n  // const [internalError, setInternalError]  = useState<string | null>(null)\n\n  const save = useCallback(() => {\n    if (Medicare.data.memberID === \"\" || Medicare.data.memberID === null) {\n      updateContext(\"error\", \"Medicare ID can not be empty.\");\n    } else {\n      setLoading(true);\n      checkMedicare(PersonalInfo.data, Medicare.data)\n        .then((r: any) => {\n          let message = \"\";\n          let error = false;\n\n          if (true) {\n            updateContext(\"success\", true);\n            updateContext(\"error\", null);\n          } else {\n            if (r.PayerName === \"Medicare Part A and B\") {\n              message += r.PayerName;\n              error = true;\n            }\n\n            if (r.HBPC_Deductible_OOP_Summary) {\n              message += \", Patient has aditional Payers\";\n              error = true;\n            }\n\n            if (r.DisclaimerMessage) {\n              message += `<br />${r.DisclaimerMessage}`;\n              error = true;\n            }\n\n            if (r.EDIErrorMessage) {\n              updateContext(\"error\", r.EDIErrorMessage);\n              updateContext(\"success\", null);\n              updateContext(\"extendedMedicareLeadData\", null);\n            } else if (error) {\n              updateContext(\"error\", message);\n              updateContext(\"success\", false);\n              updateContext(\"extendedMedicareLeadData\", null);\n            } else {\n              updateContext(\"error\", null);\n              updateContext(\"success\", r.AddtionalInfo);\n              updateContext(\"extendedMedicareLeadData\", r);\n            }\n            setResult(r);\n          }\n\n          setLoading(false);\n        })\n        .catch((err: any) => {\n          updateContext(\"success\", false);\n          updateContext(\"error\", err.response.data.message);\n          updateContext(\"extendedMedicareLeadData\", {});\n          setResult({});\n          setLoading(false);\n        });\n    }\n  }, [Medicare.data, PersonalInfo.data, checkMedicare, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [PersonalInfo.data]);\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(Medicare.error);\n  }, [Medicare.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  console.log(Medicare.error);\n  return (\n    <div className=\"col-xs-12\">\n      <Container>\n        {(showError || Medicare.success) && !loading && (\n          <Row>\n            <Col>\n              {Medicare.error && (\n                <Alert color=\"danger\">\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: JSON.stringify(Medicare.error),\n                    }}\n                  ></div>\n                </Alert>\n              )}\n              {Medicare.success && (\n                <Alert color=\"success\">\n                  <div\n                    dangerouslySetInnerHTML={{ __html: Medicare.success }}\n                  ></div>\n                </Alert>\n              )}\n            </Col>\n          </Row>\n        )}\n        <Row>\n          <Col xs=\"12\">\n            <Form>\n              <FormItem\n                label=\"Medicare ID\"\n                // error={Medicare.error}\n                onChange={(e: any) => {\n                  updateContext(\"memberID\", e.target.value);\n                }}\n                placeholder=\"Medicare ID\"\n                id=\"memberID\"\n                value={Medicare.data.memberID}\n                disabled={loading}\n                appendAddon={() => (\n                  <InputGroupAddon addonType=\"append\">\n                    <Button\n                      color={loading ? `` : `secondary`}\n                      onClick={() => {\n                        if (!loading) {\n                          save();\n                        }\n                      }}\n                    >\n                      {loading ? `Checking ...` : `Check Elgibility`}\n                    </Button>\n                  </InputGroupAddon>\n                )}\n              />\n            </Form>\n          </Col>\n        </Row>\n        {/* {mResult && (\n          <Row>\n            <Col>\n              <CardColumns>\n                <Card body inverse>\n                  <CardTitle tag=\"h5\">Result</CardTitle>\n                  <CardText>\n                    <Table borderless>\n                      <tbody>\n                        <tr>\n                          <th scope=\"row\">Status</th>\n                          <td>{mResult.status}</td>\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">2</th>\n                          <td>Jacob</td>\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">3</th>\n                          <td>Larry</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  </CardText>\n                </Card>\n              </CardColumns>\n            </Col>\n          </Row>\n        )} */}\n      </Container>\n    </div>\n  );\n};\n\nexport default MedicareID;\n","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/index.tsx",["306","307","308","309","310","311"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  InputGroup,\n  Container,\n  Alert,\n  Row,\n  Col,\n  Form,\n  FormFeedback,\n  Label,\n  Input,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport InputMask from \"react-input-mask\";\nimport TableInfo from \"./table\";\nimport FormItem from \"../../Form/Item\";\nimport { ProfilePrimaryCareDataInterface } from \"../../../context/Profile.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst PhysicianInformation = (props: any) => {\n  const { Profile, updateContext } = useContext(AppContext);\n  const {\n    tabs: { PrimaryCare },\n  } = Profile;\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [code, setCode] = useState(PrimaryCare.data.code || \"Area\");\n\n  const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\n\n  const save = useCallback(() => {\n    const error: ProfilePrimaryCareDataInterface = {\n      fullName: null,\n      phone: null,\n    };\n\n    if (\n      PrimaryCare.data.fullName === null ||\n      PrimaryCare.data.fullName === \"\"\n    ) {\n      error.fullName = \"Name can not be empty.\";\n    }\n\n    if (PrimaryCare.data.phone === null || PrimaryCare.data.phone === \"\") {\n      error.phone = \"Name can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [PrimaryCare.data, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [PrimaryCare.data]);\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(PrimaryCare.error);\n  }, [PrimaryCare.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                label=\"Doctor name\"\n                id={`DoctorFullname`}\n                placeholder={\"Doctor Full name\"}\n                value={PrimaryCare.data.fullName}\n                error={PrimaryCare.error?.fullName}\n                onChange={(e: any) => {\n                  updateContext(\"fullName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <Label for={`form-input-id-phone`}>Phone</Label>\n              <InputGroup>\n                <Input\n                  type=\"tel\"\n                  mask=\"99999999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  value={PrimaryCare.data.phone}\n                  invalid={PrimaryCare.error?.phone}\n                  tag={InputMask}\n                  onChange={(e) => {\n                    updateContext(\"phone\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{PrimaryCare.error?.phone}</FormFeedback>\n              </InputGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default PhysicianInformation;\n",["312","313"],"/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/table.tsx",["314"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst PrimaryCareTable = (props: any) => {\n  const { Profile }  = useContext(AppContext)\n  const { tabs: { PrimaryCare: {data: PrimaryCare} } } = Profile\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Doctor fullname</th>\n          <th>Phone</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{PrimaryCare.fullName}</td>\n          <td>{PrimaryCare.phone}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default PrimaryCareTable;","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/table.tsx",["315"],"import { useContext } from \"react\";\nimport { Table } from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileInterface } from \"../../../context/Profile.Contex\";\n\nconst ProfileTable = (props: any) => {\n  const { Profile } = useContext(AppContext);\n  const {\n    tabs: {\n      PersonalInfo: { data: PersonalInfo },\n    },\n  } = Profile;\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Gender</th>\n          <th>Phone</th>\n          <th>Alt. Phone</th>\n          <th>Email Address</th>\n          <th>Birth Date</th>\n          <th>Ethnicity</th>\n          <th>Previous Tests only</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{PersonalInfo.firstName}</td>\n          <td>{PersonalInfo.lastName}</td>\n          <td>{PersonalInfo.gender}</td>\n          <td>{`${PersonalInfo.phoneCode} ${PersonalInfo.phone}`}</td>\n          <td>{`${PersonalInfo.altPhoneCode} ${PersonalInfo.altPhone}`}</td>\n          <td>{PersonalInfo.email}</td>\n          <td>{PersonalInfo.birthDate}</td>\n          <td>{PersonalInfo.ethnicity}</td>\n          <td>{PersonalInfo.previousTests.join(\",\")}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n};\n\nexport default ProfileTable;\n","/private/var/www/oberholtzermedia-form/src/components/Profile/Address/table.tsx",["316"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Profile }  = useContext(AppContext)\n  const { tabs: { Address : { data: Address} } } = Profile\n  \n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Full Address</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{`${Address.streetLine}, ${Address.city} - ${Address.state} ${Address.postalCode}`}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/table.tsx",["317"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst MedicareTable = (props: any) => {\n\n  const { Profile }  = useContext(AppContext)\n  const { tabs: { Medicare : { data: Medicare} } } = Profile\n\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Medicare memberID</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Medicare.memberID}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default MedicareTable;",["318","319"],"/private/var/www/oberholtzermedia-form/src/components/ProgressHeader.tsx",[],["320","321"],"/private/var/www/oberholtzermedia-form/src/context/App.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/context/Tabs.Context.tsx",[],"/private/var/www/oberholtzermedia-form/src/actions/profile.ts",[],"/private/var/www/oberholtzermedia-form/src/index.tsx",[],["322","323"],"/private/var/www/oberholtzermedia-form/src/components/Progress.tsx",["324","325","326","327","328","329"],"/private/var/www/oberholtzermedia-form/src/components/Review/index.tsx",["330","331","332","333"],"/private/var/www/oberholtzermedia-form/src/reportWebVitals.ts",[],["334","335"],"/private/var/www/oberholtzermedia-form/src/components/Form/Item.tsx",[],"/private/var/www/oberholtzermedia-form/src/context/Diabetes.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/index.tsx",["336","337","338","339","340","341"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  CustomInput,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport {\n  DiabetesDiagnostic,\n  DiabetesDiagnosticDataInterface,\n} from \"../../../context/Diabetes.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst Diagnostic = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { Diagnostic },\n  } = Diabetes;\n\n  const save = useCallback(() => {\n    const error: DiabetesDiagnosticDataInterface = {\n      BMI: {\n        value: null,\n      },\n      Diagnostic: {\n        list: null,\n        isRCEDiabetesTransfer: null,\n      },\n      FamilyMemberList: { list: null },\n    };\n\n    if (Diagnostic.data.list.length === 0) {\n      error.Diagnostic.list = \"Diagnostic list can not be empty.\";\n    }\n\n    updateContext(\"error\", error.Diagnostic);\n    updateContext(\"success\", !calculateError(error.Diagnostic));\n  }, [Diagnostic.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [Diagnostic.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <Label>\n                <b>Have you been diagnosed with any of the following?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <p> (check all that apply)</p>\n            </Col>\n            <Col xs=\"12\">\n              {DiabetesDiagnostic.map((diagnostic: string) => (\n                <FormGroup check inline>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      value={diagnostic}\n                      checked={Diagnostic.data.list.includes(diagnostic)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          updateContext(\"list\", [\n                            ...Diagnostic.data.list,\n                            e.target.value,\n                          ]);\n                        } else {\n                          const index = Diagnostic.data.list.findIndex(\n                            (i: string) => i === e.target.value\n                          );\n                          const newPreviousTests = Diagnostic.data.list;\n                          newPreviousTests.splice(index, 1);\n                          updateContext(\"list\", newPreviousTests);\n                        }\n                      }}\n                    />{\" \"}\n                    {diagnostic}\n                  </Label>\n                </FormGroup>\n              ))}\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <br />\n              <FormGroup>\n                <Label for=\"isRCEDiabetesTransferCheckbox\">\n                  <b>Check here if doing a RCE Diabetes transfer</b>\n                </Label>\n                <div>\n                  <CustomInput\n                    onClick={(e: any) => {\n                      updateContext(\"isRCEDiabetesTransfer\", e.target.checked);\n                    }}\n                    checked={Diagnostic.data.isRCEDiabetesTransfer}\n                    type=\"checkbox\"\n                    id=\"isRCEDiabetesTransferCheckbox\"\n                    label=\"Yes, I'm.\"\n                  />\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Diagnostic;\n",["342","343"],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/index.tsx",["344","345","346","347","348","349","350","351"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport FormItem from \"../../Form/Item\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport { DiabetesDiagnosticDataInterface } from \"../../../context/Diabetes.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst BMIComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { BMI },\n  } = Diabetes;\n\n  const save = useCallback(() => {\n    const error: DiabetesDiagnosticDataInterface = {\n      BMI: {\n        value: null,\n      },\n      Diagnostic: {\n        list: null,\n        isRCEDiabetesTransfer: null,\n      },\n      FamilyMemberList: { list: null },\n    };\n\n    if (BMI.data.value === \"\") {\n      error.BMI.value = \"BMI can not be empty.\";\n    }\n\n    updateContext(\"error\", error.BMI);\n    updateContext(\"success\", !calculateError(error.BMI));\n  }, [BMI.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [BMI.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  console.log({ BMI });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <FormItem\n                label=\"BMI\"\n                error={BMI.error?.value}\n                onChange={(e: any) => {\n                  updateContext(\"value\", e.target.value);\n                }}\n                placeholder=\"BMI\"\n                id=\"BMI\"\n                value={BMI.data.value}\n                disabled={loading}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default BMIComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/index.tsx",["352","353","354","355","356"],"import { useContext, useState } from \"react\";\nimport DiabetesFamilyMemberForm from \"../../Form/DiabetesFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  DiabetesFamilyMemberInterface,\n} from \"../../../context/Diabetes.Contex\";\n\nimport { guidGenerator } from \"../../../utils\";\n\nconst DiabetesFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Diabetes;\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: DiabetesFamilyMemberInterface, index: number) => (\n                <Row key={`FamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <DiabetesFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`FamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: DiabetesFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default DiabetesFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/table.tsx",["357"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Diabetes }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic} } } = Diabetes\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>List of diagnostics</th>\n          <th>Is RCE Diabetes transfer</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.list.join(\", \")}.</td>\n          <td>{Diagnostic.isRCEDiabetesTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Form/DiabetesFamilyMember.tsx",["358"],"import FormItem from  \"./Item\"\nimport { Container, Row, Col, Form, FormGroup, Label, Input,\n    Alert, Button, Card, CustomInput } from 'reactstrap';\nimport { DiabetesFamilyMemberInterface } from \"../../context/Diabetes.Contex\";\nimport { useState } from \"react\";\n\ninterface FormDiabetesFamilyMemberInterface {\n  success: boolean;\n  error: string;\n  onSave: (fm: DiabetesFamilyMemberInterface) => void;\n  onRemove: () => void;\n  id: string;\n  loading: boolean;\n  disabled: boolean;\n  model: DiabetesFamilyMemberInterface;\n  index: number;\n}\n\nconst Relationship = [{value: \"MOM\", label:\"Mom\"},\n{value: \"DAD\", label:\"Dad\"},\n{value: \"BROTHER\", label:\"Brother\"},\n{value: \"SISTER\", label:\"Sister\"},\n{value: \"GRANDMOTHER\", label:\"Grandmother\"},\n{value: \"GRANDFATHER\", label:\"Grandfather\"},\n{value: \"COUSIN\", label:\"Cousin\"},\n{value: \"AUNT\", label:\"Aunt\"},\n{value: \"UNCLE\", label:\"Uncle\"},\n{value: \"GREATGRANDMOTHER\", label:\"Great Grandmother\"},\n{value: \"GREATGRANDFATHER\", label:\"Great Grandfather\"},\n{value: \"SON\", label:\"Son\"},\n{value: \"DAUGHTER\", label:\"Daughter\"},\n{value: \"NIECE\", label:\"Niece\"},\n{value: \"NEWPHEW\", label:\"Nephew\"},\n{value: \"HALF-SISTER\", label:\"Half-sister\"},\n{value: \"HALF-BROTHER\", label:\"Half-brother\"}]\n\nconst DiabetesFamilyMemberForm = ({model, success, error, onSave, id, loading, disabled, index, onRemove }: FormDiabetesFamilyMemberInterface) => {\n  const [fData, onChange] = useState(model);\n  \n  return (\n  <div className=\"col-xs-12\" style={{marginBottom: \"20px\"}}>\n    <Card style={{padding: \"15px\"}}>\n    <Container >\n      <Row>\n        <Col xs=\"11\">\n        <h4 style={{color: \"#007bff\"}}>Family Member {index + 1}</h4>\n        </Col>\n        <Col xs=\"1\">\n          <Button outline color=\"secondary\"\n            onClick={onRemove}\n          >X</Button>\n        </Col>\n      </Row>\n        {\n          error && (\n            <Row>\n                <Col>\n                    <Alert color=\"danger\">\n                        {error}\n                    </Alert>\n                </Col>\n            </Row>\n          )\n        }\n      <Row>\n        <Col xs=\"12\" sm=\"4\">\n            <FormItem id={`userFirstNameFormFamilyMember-${id}`} label=\"First name (*)\" value={fData.firstName}\n            onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                firstName: e.target.value\n              })\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"4\">\n            <FormItem id={`userLastNameFormFamilyMember-${id}`} label=\"Last name (*)\"  value={fData.lastName} onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                lastName: e.target.value\n              })\n\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"4\">\n            <Label for={`genderFormFamilyMember-${id}-male`}>Gender</Label>\n            <FormGroup>\n              <CustomInput  onChange={e => {\n                onChange({\n                ...fData,\n                gender: e.target.value\n              })\n                }}\n                bsSize=\"sm\" type=\"radio\" value=\"male\" checked={fData.gender === \"male\"} name={`genderFormFamilyMember-${id}`} id={`genderFormFamilyMember-${id}-male`} label=\"Male\"  inline/>\n                <CustomInput  onChange={e => {\n                  onChange({\n                ...fData,\n                gender: e.target.value\n              })\n                }}\n                bsSize=\"sm\" type=\"radio\" value=\"female\" checked={fData.gender === \"female\"}  name={`genderFormFamilyMember-${id}`} id={`genderFormFamilyMember-${id}-female`} label=\"Female\"  inline/>\n            </FormGroup>\n          </Col>\n      </Row>\n      <Row>\n        <Col xs=\"12\" sm=\"6\" >\n          <FormGroup>\n            <Label for=\"birthDate\">Birth Date</Label>\n            <Input\n              bsSize=\"sm\"\n              type=\"date\"\n              name=\"date\"\n              id=\"birthDate\"\n              placeholder=\"Birth date\"\n              value={fData.birthDate}\n              onChange={e => {\n                onChange({\n                  ...fData,\n                  birthDate: e.target.value\n                })\n              }}\n              \n            />\n          </FormGroup>\n        </Col>\n        <Col xs=\"12\" sm=\"6\">\n          <FormGroup>\n            <Label for={`RelationshipFormFamilyMember`}>Relationship to patient</Label>\n            <CustomInput\n            value={fData.relationship || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                relationship: e.target.value\n              })\n            }}\n             type=\"select\" id={`RelationshipFormFamilyMember`} name=\"family_member_one_cancer\">\n              <option value=\"\">Select</option>\n              {\n                Relationship.map((s) => (\n                  <option key={`relationship-diabetes-${s.value}`}  value={s.value} >{s.label}</option>\n                ))\n              }\n            </CustomInput>\n          </FormGroup>\n        </Col>\n          <Col xs=\"12\" sm=\"6\">\n            <FormItem id={`DiagnosisOrSymptomFormFamilyMember-${id}`} label=\"Diagnosis or Symptoms (*)\" value={fData.diagnosisOrSymptoms} onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                diagnosisOrSymptoms: e.target.value\n              })\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"6\">\n            <FormItem \n              id={`AgeOfOnsetFormFamilyMember-${id}`}\n              label=\"Age of onset (*)\" value={fData.ageOfOnset}\n              onChange={(e: any)=>{\n                onChange({\n                  ...fData,\n                  ageOfOnset: e.target.value\n                })\n              }}/>\n          </Col>\n      </Row>\n      <Row>\n        <Col sm={{ size: '2', offset: 10 }}>\n          <Button color=\"success\" onClick={() => {\n            onSave(fData)\n          }}>Save</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {\n            fData !== model && <span>Unsaved data</span>\n          }\n        </Col>\n      </Row>\n    </Container>\n  </Card>\n</div>\n  )}\n\n  export default DiabetesFamilyMemberForm","/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/index.tsx",["359","360","361","362","363"],"import { useContext, useState } from \"react\";\nimport CardiacFamilyMemberForm from \"../../Form/CardiacFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  CardiacFamilyMemberInterface,\n} from \"../../../context/Cardiac.Contex\";\nimport { guidGenerator } from \"../../../utils\";\n\nconst CardiacFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Cardiac, updateContext } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Cardiac;\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: CardiacFamilyMemberInterface, index: number) => (\n                <Row key={`CardiacFamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <CardiacFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`CardiacFamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: CardiacFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default CardiacFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Form/CardiacFamilyMember.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/context/Cardiac.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/index.tsx",["364","365","366","367","368","369","370"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  CustomInput,\n  CardImgOverlay,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport {\n  CardiacDataInterface,\n  CardiacDiagnosticInterface,\n  FamilyMemberHeartConditions,\n} from \"../../../context/Cardiac.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst Diagnostic = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const { Cardiac, updateContext } = useContext(AppContext);\n  const {\n    tabs: { Diagnostic },\n  } = Cardiac;\n\n  const save = useCallback(() => {\n    const error: CardiacDiagnosticInterface = {\n      typeOfCardiac: null,\n      age: null,\n      prescribedMedications: null,\n      heartMedicationList: null,\n      OTC: null,\n      diabetesType: null,\n      hasDiabetes: null,\n      isRCECardioTransfer: null,\n      otherDiagnosis: null,\n    };\n    if (Diagnostic.data.typeOfCardiac.length === 0) {\n      error.typeOfCardiac = \"Indicated test can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Diagnostic.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [Diagnostic.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <Label>\n                <b>Have you been diagnosed with any of the following?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <p> (check all that apply)</p>\n            </Col>\n            <Col xs=\"12\">\n              {FamilyMemberHeartConditions.map((condition: any) => (\n                <FormGroup\n                  check\n                  inline\n                  key={`Cardiac-FamilyMemberHeartConditions-condition-${condition.value}`}\n                >\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      value={condition.value}\n                      checked={Diagnostic.data.typeOfCardiac.includes(\n                        condition.value\n                      )}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          updateContext(\"typeOfCardiac\", [\n                            ...Diagnostic.data.typeOfCardiac,\n                            e.target.value,\n                          ]);\n                        } else {\n                          const index = Diagnostic.data.typeOfCardiac.findIndex(\n                            (i: string) => i === e.target.value\n                          );\n                          const newPreviousTests =\n                            Diagnostic.data.typeOfCardiac;\n                          newPreviousTests.splice(index, 1);\n                          updateContext(\"typeOfCardiac\", newPreviousTests);\n                        }\n                      }}\n                    />{\" \"}\n                    {condition.label}\n                  </Label>\n                </FormGroup>\n              ))}\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-prescrebied-medication-1\">\n                  <b>\n                    Have you ever been prescribed medications for you heart like\n                    Nitrates, Renexa or Nitrostat or any other drugs for High\n                    Blood Pressure or High Cholesterol?\n                  </b>\n                </Label>\n                <div>\n                  {[\"Yes\", \"No\"].map((type: string, index: number) => (\n                    <CustomInput\n                      inline\n                      value={type}\n                      checked={Diagnostic.data.prescribedMedications === type}\n                      onClick={(e: any) => {\n                        updateContext(\"prescribedMedications\", e.target.value);\n                      }}\n                      type=\"radio\"\n                      id={`Cardiac-FamilyMemberHeartConditions-prescrebied-medication-${index}`}\n                      key={`Cardiac-FamilyMemberHeartConditions-prescrebied-medication-${index}`}\n                      name=\"Cardiac-FamilyMemberHeartConditions-prescrebied-medication-Radio\"\n                      label={type}\n                    />\n                  ))}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-diabetesType-1\">\n                  <b>Do you have any type of diabetes?</b>\n                </Label>\n                <div>\n                  {[\"Type 1\", \"Type 2\", \"None\"].map(\n                    (type: string, index: number) => (\n                      <CustomInput\n                        inline\n                        onClick={(e: any) => {\n                          updateContext(\"diabetesType\", e.target.value);\n                        }}\n                        value={type}\n                        checked={Diagnostic.data.diabetesType === type}\n                        type=\"radio\"\n                        id={`Cardiac-FamilyMemberHeartConditions-diabetesType-${index}`}\n                        key={`Cardiac-FamilyMemberHeartConditions-diabetesType-${index}`}\n                        name=\"Cardiac-FamilyMemberHeartConditions-diabetesType-Radio\"\n                        label={type}\n                      />\n                    )\n                  )}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-OTC\">\n                  <b>\n                    List All medications, prescribed medications and all OTC:\n                  </b>\n                </Label>\n                <Input\n                  onChange={(e: any) => {\n                    updateContext(\"OTC\", e.target.value);\n                  }}\n                  value={Diagnostic.data.OTC}\n                  type=\"textarea\"\n                  name=\"text\"\n                  id=\"Cardiac-FamilyMemberHeartConditions-OTC\"\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <FormGroup>\n                <Label for=\"isRCECardioTransferCheckbox\">\n                  <b>Check here if doing a RCE cardio transfer</b>\n                </Label>\n                <div>\n                  <CustomInput\n                    onClick={(e: any) => {\n                      updateContext(\"isRCECardioTransfer\", e.target.checked);\n                    }}\n                    checked={Diagnostic.data.isRCECardioTransfer}\n                    type=\"checkbox\"\n                    id=\"isRCECardioTransferCheckbox\"\n                    label=\"Yes, I'm.\"\n                  />\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Diagnostic;\n","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/table.tsx",["371","372","373"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Cardiac, updateContext, Error }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic } } } = Cardiac\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Diagnosed</th>\n          <th>Prescribed Medications</th>\n          <th>Diabetes Type</th>\n          <th>Prescribed medications and all OTC</th>\n          <th>Is RCE cardio transfer?</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.typeOfCardiac.join(\", \")}.</td>\n          <td>{Diagnostic.prescribedMedications}</td>\n          <td>{Diagnostic.diabetesType}</td>\n          <td>{Diagnostic.OTC}</td>\n          <td>{Diagnostic.isRCECardioTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/index.tsx",["374","375","376","377","378","379","380","381"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport CancerFamilyMemberForm from \"../../Form/CancerFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  CancerFamilyMemberInterface,\n} from \"../../../context/Cancer.Contex\";\nimport { guidGenerator } from \"../../../utils\";\n\nconst CancerFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Cancer, updateContext, Error } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Cancer;\n\n  const save = useCallback(() => {\n    updateContext(\"success\", true);\n  }, [FamilyMember.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [FamilyMember.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: CancerFamilyMemberInterface, index: number) => (\n                <Row key={`CancerFamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <CancerFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`CancerFamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: CancerFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default CancerFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/table.tsx",["382","383","384"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Cancer, updateContext, Error }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic } } } = Cancer\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Diagnosed</th>\n          <th>Prescribed Medications</th>\n          <th>Diabetes Type</th>\n          <th>Prescribed medications and all OTC</th>\n          <th>Is RCE Cancer transfer?</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.indicationTest}</td>\n          <td>{Diagnostic.isDiagnosed ? 'Yes' : 'No'}</td>\n          <td>{Diagnostic.treatment}</td>\n          <td>{Diagnostic.OTC}</td>\n          <td>{Diagnostic.isRCECancerTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/index.tsx",["385","386","387","388","389","390","391","392","393","394","395","396","397","398"],"/private/var/www/oberholtzermedia-form/src/context/Cancer.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Form/CancerFamilyMember.tsx",["399"],"import FormItem from  \"./Item\"\nimport { Container, Row, Col, FormGroup, Label, Input,\n    Alert, Button, Card, CustomInput } from 'reactstrap';\nimport { CancerFamilyMemberInterface, FamilyMemberHeartConditions, Relationship } from \"../../context/Cancer.Contex\";\nimport { useState } from \"react\";\n\ninterface FormCancerFamilyMemberInterface {\n  success: boolean;\n  error: string;\n  onSave: (fm: CancerFamilyMemberInterface) => void;\n  onRemove: () => void;\n  id: string;\n  loading: boolean;\n  disabled: boolean;\n  model: CancerFamilyMemberInterface;\n  index: number;\n}\n\nconst CancerFamilyMember = ({model, success, error, onSave, id, loading, disabled, index, onRemove }: FormCancerFamilyMemberInterface) => {\n  const [fData, onChange] = useState(model);\n  \n  return (\n  <div className=\"col-xs-12\" style={{marginBottom: \"20px\"}}>\n    <Card style={{padding: \"15px\"}}>\n    <Container >\n      <Row>\n        <Col xs=\"11\">\n          <h4 style={{color: \"#007bff\"}}>Family Member {index + 1}</h4>\n        </Col>\n        <Col xs=\"1\">\n          <Button outline color=\"secondary\"\n            onClick={onRemove}\n          >X</Button>\n        </Col>\n      </Row>\n        {\n          error && (\n            <Row>\n                <Col>\n                    <Alert color=\"danger\">\n                        {error}\n                    </Alert>\n                </Col>\n            </Row>\n          )\n        }\n      <Row>\n      <Col xs=\"12\" sm=\"3\" >\n          <FormGroup>\n            <Label for={`AgeOfDiagnosisCancerFormFamilyMember${id}`}>Age of diagnosis</Label>\n            <Input\n              bsSize=\"sm\"\n              type=\"text\"\n              name=\"AgeOfDiagnosis\"\n              id={`AgeOfDiagnosisCancerFormFamilyMember${id}`}\n              placeholder=\"Age of diagnosis\"\n              value={fData.ageOfDiagnosis || ''}\n              onChange={e => {\n                onChange({\n                  ...fData,\n                  ageOfDiagnosis: e.target.value\n                })\n              }}\n            />\n          </FormGroup>\n        </Col>\n      <Col xs=\"12\" sm=\"3\">\n          <FormGroup>\n            <Label for={`RelationshipCancerFormFamilyMember${id}`}>Relationship</Label>\n            <CustomInput\n            value={fData.relationship || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                relationship: e.target.value\n              })\n            }}\n             type=\"select\" id={`RelationshipCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              {\n                Relationship.map((s) => (\n                  <option value={s.value} key={s.value} >{s.label}</option>\n                ))\n              }\n            </CustomInput>\n          </FormGroup>\n        </Col>\n      <Col xs=\"12\" sm=\"3\">\n          <FormGroup>\n            <Label for={`materialOrPaternalCancerFormFamilyMember${id}`}>Maternal or Paternal</Label>\n            <CustomInput\n            value={fData.materialOrPaternal || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                materialOrPaternal: e.target.value\n              })\n            }}\n             type=\"select\" id={`materialOrPaternalCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              <option value=\"Maternal\" >Maternal</option>\n              <option value=\"Paternal\" >Paternal</option>\n            </CustomInput>\n          </FormGroup>\n        </Col>\n        <Col xs=\"12\" sm=\"3\">\n          <FormItem\n            id={`ageCancerFormFamilyMember-${id}`}\n            label=\"Family Member Age\" \n            value={fData.age}\n            onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                age: e.target.value\n              })\n            }}/>\n        </Col>\n      </Row>\n      {/* <Row> */}\n        {/* <Col xs=\"12\">\n            <Label><b>Have you been diagnosed with any of the following?</b></Label>\n        </Col>\n        <Col xs=\"12\">\n            <p> (check all that apply)</p>\n        </Col> */}\n        {/* <Col xs=\"12\">\n          {\n            FamilyMemberHeartConditions.map((condition: any, index: number) => (\n              <FormGroup check inline key={`CancerFamilyMember-heart-condition-${index}`}>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    value={condition.value}\n                    checked={fData.heartConditions.includes(condition.value)}\n                    onChange={e => {\n                      if (e.target.checked) {\n                        onChange({\n                          ...fData,\n                          heartConditions: \n                          [\n                            ...fData.heartConditions,\n                            e.target.value\n                          ]\n                        })\n                      } else {\n                        const index = fData.heartConditions.findIndex((i: string) => i === e.target.value)\n                        const heartConditions = fData.heartConditions\n                        heartConditions.splice(index, 1)\n                        onChange({\n                          ...fData,\n                          heartConditions\n                        })\n                      }\n                    }}/> { condition.label }\n                </Label>\n              </FormGroup>\n            ))\n          }\n        </Col>  */}\n      {/* </Row> */}\n      <Row>\n        <Col xs=\"4\" >\n          <br />\n          <FormGroup>\n            <Label for={`typeOfCancerCancerFormFamilyMember${id}`}>Has any type of Cancer?</Label>\n            <CustomInput\n            value={fData.typeOfCancer || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                typeOfCancer: e.target.value\n              })\n            }}\n             type=\"select\" id={`typeOfCancerCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              <option value=\"Yes\" >Yes</option>\n              <option value=\"No\" >No</option>\n            </CustomInput>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={{ size: '2', offset: 10 }}>\n          <Button color=\"success\" onClick={() => {\n            onSave(fData)\n          }}>Save</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {\n            fData !== model && <span>Unsaved data</span>\n          }\n        </Col>\n      </Row>\n    </Container>\n  </Card>\n</div>\n  )}\n\n  export default CancerFamilyMember","/private/var/www/oberholtzermedia-form/src/utils/index.ts",[],"/private/var/www/oberholtzermedia-form/src/components/SubmitFormModal/index.tsx",["400","401","402"],"/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport { useContext, useEffect } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport { submitForm } from \"../../actions/medicare\";\nimport { AppContext } from \"../../context/App.Contex\";\n\nconst SubmitFormModal = (props: any) => {\n  const { ContextData, APPError } = useContext(AppContext);\n\n  console.log(\"SubmitFormModal\", { APPError });\n  return (\n    <Modal isOpen={props.isOpen} size=\"lg\">\n      <ModalHeader>Form Sync</ModalHeader>\n      <ModalBody>\n        {APPError ? `${APPError.message}` : \"Saving form ...\"}\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={props.onCancel}>\n          Cancel\n        </Button>\n        {/* <Button color=\"primary\" onClick={props.toggle}>Submit</Button>{' '} */}\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default SubmitFormModal;\n","/private/var/www/oberholtzermedia-form/src/components/ProgressBottom.tsx",["403","404","405","406","407","408","409"],"/private/var/www/oberholtzermedia-form/src/context/Agent.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Agent/Info/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Agent/Info/index.tsx",["410","411","412","413","414","415","416","417","418","419"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  CustomInput,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport FormItem from \"../../Form/Item\";\nimport { calculateError } from \"../../../utils\";\n\nconst AgentInfo = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Agent, updateContext } = useContext(AppContext);\n\n  const {\n    tabs: { Info },\n  } = Agent;\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(Info.error);\n  }, [Info.error]);\n\n  const save = useCallback(() => {\n    const error: {\n      url: null | string;\n      name: null | string;\n    } = {\n      url: null,\n      name: null,\n    };\n\n    if (Info.data.url === \"\") {\n      error.url = \"Url can not be empty.\";\n    }\n\n    if (Info.data.name === \"\") {\n      error.name = \"Name can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Info.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [Info.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                id={`agentUrlFormFamilyMember-url`}\n                label=\"Recording URL\"\n                value={Info.data.url}\n                error={Info.error?.url}\n                onChange={(e: any) => {\n                  updateContext(\"url\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                id={`agentNameFormFamilyMember-name`}\n                label=\"Agent name\"\n                value={Info.data.name}\n                error={Info.error?.name || null}\n                onChange={(e: any) => {\n                  updateContext(\"name\", e.target.value);\n                }}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default AgentInfo;\n","/private/var/www/oberholtzermedia-form/src/components/templates/index.tsx",["420","421","422"],"import { useContext } from \"react\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\nimport { AppContext } from \"../../context/App.Contex\";\n\nimport Progress from \"../Progress\";\n\nconst TPage = () => {\n  const { activeTab, activePanel, updateContext } = useContext(AppContext);\n  console.log({ activePanel });\n  return (\n    <div id=\"wizard_container\">\n      <div id=\"top-wizard\">\n        <Container>\n          <Row>\n            <Col>\n              <Progress />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h3>{activePanel.label}</h3>\n              <p>\n                Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum hass been the industry's standard dummy\n                text ever since the 1500s,{\" \"}\n              </p>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div id=\"middle-wizard\">\n        <activePanel.component />\n      </div>\n      <div id=\"bottom-wizard\"></div>\n    </div>\n  );\n};\n\nexport default TPage;\n","/private/var/www/oberholtzermedia-form/src/actions/medicare.ts",["423"],"import axios from \"axios\";\nimport { token } from \"../context/Auth.Context\"\nimport { AppDataInterface } from \"../context/Tabs.Context\";\nimport { BASE_URL } from \"./profile\";\n\ninterface saveDataInterface {\n    recordingUrl: string | null;\n    agentName: string | null;\n    firstName: string | null;\n    lastName: string | null;\n    contactNumber: string | null;\n    altContactNumber: string | null;\n    isCellphone?: boolean;\n    gender: string | null;\n    city: string | null;\n    state: string | null;\n    zip: string | null;\n    address: string | null;\n    address2: string | null;\n    email: string | null;\n    nursingHome: boolean;\n    birthDate: string | null;\n    alzheimerorDementia: boolean;\n    medicareId: string | null;\n    extendedMedicareLeadData: any;\n    salivaSwabTest: boolean;\n    height: string | null;\n    weight: string | null;\n    ethnicity: string | null;\n    diabetesInformation: {\n        diagnostics: Array<string | null>;\n        bmi: string | null;\n        familyMembers: Array<{\n            relationship: string | null;\n            name: string | null;\n            gender: string | null;\n            diagnostic: string | null;\n            birthDate: string | null;\n            age: string | null;\n        }>;\n        transfer: boolean\n    };\n    cancerInformation: {\n        indication: string | null;\n        diagnosticCancer: boolean;\n        treatment: string | null;\n        medications: string | null;\n        familyMembers: Array<{\n            relationship: string | null;\n            from: string | null;\n            type: string | null;\n            birthDate: string | null;\n            ageOfDiagnostic: string | null;\n        }>;\n        transfer: boolean\n    };\n    cardiacInformation: {\n        diagnostics: Array<string | null>;\n        prescribedMedicationsNitratesRenaxaNitrostat: boolean;\n        prescribedMedications: string | null;\n        diabetes: boolean;\n        diabetesType: string | null;\n        familyMembers: [\n        {\n            relationship: string | null;\n            from: string | null;\n            toAge: string | null;\n            diagnostics: Array<string | null>;\n            birthDate: string | null;\n            diabetes: boolean;\n            diabetesType: string | null;\n        }\n        ];\n        transfer: boolean\n    };\n    physicianInformation: {\n        doctorFullName: string | null;\n        contactPhone: string | null;\n        address: string | null;\n        address2: string | null;\n        city: string | null;\n        state: string | null;\n        zip: string | null;\n    }     \n}\n\n\n\nexport const submitForm = (AppData: any) => {\n    const axiosConfig = {\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            \"Authorization\": `Bearer ${token}`\n        }\n    };\n    alert(\"The afiliate ID is missing\");\n    const postData: saveDataInterface = {\n        recordingUrl: AppData.Agent.tabs.Info.data.url,\n        agentName: AppData.Agent.tabs.Info.data.name,\n        firstName: AppData.Profile.tabs.PersonalInfo.data.firstName,\n        lastName: AppData.Profile.tabs.PersonalInfo.data.lastName,\n        contactNumber: `${AppData.Profile.tabs.PersonalInfo.data.phoneCode}${AppData.Profile.tabs.PersonalInfo.data.phone}`,\n        altContactNumber: `${AppData.Profile.tabs.PersonalInfo.data.altPhoneCode}${AppData.Profile.tabs.PersonalInfo.data.altPhoneCode}`,\n        isCellphone:false,\n        gender: AppData.Profile.tabs.PersonalInfo.data.gender,\n        city: AppData.Profile.tabs.Address.data.city,\n        state: AppData.Profile.tabs.Address.data.streetLine,\n        zip: AppData.Profile.tabs.Address.data.postalCode,\n        address: AppData.Profile.tabs.Address.data.streetLine,\n        address2: AppData.Profile.tabs.Address.data.streetLine2,\n        email: AppData.Profile.tabs.PersonalInfo.data.email,\n        nursingHome:false,\n        birthDate: AppData.Profile.tabs.PersonalInfo.data.birthDate,\n        alzheimerorDementia:false,\n        medicareId: AppData.Profile.tabs.Medicare.data.memberID,\n        extendedMedicareLeadData: AppData.Profile.tabs.Medicare.data.extendedMedicareLeadData,\n        salivaSwabTest:false,\n        height: \"\",\n        weight: \"\",\n        ethnicity: AppData.Profile.tabs.PersonalInfo.data.ethnicity,\n        diabetesInformation: {\n            diagnostics: AppData.Diabetes.tabs.Diagnostic.data.list,\n            bmi: AppData.Diabetes.tabs.BMI.data.value,\n            familyMembers: [],\n            transfer: AppData.Diabetes.tabs.Diagnostic.data.isRCEDiabetesTransfer\n        },\n        cancerInformation: {\n            indication: AppData.Cancer.tabs.Diagnostic.data.indicationTest,\n            diagnosticCancer:  false,//`${AppData.Cancer.Diagnostic.isDiagnosed}`,\n            treatment: AppData.Cancer.tabs.Diagnostic.data.treatment,\n            medications: AppData.Cancer.tabs.Diagnostic.data.OTC,\n            familyMembers: [],\n            transfer: AppData.Cancer.tabs.Diagnostic.data.isRCECancerTransfer\n        },\n        cardiacInformation: {\n            diagnostics: AppData.Cardiac.tabs.Diagnostic.data.typeOfCardiac,\n            prescribedMedicationsNitratesRenaxaNitrostat:false,\n            prescribedMedications: AppData.Cardiac.tabs.Diagnostic.data.prescribedMedications,\n            diabetes: (AppData.Cardiac.tabs.Diagnostic.data.diabetesType !== \"No\"),\n            diabetesType: AppData.Cardiac.tabs.Diagnostic.data.diabetesType,\n            familyMembers: [\n            {\n                relationship: \"\",\n                from: \"\",\n                toAge: \"\",\n                diagnostics: [],\n                birthDate: \"\",\n                diabetes:false,\n                diabetesType: \"\",\n            }\n            ],\n            transfer: AppData.Cardiac.tabs.Diagnostic.data.isRCECardioTransfer\n        },\n        physicianInformation: {\n            doctorFullName: AppData.Profile.tabs.PrimaryCare.data.fullName,\n            contactPhone: AppData.Profile.tabs.PrimaryCare.data.phone,\n            address: \"\",\n            address2: \"\",\n            city: \"\",\n            state: \"\",\n            zip: \"\",\n        }     \n    };\n      \n    return axios.post(`${BASE_URL}/medicare`, postData, axiosConfig)\n    .then((res: any) => res.data )\n}\n","/private/var/www/oberholtzermedia-form/src/context/Auth.Context.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Stepper/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Stepper/Card.tsx",["424","425","426","427","428","429","430"],"import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Grid, Divider } from \"@material-ui/core\";\nimport InputMask from \"react-input-mask\";\nimport { Button, ButtonGroup, Input } from \"reactstrap\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction FormRow() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default function OutlinedCard(props: any) {\n  const {\n    onChange,\n    onSecondLabelChange,\n    id,\n    label,\n    value,\n    checked,\n    hint,\n    error,\n    secondLabel,\n    ps,\n    secondValue,\n    onRadioChange,\n    radio,\n    invalid,\n    description,\n  } = props;\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {label}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {description}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {`${hint ? hint : \"\"} ${ps ? ps : secondLabel}`}\n        </Typography>\n        <Divider />\n        <Typography className={classes.pos}>\n          {value === \"Yes\" && (\n            <>\n              {secondLabel && (\n                <>\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    {secondLabel}\n                  </Typography>\n                  <Input\n                    type=\"tel\"\n                    mask=\"99\"\n                    maskChar=\"\"\n                    invalid={invalid}\n                    value={secondValue}\n                    id={`Cancer-FamilyMemberHeartConditions-second-label-form-${id}`}\n                    tag={InputMask}\n                    onChange={(e: any) => onSecondLabelChange(e.target.value)}\n                  />\n                </>\n              )}\n            </>\n          )}\n        </Typography>\n\n        {invalid && <Alert severity=\"error\">{invalid}</Alert>}\n      </CardContent>\n      <CardActions>\n        <ButtonGroup>\n          <Button\n            outline={value !== \"Yes\"}\n            color={\"primary\"}\n            onClick={(e: any) => onChange(\"Yes\")}\n          >\n            Yes\n          </Button>\n          <Button outline={value !== \"No\"} onClick={(e: any) => onChange(\"No\")}>\n            No\n          </Button>\n        </ButtonGroup>\n      </CardActions>\n    </Card>\n  );\n}\n\n// const ButtonG = ({\n//   onChange,\n//   onSecondLabelChange,\n//   id,\n//   label,\n//   value,\n//   checked,\n//   error,\n//   secondLabel,\n//   secondValue,\n//   onRadioChange,\n//   radio,\n//   invalid,\n// }: any) => {\n//   return (\n//     <>\n//       <Row>\n//         <Col xs=\"12\" sm={value === \"Yes\" ? \"2\" : \"12\"}>\n//           {label}\n//           <br />\n// <ButtonGroup size=\"lg\">\n//   <Button\n//     outline={value !== \"Yes\"}\n//     color={\"primary\"}\n//     onClick={(e: any) => onChange(\"Yes\")}\n//   >\n//     Yes\n//   </Button>\n//   <Button\n//     outline={value !== \"No\"}\n//     onClick={(e: any) => onChange(\"No\")}\n//   >\n//     No\n//   </Button>\n// </ButtonGroup>\n\n//           {/* <FormGroup inline>\n//             <Label\n//               for={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//               inline\n//             >\n//               {label}\n//             </Label>\n//             <div>\n//               <CustomInput\n//                 inline\n//                 invalid={invalid}\n//                 onClick={(e: any) => onChange(\"Yes\")}\n//                 value={value}\n//                 checked={value === \"Yes\"}\n//                 type=\"radio\"\n//                 id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 label={\"Yes\"}\n//               />\n//               <CustomInput\n//                 inline\n//                 invalid={invalid}\n//                 onClick={(e: any) => onChange(\"No\")}\n//                 value={value}\n//                 checked={value === \"No\"}\n//                 type=\"radio\"\n//                 id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-no-${id}`}\n//                 name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 label={\"No\"}\n//               />\n//             </div>\n//           </FormGroup> */}\n//         </Col>\n//         {value === \"Yes\" && (\n//           <>\n// {secondLabel && (\n//   <Col xs=\"12\" sm=\"5\">\n//     <FormGroup>\n//       <Label>{secondLabel}</Label>\n//       <Input\n//         type=\"tel\"\n//         mask=\"99\"\n//         maskChar=\"\"\n//         invalid={invalid}\n//         value={secondValue}\n//         id={`Cancer-FamilyMemberHeartConditions-second-label-form-${id}`}\n//         tag={InputMask}\n//         onChange={(e: any) => onSecondLabelChange(e.target.value)}\n//       />\n//       <FormFeedback>{error}</FormFeedback>\n//     </FormGroup>\n//   </Col>\n// )}\n//             {radio && (\n//               <Col xs=\"12\" sm=\"5\">\n//                 <FormGroup inline>\n//                   <Label\n//                     for={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                     inline\n//                   >\n//                     {label}\n//                   </Label>\n//                   <div>\n//                     {radio.items.map((r: any) => (\n//                       <CustomInput\n//                         inline\n//                         invalid={invalid}\n//                         onClick={(e: any) => onRadioChange(r.value)}\n//                         value={value}\n//                         checked={radio.value === r.value}\n//                         type=\"radio\"\n//                         id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-${r.value}-form-${id}`}\n//                         name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-${r.value}-form-${id}`}\n//                         label={r.label}\n//                       />\n//                     ))}\n//                   </div>\n//                 </FormGroup>\n//               </Col>\n//             )}\n//           </>\n//         )}\n//         {invalid && <div>{invalid}</div>}\n//       </Row>\n//     </>\n//   );\n// };\n","/private/var/www/oberholtzermedia-form/src/stories/Button.stories.tsx",[],"/private/var/www/oberholtzermedia-form/src/stories/Page.tsx",[],"/private/var/www/oberholtzermedia-form/src/stories/Button.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/Stepper.stories.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Stepper.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/App.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/Agent/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Agent.tsx",[],{"ruleId":"431","severity":1,"message":"432","line":116,"column":6,"nodeType":"433","endLine":116,"endColumn":20,"suggestions":"434"},{"ruleId":"435","replacedBy":"436"},{"ruleId":"437","replacedBy":"438"},{"ruleId":"439","severity":1,"message":"440","line":3,"column":3,"nodeType":"441","messageId":"442","endLine":3,"endColumn":17},{"ruleId":"439","severity":1,"message":"443","line":4,"column":3,"nodeType":"441","messageId":"442","endLine":4,"endColumn":8},{"ruleId":"439","severity":1,"message":"444","line":5,"column":3,"nodeType":"441","messageId":"442","endLine":5,"endColumn":15},{"ruleId":"439","severity":1,"message":"445","line":6,"column":3,"nodeType":"441","messageId":"442","endLine":6,"endColumn":15},{"ruleId":"439","severity":1,"message":"446","line":50,"column":10,"nodeType":"441","messageId":"442","endLine":50,"endColumn":14},{"ruleId":"439","severity":1,"message":"447","line":50,"column":16,"nodeType":"441","messageId":"442","endLine":50,"endColumn":23},{"ruleId":"439","severity":1,"message":"448","line":51,"column":10,"nodeType":"441","messageId":"442","endLine":51,"endColumn":17},{"ruleId":"439","severity":1,"message":"449","line":51,"column":19,"nodeType":"441","messageId":"442","endLine":51,"endColumn":29},{"ruleId":"439","severity":1,"message":"450","line":55,"column":9,"nodeType":"441","messageId":"442","endLine":55,"endColumn":23},{"ruleId":"439","severity":1,"message":"451","line":56,"column":9,"nodeType":"441","messageId":"442","endLine":56,"endColumn":26},{"ruleId":"431","severity":1,"message":"452","line":121,"column":6,"nodeType":"433","endLine":121,"endColumn":50,"suggestions":"453"},{"ruleId":"431","severity":1,"message":"432","line":125,"column":6,"nodeType":"433","endLine":125,"endColumn":25,"suggestions":"454"},{"ruleId":"435","replacedBy":"455"},{"ruleId":"437","replacedBy":"456"},{"ruleId":"439","severity":1,"message":"457","line":9,"column":8,"nodeType":"441","messageId":"442","endLine":9,"endColumn":24},{"ruleId":"439","severity":1,"message":"458","line":12,"column":8,"nodeType":"441","messageId":"442","endLine":12,"endColumn":13},{"ruleId":"435","replacedBy":"459"},{"ruleId":"437","replacedBy":"460"},{"ruleId":"439","severity":1,"message":"461","line":16,"column":3,"nodeType":"441","messageId":"442","endLine":16,"endColumn":7},{"ruleId":"439","severity":1,"message":"462","line":17,"column":3,"nodeType":"441","messageId":"442","endLine":17,"endColumn":11},{"ruleId":"439","severity":1,"message":"463","line":18,"column":3,"nodeType":"441","messageId":"442","endLine":18,"endColumn":12},{"ruleId":"439","severity":1,"message":"464","line":19,"column":3,"nodeType":"441","messageId":"442","endLine":19,"endColumn":14},{"ruleId":"439","severity":1,"message":"465","line":20,"column":3,"nodeType":"441","messageId":"442","endLine":20,"endColumn":8},{"ruleId":"439","severity":1,"message":"466","line":26,"column":10,"nodeType":"441","messageId":"442","endLine":26,"endColumn":38},{"ruleId":"439","severity":1,"message":"467","line":31,"column":10,"nodeType":"441","messageId":"442","endLine":31,"endColumn":17},{"ruleId":"439","severity":1,"message":"468","line":34,"column":5,"nodeType":"441","messageId":"442","endLine":34,"endColumn":14},{"ruleId":"439","severity":1,"message":"469","line":37,"column":5,"nodeType":"441","messageId":"442","endLine":37,"endColumn":21},{"ruleId":"439","severity":1,"message":"470","line":39,"column":5,"nodeType":"441","messageId":"442","endLine":39,"endColumn":10},{"ruleId":"439","severity":1,"message":"471","line":40,"column":5,"nodeType":"441","messageId":"442","endLine":40,"endColumn":13},{"ruleId":"439","severity":1,"message":"472","line":41,"column":5,"nodeType":"441","messageId":"442","endLine":41,"endColumn":17},{"ruleId":"431","severity":1,"message":"432","line":110,"column":6,"nodeType":"433","endLine":110,"endColumn":25,"suggestions":"473"},{"ruleId":"439","severity":1,"message":"443","line":5,"column":3,"nodeType":"441","messageId":"442","endLine":5,"endColumn":8},{"ruleId":"439","severity":1,"message":"446","line":27,"column":10,"nodeType":"441","messageId":"442","endLine":27,"endColumn":14},{"ruleId":"439","severity":1,"message":"447","line":27,"column":16,"nodeType":"441","messageId":"442","endLine":27,"endColumn":23},{"ruleId":"439","severity":1,"message":"450","line":29,"column":9,"nodeType":"441","messageId":"442","endLine":29,"endColumn":23},{"ruleId":"431","severity":1,"message":"432","line":54,"column":6,"nodeType":"433","endLine":54,"endColumn":24,"suggestions":"474"},{"ruleId":"439","severity":1,"message":"475","line":56,"column":9,"nodeType":"441","messageId":"442","endLine":56,"endColumn":27},{"ruleId":"435","replacedBy":"476"},{"ruleId":"437","replacedBy":"477"},{"ruleId":"439","severity":1,"message":"478","line":4,"column":10,"nodeType":"441","messageId":"442","endLine":4,"endColumn":26},{"ruleId":"439","severity":1,"message":"478","line":4,"column":10,"nodeType":"441","messageId":"442","endLine":4,"endColumn":26},{"ruleId":"439","severity":1,"message":"478","line":4,"column":10,"nodeType":"441","messageId":"442","endLine":4,"endColumn":26},{"ruleId":"439","severity":1,"message":"478","line":4,"column":10,"nodeType":"441","messageId":"442","endLine":4,"endColumn":26},{"ruleId":"435","replacedBy":"479"},{"ruleId":"437","replacedBy":"480"},{"ruleId":"435","replacedBy":"481"},{"ruleId":"437","replacedBy":"482"},{"ruleId":"435","replacedBy":"483"},{"ruleId":"437","replacedBy":"484"},{"ruleId":"439","severity":1,"message":"485","line":1,"column":10,"nodeType":"441","messageId":"442","endLine":1,"endColumn":26},{"ruleId":"439","severity":1,"message":"486","line":11,"column":22,"nodeType":"441","messageId":"442","endLine":11,"endColumn":29},{"ruleId":"439","severity":1,"message":"487","line":39,"column":5,"nodeType":"441","messageId":"442","endLine":39,"endColumn":12},{"ruleId":"439","severity":1,"message":"488","line":40,"column":5,"nodeType":"441","messageId":"442","endLine":40,"endColumn":18},{"ruleId":"439","severity":1,"message":"489","line":44,"column":5,"nodeType":"441","messageId":"442","endLine":44,"endColumn":16},{"ruleId":"439","severity":1,"message":"490","line":45,"column":5,"nodeType":"441","messageId":"442","endLine":45,"endColumn":23},{"ruleId":"439","severity":1,"message":"491","line":13,"column":3,"nodeType":"441","messageId":"442","endLine":13,"endColumn":13},{"ruleId":"439","severity":1,"message":"492","line":14,"column":3,"nodeType":"441","messageId":"442","endLine":14,"endColumn":17},{"ruleId":"439","severity":1,"message":"493","line":15,"column":3,"nodeType":"441","messageId":"442","endLine":15,"endColumn":11},{"ruleId":"439","severity":1,"message":"494","line":64,"column":18,"nodeType":"441","messageId":"442","endLine":64,"endColumn":27},{"ruleId":"435","replacedBy":"495"},{"ruleId":"437","replacedBy":"496"},{"ruleId":"439","severity":1,"message":"443","line":11,"column":3,"nodeType":"441","messageId":"442","endLine":11,"endColumn":8},{"ruleId":"439","severity":1,"message":"497","line":12,"column":3,"nodeType":"441","messageId":"442","endLine":12,"endColumn":9},{"ruleId":"439","severity":1,"message":"498","line":24,"column":10,"nodeType":"441","messageId":"442","endLine":24,"endColumn":17},{"ruleId":"439","severity":1,"message":"499","line":24,"column":19,"nodeType":"441","messageId":"442","endLine":24,"endColumn":29},{"ruleId":"431","severity":1,"message":"500","line":49,"column":6,"nodeType":"433","endLine":49,"endColumn":23,"suggestions":"501"},{"ruleId":"431","severity":1,"message":"432","line":56,"column":6,"nodeType":"433","endLine":56,"endColumn":23,"suggestions":"502"},{"ruleId":"435","replacedBy":"503"},{"ruleId":"437","replacedBy":"504"},{"ruleId":"439","severity":1,"message":"505","line":8,"column":3,"nodeType":"441","messageId":"442","endLine":8,"endColumn":12},{"ruleId":"439","severity":1,"message":"506","line":9,"column":3,"nodeType":"441","messageId":"442","endLine":9,"endColumn":8},{"ruleId":"439","severity":1,"message":"507","line":10,"column":3,"nodeType":"441","messageId":"442","endLine":10,"endColumn":8},{"ruleId":"439","severity":1,"message":"443","line":11,"column":3,"nodeType":"441","messageId":"442","endLine":11,"endColumn":8},{"ruleId":"439","severity":1,"message":"497","line":12,"column":3,"nodeType":"441","messageId":"442","endLine":12,"endColumn":9},{"ruleId":"439","severity":1,"message":"499","line":20,"column":19,"nodeType":"441","messageId":"442","endLine":20,"endColumn":29},{"ruleId":"431","severity":1,"message":"500","line":45,"column":6,"nodeType":"433","endLine":45,"endColumn":16,"suggestions":"508"},{"ruleId":"431","severity":1,"message":"432","line":52,"column":6,"nodeType":"433","endLine":52,"endColumn":16,"suggestions":"509"},{"ruleId":"439","severity":1,"message":"505","line":8,"column":3,"nodeType":"441","messageId":"442","endLine":8,"endColumn":12},{"ruleId":"439","severity":1,"message":"506","line":9,"column":3,"nodeType":"441","messageId":"442","endLine":9,"endColumn":8},{"ruleId":"439","severity":1,"message":"507","line":10,"column":3,"nodeType":"441","messageId":"442","endLine":10,"endColumn":8},{"ruleId":"439","severity":1,"message":"443","line":11,"column":3,"nodeType":"441","messageId":"442","endLine":11,"endColumn":8},{"ruleId":"439","severity":1,"message":"499","line":24,"column":19,"nodeType":"441","messageId":"442","endLine":24,"endColumn":29},{"ruleId":"439","severity":1,"message":"478","line":4,"column":10,"nodeType":"441","messageId":"442","endLine":4,"endColumn":26},{"ruleId":"439","severity":1,"message":"510","line":2,"column":31,"nodeType":"441","messageId":"442","endLine":2,"endColumn":35},{"ruleId":"439","severity":1,"message":"505","line":8,"column":3,"nodeType":"441","messageId":"442","endLine":8,"endColumn":12},{"ruleId":"439","severity":1,"message":"506","line":9,"column":3,"nodeType":"441","messageId":"442","endLine":9,"endColumn":8},{"ruleId":"439","severity":1,"message":"507","line":10,"column":3,"nodeType":"441","messageId":"442","endLine":10,"endColumn":8},{"ruleId":"439","severity":1,"message":"443","line":11,"column":3,"nodeType":"441","messageId":"442","endLine":11,"endColumn":8},{"ruleId":"439","severity":1,"message":"499","line":23,"column":19,"nodeType":"441","messageId":"442","endLine":23,"endColumn":29},{"ruleId":"439","severity":1,"message":"443","line":10,"column":3,"nodeType":"441","messageId":"442","endLine":10,"endColumn":8},{"ruleId":"439","severity":1,"message":"511","line":12,"column":3,"nodeType":"441","messageId":"442","endLine":12,"endColumn":17},{"ruleId":"439","severity":1,"message":"512","line":18,"column":3,"nodeType":"441","messageId":"442","endLine":18,"endColumn":23},{"ruleId":"439","severity":1,"message":"498","line":25,"column":10,"nodeType":"441","messageId":"442","endLine":25,"endColumn":17},{"ruleId":"439","severity":1,"message":"499","line":25,"column":19,"nodeType":"441","messageId":"442","endLine":25,"endColumn":29},{"ruleId":"431","severity":1,"message":"500","line":49,"column":6,"nodeType":"433","endLine":49,"endColumn":23,"suggestions":"513"},{"ruleId":"431","severity":1,"message":"432","line":56,"column":6,"nodeType":"433","endLine":56,"endColumn":23,"suggestions":"514"},{"ruleId":"439","severity":1,"message":"478","line":4,"column":10,"nodeType":"441","messageId":"442","endLine":4,"endColumn":26},{"ruleId":"439","severity":1,"message":"515","line":7,"column":20,"nodeType":"441","messageId":"442","endLine":7,"endColumn":33},{"ruleId":"439","severity":1,"message":"470","line":7,"column":35,"nodeType":"441","messageId":"442","endLine":7,"endColumn":40},{"ruleId":"439","severity":1,"message":"505","line":8,"column":3,"nodeType":"441","messageId":"442","endLine":8,"endColumn":12},{"ruleId":"439","severity":1,"message":"506","line":9,"column":3,"nodeType":"441","messageId":"442","endLine":9,"endColumn":8},{"ruleId":"439","severity":1,"message":"507","line":10,"column":3,"nodeType":"441","messageId":"442","endLine":10,"endColumn":8},{"ruleId":"439","severity":1,"message":"443","line":11,"column":3,"nodeType":"441","messageId":"442","endLine":11,"endColumn":8},{"ruleId":"439","severity":1,"message":"499","line":23,"column":19,"nodeType":"441","messageId":"442","endLine":23,"endColumn":29},{"ruleId":"439","severity":1,"message":"470","line":26,"column":34,"nodeType":"441","messageId":"442","endLine":26,"endColumn":39},{"ruleId":"431","severity":1,"message":"500","line":33,"column":6,"nodeType":"433","endLine":33,"endColumn":25,"suggestions":"516"},{"ruleId":"431","severity":1,"message":"432","line":37,"column":6,"nodeType":"433","endLine":37,"endColumn":25,"suggestions":"517"},{"ruleId":"439","severity":1,"message":"478","line":4,"column":10,"nodeType":"441","messageId":"442","endLine":4,"endColumn":26},{"ruleId":"439","severity":1,"message":"515","line":7,"column":19,"nodeType":"441","messageId":"442","endLine":7,"endColumn":32},{"ruleId":"439","severity":1,"message":"470","line":7,"column":34,"nodeType":"441","messageId":"442","endLine":7,"endColumn":39},{"ruleId":"439","severity":1,"message":"507","line":9,"column":3,"nodeType":"441","messageId":"442","endLine":9,"endColumn":8},{"ruleId":"439","severity":1,"message":"518","line":10,"column":3,"nodeType":"441","messageId":"442","endLine":10,"endColumn":15},{"ruleId":"439","severity":1,"message":"519","line":11,"column":3,"nodeType":"441","messageId":"442","endLine":11,"endColumn":14},{"ruleId":"439","severity":1,"message":"520","line":15,"column":8,"nodeType":"441","messageId":"442","endLine":15,"endColumn":17},{"ruleId":"439","severity":1,"message":"521","line":20,"column":3,"nodeType":"441","messageId":"442","endLine":20,"endColumn":30},{"ruleId":"439","severity":1,"message":"522","line":21,"column":3,"nodeType":"441","messageId":"442","endLine":21,"endColumn":22},{"ruleId":"439","severity":1,"message":"523","line":22,"column":3,"nodeType":"441","messageId":"442","endLine":22,"endColumn":22},{"ruleId":"439","severity":1,"message":"498","line":35,"column":10,"nodeType":"441","messageId":"442","endLine":35,"endColumn":17},{"ruleId":"439","severity":1,"message":"499","line":35,"column":19,"nodeType":"441","messageId":"442","endLine":35,"endColumn":29},{"ruleId":"524","severity":1,"message":"525","line":72,"column":58,"nodeType":"526","messageId":"527","endLine":72,"endColumn":60},{"ruleId":"431","severity":1,"message":"500","line":94,"column":6,"nodeType":"433","endLine":94,"endColumn":23,"suggestions":"528"},{"ruleId":"431","severity":1,"message":"529","line":128,"column":6,"nodeType":"433","endLine":128,"endColumn":23,"suggestions":"530"},{"ruleId":"431","severity":1,"message":"531","line":143,"column":6,"nodeType":"433","endLine":143,"endColumn":19,"suggestions":"532"},{"ruleId":"431","severity":1,"message":"432","line":147,"column":6,"nodeType":"433","endLine":147,"endColumn":23,"suggestions":"533"},{"ruleId":"439","severity":1,"message":"521","line":4,"column":39,"nodeType":"441","messageId":"442","endLine":4,"endColumn":66},{"ruleId":"439","severity":1,"message":"534","line":2,"column":22,"nodeType":"441","messageId":"442","endLine":2,"endColumn":31},{"ruleId":"439","severity":1,"message":"535","line":4,"column":10,"nodeType":"441","messageId":"442","endLine":4,"endColumn":20},{"ruleId":"439","severity":1,"message":"536","line":8,"column":11,"nodeType":"441","messageId":"442","endLine":8,"endColumn":22},{"ruleId":"439","severity":1,"message":"485","line":1,"column":10,"nodeType":"441","messageId":"442","endLine":1,"endColumn":26},{"ruleId":"439","severity":1,"message":"537","line":9,"column":3,"nodeType":"441","messageId":"442","endLine":9,"endColumn":22},{"ruleId":"439","severity":1,"message":"538","line":14,"column":7,"nodeType":"441","messageId":"442","endLine":14,"endColumn":21},{"ruleId":"439","severity":1,"message":"539","line":27,"column":23,"nodeType":"441","messageId":"442","endLine":27,"endColumn":37},{"ruleId":"439","severity":1,"message":"540","line":28,"column":7,"nodeType":"441","messageId":"442","endLine":28,"endColumn":14},{"ruleId":"439","severity":1,"message":"541","line":28,"column":16,"nodeType":"441","messageId":"442","endLine":28,"endColumn":29},{"ruleId":"439","severity":1,"message":"489","line":28,"column":31,"nodeType":"441","messageId":"442","endLine":28,"endColumn":42},{"ruleId":"439","severity":1,"message":"505","line":7,"column":3,"nodeType":"441","messageId":"442","endLine":7,"endColumn":12},{"ruleId":"439","severity":1,"message":"506","line":8,"column":3,"nodeType":"441","messageId":"442","endLine":8,"endColumn":8},{"ruleId":"439","severity":1,"message":"507","line":9,"column":3,"nodeType":"441","messageId":"442","endLine":9,"endColumn":8},{"ruleId":"439","severity":1,"message":"443","line":10,"column":3,"nodeType":"441","messageId":"442","endLine":10,"endColumn":8},{"ruleId":"439","severity":1,"message":"519","line":11,"column":3,"nodeType":"441","messageId":"442","endLine":11,"endColumn":14},{"ruleId":"439","severity":1,"message":"498","line":20,"column":10,"nodeType":"441","messageId":"442","endLine":20,"endColumn":17},{"ruleId":"439","severity":1,"message":"499","line":20,"column":19,"nodeType":"441","messageId":"442","endLine":20,"endColumn":29},{"ruleId":"439","severity":1,"message":"475","line":28,"column":9,"nodeType":"441","messageId":"442","endLine":28,"endColumn":27},{"ruleId":"431","severity":1,"message":"500","line":51,"column":6,"nodeType":"433","endLine":51,"endColumn":17,"suggestions":"542"},{"ruleId":"431","severity":1,"message":"432","line":55,"column":6,"nodeType":"433","endLine":55,"endColumn":17,"suggestions":"543"},{"ruleId":"439","severity":1,"message":"497","line":2,"column":31,"nodeType":"441","messageId":"442","endLine":2,"endColumn":37},{"ruleId":"439","severity":1,"message":"468","line":8,"column":11,"nodeType":"441","messageId":"442","endLine":8,"endColumn":20},{"ruleId":"439","severity":1,"message":"515","line":8,"column":35,"nodeType":"441","messageId":"442","endLine":8,"endColumn":48},{"ruleId":"439","severity":1,"message":"544","line":3,"column":10,"nodeType":"441","messageId":"442","endLine":3,"endColumn":26},{"ruleId":"439","severity":1,"message":"545","line":7,"column":22,"nodeType":"441","messageId":"442","endLine":7,"endColumn":34},{"ruleId":"439","severity":1,"message":"546","line":35,"column":10,"nodeType":"441","messageId":"442","endLine":35,"endColumn":17},{"ruleId":"439","severity":1,"message":"547","line":59,"column":5,"nodeType":"441","messageId":"442","endLine":59,"endColumn":12},{"ruleId":"439","severity":1,"message":"548","line":61,"column":5,"nodeType":"441","messageId":"442","endLine":61,"endColumn":10},{"ruleId":"439","severity":1,"message":"549","line":65,"column":5,"nodeType":"441","messageId":"442","endLine":65,"endColumn":18},{"ruleId":"439","severity":1,"message":"550","line":66,"column":5,"nodeType":"441","messageId":"442","endLine":66,"endColumn":10},{"ruleId":"439","severity":1,"message":"551","line":71,"column":9,"nodeType":"441","messageId":"442","endLine":71,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'save' and 'updateContext'. Either include them or remove the dependency array.","ArrayExpression",["552"],"no-native-reassign",["553"],"no-negated-in-lhs",["554"],"@typescript-eslint/no-unused-vars","'DropdownToggle' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'code' is assigned a value but never used.","'setCode' is assigned a value but never used.","'altCode' is assigned a value but never used.","'setAltCode' is assigned a value but never used.","'toggleDropDown' is assigned a value but never used.","'toggleAltDropDown' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'PersonalInfo.data.birthDate', 'PersonalInfo.data.email', 'PersonalInfo.data.ethnicity', 'PersonalInfo.data.gender', 'PersonalInfo.data.lastName', 'PersonalInfo.data.phone', and 'PersonalInfo.data.previousTests.length'. Either include them or remove the dependency array.",["555"],["556"],["553"],["554"],"'useScrollTrigger' is defined but never used.","'Slide' is defined but never used.",["553"],["554"],"'Card' is defined but never used.","'CardText' is defined but never used.","'CardTitle' is defined but never used.","'CardColumns' is defined but never used.","'Table' is defined but never used.","'ProfileMedicareDataInterface' is defined but never used.","'mResult' is assigned a value but never used.","'activeTab' is assigned a value but never used.","'registerFunction' is assigned a value but never used.","'Error' is assigned a value but never used.","'setError' is assigned a value but never used.","'setActiveTab' is assigned a value but never used.",["557"],["558"],"'showError' is assigned a value but never used.",["553"],["554"],"'ProfileInterface' is defined but never used.",["553"],["554"],["553"],["554"],["553"],["554"],"'TabItemInterface' is defined but never used.","'useMemo' is defined but never used.","'nextTab' is assigned a value but never used.","'goToNextPanel' is assigned a value but never used.","'goToNextTab' is assigned a value but never used.","'setIsReviewingData' is assigned a value but never used.","'Breadcrumb' is defined but never used.","'BreadcrumbItem' is defined but never used.","'Collapse' is defined but never used.","'setTables' is assigned a value but never used.",["553"],["554"],"'Button' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'updateContext'. Either include it or remove the dependency array.",["559"],["560"],["553"],["554"],"'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.",["561"],["562"],"'Form' is defined but never used.","'CardImgOverlay' is defined but never used.","'CardiacDataInterface' is defined but never used.",["563"],["564"],"'updateContext' is assigned a value but never used.",["565"],["566"],"'FormFeedback' is defined but never used.","'CustomInput' is defined but never used.","'InputMask' is defined but never used.","'FamilyMemberHeartConditions' is defined but never used.","'DiagnosedCancerList' is defined but never used.","'TreatmentCancerList' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["567"],"React Hook useCallback has missing dependencies: 'Diagnostic.data.cancerList', 'Diagnostic.error', and 'updateContext'. Either include them or remove the dependency array.",["568"],"React Hook useEffect has a missing dependency: 'Diagnostic.data.cancerList'. Either include it or remove the dependency array.",["569"],["570"],"'useEffect' is defined but never used.","'submitForm' is defined but never used.","'ContextData' is assigned a value but never used.","'UncontrolledPopover' is defined but never used.","'PopoverContent' is assigned a value but never used.","'setActivePanel' is assigned a value but never used.","'prevTab' is assigned a value but never used.","'backToPrevTab' is assigned a value but never used.",["571"],["572"],"'AppDataInterface' is defined but never used.","'createStyles' is defined but never used.","'FormRow' is defined but never used.","'checked' is assigned a value but never used.","'error' is assigned a value but never used.","'onRadioChange' is assigned a value but never used.","'radio' is assigned a value but never used.","'bull' is assigned a value but never used.",{"desc":"573","fix":"574"},"no-global-assign","no-unsafe-negation",{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"577","fix":"579"},{"desc":"580","fix":"581"},{"desc":"582","fix":"583"},{"desc":"584","fix":"585"},{"desc":"586","fix":"587"},{"desc":"588","fix":"589"},{"desc":"590","fix":"591"},{"desc":"584","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"584","fix":"603"},{"desc":"604","fix":"605"},{"desc":"606","fix":"607"},"Update the dependencies array to be: [Address.data, save, updateContext]",{"range":"608","text":"609"},"Update the dependencies array to be: [PersonalInfo.data.birthDate, PersonalInfo.data.email, PersonalInfo.data.ethnicity, PersonalInfo.data.firstName, PersonalInfo.data.gender, PersonalInfo.data.lastName, PersonalInfo.data.phone, PersonalInfo.data.previousTests.length, updateContext]",{"range":"610","text":"611"},"Update the dependencies array to be: [PersonalInfo.data, save, updateContext]",{"range":"612","text":"613"},{"range":"614","text":"613"},"Update the dependencies array to be: [PrimaryCare.data, save, updateContext]",{"range":"615","text":"616"},"Update the dependencies array to be: [Diagnostic.data.list.length, updateContext]",{"range":"617","text":"618"},"Update the dependencies array to be: [Diagnostic.data, save, updateContext]",{"range":"619","text":"620"},"Update the dependencies array to be: [BMI.data.value, updateContext]",{"range":"621","text":"622"},"Update the dependencies array to be: [BMI.data, save, updateContext]",{"range":"623","text":"624"},"Update the dependencies array to be: [Diagnostic.data.typeOfCardiac.length, updateContext]",{"range":"625","text":"626"},{"range":"627","text":"620"},"Update the dependencies array to be: [updateContext]",{"range":"628","text":"629"},"Update the dependencies array to be: [FamilyMember.data, save, updateContext]",{"range":"630","text":"631"},"Update the dependencies array to be: [Diagnostic.data.cancerList, Diagnostic.data.isDiagnosed, updateContext]",{"range":"632","text":"633"},"Update the dependencies array to be: [Diagnostic.data.cancerList, Diagnostic.error, currentStepItem.number, currentStepItem.radio, currentStepItem.secondLabel, currentStepItem.slug, updateContext]",{"range":"634","text":"635"},"Update the dependencies array to be: [Diagnostic.data.cancerList, currentStep]",{"range":"636","text":"637"},{"range":"638","text":"620"},"Update the dependencies array to be: [Info.data.name, Info.data.url, updateContext]",{"range":"639","text":"640"},"Update the dependencies array to be: [Info.data, save, updateContext]",{"range":"641","text":"642"},[2036,2050],"[Address.data, save, updateContext]",[3147,3191],"[PersonalInfo.data.birthDate, PersonalInfo.data.email, PersonalInfo.data.ethnicity, PersonalInfo.data.firstName, PersonalInfo.data.gender, PersonalInfo.data.lastName, PersonalInfo.data.phone, PersonalInfo.data.previousTests.length, updateContext]",[3253,3272],"[PersonalInfo.data, save, updateContext]",[2982,3001],[1472,1490],"[PrimaryCare.data, save, updateContext]",[1162,1179],"[Diagnostic.data.list.length, updateContext]",[1281,1298],"[Diagnostic.data, save, updateContext]",[1112,1122],"[BMI.data.value, updateContext]",[1224,1234],"[BMI.data, save, updateContext]",[1244,1261],"[Diagnostic.data.typeOfCardiac.length, updateContext]",[1363,1380],[852,871],"[updateContext]",[933,952],"[FamilyMember.data, save, updateContext]",[2826,2843],"[Diagnostic.data.cancerList, Diagnostic.data.isDiagnosed, updateContext]",[3986,4003],"[Diagnostic.data.cancerList, Diagnostic.error, currentStepItem.number, currentStepItem.radio, currentStepItem.secondLabel, currentStepItem.slug, updateContext]",[4348,4361],"[Diagnostic.data.cancerList, currentStep]",[4423,4440],[1106,1117],"[Info.data.name, Info.data.url, updateContext]",[1179,1190],"[Info.data, save, updateContext]"]