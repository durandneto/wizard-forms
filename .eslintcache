[{"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/FamilyHistory/form.tsx":"1","/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/index.tsx":"2","/private/var/www/oberholtzermedia-form/src/App.tsx":"3","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/FamilyHistory/index.tsx":"4","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.initialState.ts":"5","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PersonalInfo.tsx":"6","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/index.ts":"7","/private/var/www/oberholtzermedia-form/src/v2/components/Agent/index.tsx":"8","/private/var/www/oberholtzermedia-form/src/actions/profile.ts":"9","/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/User.initialState.ts":"10","/private/var/www/oberholtzermedia-form/src/reportWebVitals.ts":"11","/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/index.tsx":"12","/private/var/www/oberholtzermedia-form/src/utils/index.ts":"13","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AditionalInfo.tsx":"14","/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/index.tsx":"15","/private/var/www/oberholtzermedia-form/src/context/Auth.Context.tsx":"16","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/MediCare2.tsx":"17","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Stepper.tsx":"18","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.functions.ts":"19","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AddressInfo.tsx":"20","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/index.tsx":"21","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/Quiz/index.tsx":"22","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/AvailableGenes/index.tsx":"23","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/TestDescription/index.tsx":"24","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/RCETransfer.tsx":"25"},{"size":8682,"mtime":1614131212858,"results":"26","hashOfConfig":"27"},{"size":3090,"mtime":1614022602144,"results":"28","hashOfConfig":"27"},{"size":2966,"mtime":1614107779603,"results":"29","hashOfConfig":"27"},{"size":3250,"mtime":1614117376976,"results":"30","hashOfConfig":"27"},{"size":9377,"mtime":1614185251739,"results":"31","hashOfConfig":"27"},{"size":9104,"mtime":1614110998634,"results":"32","hashOfConfig":"27"},{"size":3072,"mtime":1614131248539,"results":"33","hashOfConfig":"27"},{"size":5275,"mtime":1614106926189,"results":"34","hashOfConfig":"27"},{"size":2289,"mtime":1613977269014,"results":"35","hashOfConfig":"27"},{"size":2455,"mtime":1614127142658,"results":"36","hashOfConfig":"27"},{"size":425,"mtime":1613576502476,"results":"37","hashOfConfig":"27"},{"size":9947,"mtime":1613980921692,"results":"38","hashOfConfig":"27"},{"size":494,"mtime":1613677416518,"results":"39","hashOfConfig":"27"},{"size":10739,"mtime":1613978314575,"results":"40","hashOfConfig":"27"},{"size":5600,"mtime":1614105127294,"results":"41","hashOfConfig":"27"},{"size":982,"mtime":1613576453991,"results":"42","hashOfConfig":"27"},{"size":8309,"mtime":1614127815558,"results":"43","hashOfConfig":"27"},{"size":3092,"mtime":1614189802263,"results":"44","hashOfConfig":"27"},{"size":1083,"mtime":1614028847328,"results":"45","hashOfConfig":"27"},{"size":8128,"mtime":1613978601087,"results":"46","hashOfConfig":"27"},{"size":5295,"mtime":1614186520341,"results":"47","hashOfConfig":"27"},{"size":9168,"mtime":1614179884079,"results":"48","hashOfConfig":"27"},{"size":3218,"mtime":1614185286783,"results":"49","hashOfConfig":"27"},{"size":2130,"mtime":1614185970839,"results":"50","hashOfConfig":"27"},{"size":4325,"mtime":1614186630522,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"1j9z5km",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"65"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"65"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/FamilyHistory/form.tsx",["114","115","116","117","118"],"import React, { useContext, useState, useCallback } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AppContext } from \"../../../store\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormGroup,\n  FormHelperText,\n  InputLabel,\n  Select,\n  TextField,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n} from \"@material-ui/core\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\n\nimport { CancerFamilyMemberInterface } from \"../../../Reducer/Cancer/Cancer.model\";\nimport { Relationship } from \"../../../Reducer/Cancer/Cancer.initialState\";\ninterface FamilyMemberFormInterface {\n  familyMember: CancerFamilyMemberInterface;\n  onRemove: (id: string) => void;\n  onSave: (fm: CancerFamilyMemberInterface) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: `0 ${theme.spacing(3)}px`,\n    },\n    radio: {\n      flexDirection: \"row\",\n    },\n    action: {\n      justifyContent: \"flex-end\",\n      display: \"flex\",\n      marginTop: \"30px\",\n      borderBottom: \"solid 1px #ebebeb\",\n      borderRadius: \"20px\",\n      boxShadow: \"0px 4px 1px -3px #ebebeb\",\n      padding: \"20px\",\n    },\n    button: {\n      margin: \"0 15px\",\n    },\n  })\n);\n\nconst FamilyMemberForm = ({\n  familyMember,\n  onRemove,\n  onSave,\n}: FamilyMemberFormInterface) => {\n  const [FM, setFM] = useState<CancerFamilyMemberInterface>(familyMember);\n  const classes = useStyles();\n\n  const handleChange = useCallback(\n    (name: string, value: unknown) => {\n      console.log(\"handleChange\", name, value);\n      // if (event.name) {\n      setFM({\n        ...FM,\n        [name]: value,\n      });\n      // }\n    },\n    [FM]\n  );\n\n  console.log(\n    JSON.stringify(familyMember) === JSON.stringify(FM),\n    familyMember,\n    FM\n  );\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <h2>New Family Member {familyMember.id}</h2>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <TextField\n          id=\"outlined-full-width\"\n          label=\"Full name\"\n          required\n          // error={UserState.errorMessage.PersonalInfo.message.firstName !== \"\"}\n          style={{ margin: 8 }}\n          placeholder=\"Placeholder\"\n          helperText={\n            \"Required\"\n            // UserState.errorMessage.PersonalInfo.message.firstName !== \"\"\n            //   ? UserState.errorMessage.PersonalInfo.message.firstName\n            //   : \"Required\"\n          }\n          fullWidth\n          InputLabelProps={{\n            shrink: true,\n          }}\n          margin=\"dense\"\n          variant=\"outlined\"\n          value={FM.name}\n          name={\"name\"}\n          onChange={(e: any) => handleChange(e.target.name, e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12} sm={4} style={{ marginLeft: \"30px\" }}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"DOB\"\n            // error={UserState.errorMessage.PersonalInfo.message.birthDate}\n            format=\"MM/dd/yyyy\"\n            value={FM.dob}\n            name={\"dob\"}\n            onChange={(date: any, value: any) => {\n              handleChange(\"dob\", value);\n            }}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            KeyboardButtonProps={{\n              \"aria-label\": \"change date\",\n            }}\n          />\n        </MuiPickersUtilsProvider>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <FormControl\n          required\n          // disabled={loading}\n          className={classes.formControl}\n          // error={UserState.errorMessage.AddressInfo.message.state !== \"\"}\n        >\n          <InputLabel htmlFor=\"state-required\">Relationship</InputLabel>\n          <Select\n            native\n            name=\"relationship\"\n            inputProps={{\n              id: \"is-required\",\n              name: \"relationship\",\n            }}\n            value={FM.relationship}\n            onChange={(e: any) => handleChange(e.target.name, e.target.value)}\n          >\n            <option aria-label=\"None\" value=\"\" />\n            {Relationship.map((state: { value: string; label: string }) => (\n              <option\n                value={state.value}\n                key={`Cancer-FM-Relationship-${state.value}`}\n              >\n                {state.label}\n              </option>\n            ))}\n          </Select>\n          <FormHelperText>\n            Required\n            {/* {UserState.errorMessage.AddressInfo.message.state !== \"\"\n                  ? UserState.errorMessage.AddressInfo.message.state\n                  : \"Required\"} */}\n          </FormHelperText>\n        </FormControl>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <FormControl\n          component=\"fieldset\"\n          // error={UserState.errorMessage.PersonalInfo.message.gender}\n          className={classes.formControl}\n        >\n          <FormLabel component=\"legend\">Gender (*) </FormLabel>\n          <RadioGroup\n            aria-label=\"gender\"\n            name=\"gender\"\n            value={FM.gender}\n            onChange={(e: any) => handleChange(e.target.name, e.target.value)}\n            className={classes.radio}\n          >\n            <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\n            <FormControlLabel\n              value=\"famale\"\n              control={<Radio />}\n              label=\"Female\"\n            />\n          </RadioGroup>\n          <FormHelperText>\n            {/* {UserState.errorMessage.PersonalInfo.message.gender !== \"\"\n              ? UserState.errorMessage.PersonalInfo.message.gender\n              : \"Required\"} */}\n          </FormHelperText>\n        </FormControl>\n      </Grid>\n      <Grid item xs={12}>\n        <TextField\n          id=\"outlined-full-width\"\n          label=\"Diagnosis and/or Symptoms:\"\n          required\n          type={\"textarea\"}\n          rows={4}\n          // error={UserState.errorMessage.PersonalInfo.message.firstName !== \"\"}\n          style={{ margin: 8 }}\n          placeholder=\"Diagnosis and/or Symptoms:\"\n          helperText={\n            \"Required\"\n            // UserState.errorMessage.PersonalInfo.message.firstName !== \"\"\n            //   ? UserState.errorMessage.PersonalInfo.message.firstName\n            //   : \"Required\"\n          }\n          fullWidth\n          InputLabelProps={{\n            shrink: true,\n          }}\n          margin=\"dense\"\n          variant=\"outlined\"\n          value={FM.diagnosisOrSymptoms}\n          name={\"diagnosisOrSymptoms\"}\n          onChange={(e: any) => handleChange(e.target.name, e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={6}>\n        <TextField\n          id=\"outlined-full-width\"\n          label=\"Age of Onset\"\n          required\n          type={\"number\"}\n          rows={4}\n          // error={UserState.errorMessage.PersonalInfo.message.firstName !== \"\"}\n          style={{ margin: 8 }}\n          placeholder=\"Age of Onset\"\n          helperText={\n            \"Required\"\n            // UserState.errorMessage.PersonalInfo.message.firstName !== \"\"\n            //   ? UserState.errorMessage.PersonalInfo.message.firstName\n            //   : \"Required\"\n          }\n          fullWidth\n          InputLabelProps={{\n            shrink: true,\n          }}\n          margin=\"dense\"\n          variant=\"outlined\"\n          value={FM.ageOfDiagnosis}\n          name={\"ageOfDiagnosis\"}\n          onChange={(e: any) => handleChange(e.target.name, e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={6} spacing={3} className={classes.action}>\n        <Button\n          variant=\"outlined\"\n          color=\"secondary\"\n          size=\"small\"\n          className={classes.button}\n          startIcon={<RemoveCircleIcon />}\n          // disabled={UserState.success}\n          onClick={() => {\n            onRemove(familyMember.id);\n          }}\n        >\n          Remove\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          className={classes.button}\n          startIcon={<AddCircleOutlineIcon />}\n          disabled={JSON.stringify(familyMember) === JSON.stringify(FM)}\n          onClick={() => {\n            onSave(FM);\n          }}\n        >\n          Save\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\nexport default FamilyMemberForm;\n","/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/index.tsx",[],["119","120"],"/private/var/www/oberholtzermedia-form/src/App.tsx",["121","122","123","124","125","126","127","128","129","130"],"import React, { useContext, useReducer } from \"react\";\nimport reducer, { AppInterface, init } from \"./v2/Reducer/App\";\nimport { StepperInterface } from \"./v2/components/common/Stepper\";\nimport SteppReducer, {\n  initialStepper,\n  SET_CURRENT_STEP,\n} from \"./v2/Reducer/Stepper\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Agent from \"./v2/components/Agent\";\nimport MainStepper from \"./v2/components/common/Stepper\";\nimport { AppContext } from \"./v2/store\";\n\ninterface Props {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window?: () => Window;\n  children?: React.ReactElement;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    Container: {},\n    AppBar: {\n      backgroundColor: \"#39394d\",\n      color: \"#fff\",\n      height: \"40px\",\n      padding: \"0 24px\",\n      top: 0,\n      margin: 0,\n      alignItems: \"center\",\n      position: \"fixed\",\n      width: \"100%\",\n    },\n    AppHeader: {\n      color: \"#232333\",\n      height: \"64px\",\n      marginTop: \"40px\",\n      padding: \"0 24px\",\n      alignItems: \"center\",\n      border: \"solid 1px #e7e7e7\",\n      backgroundColor: \"#fff\",\n    },\n  })\n);\n\nfunction Counter({ count }: AppInterface) {\n  const [state, dispatch] = useReducer(reducer, { count }, init);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: \"reset\", payload: { count } })}>\n        Reset\n      </button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n    </>\n  );\n}\n\nexport default function App(props: Props) {\n  const classes = useStyles();\n  const { StepperState, StepperDispatch } = useContext(AppContext);\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Box className={classes.AppBar} my={2} display=\"flex\">\n        <div>Fixed bar</div>\n      </Box>{\" \"}\n      {/* \n      <Box className={classes.AppHeader} my={2} display=\"flex\">\n        <div>Header</div>\n      </Box> */}\n      {/* <Container className={classes.Container}> */}\n      {/* <Box my={2}> */}\n      <MainStepper\n        steps={StepperState.steps}\n        activeStep={StepperState.activeStep}\n        control={StepperState.control}\n        // onNext={(nextStep) => {\n        //   StepperDispatch({ type: SET_CURRENT_STEP, step: nextStep });\n        // }}\n        // onPrevious={(previoustStep) => {\n        //   StepperDispatch({ type: SET_CURRENT_STEP, step: previoustStep });\n        // }}\n        onFinished={() => {\n          alert(\"finished\");\n        }}\n      />\n      {/* </Box> */}\n      {/* </Container> */}\n    </React.Fragment>\n  );\n}\n",["131","132"],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/FamilyHistory/index.tsx",["133","134","135"],"import React, { useContext } from \"react\";\nimport Accordeon from \"../../common/Accordeon\";\nimport { Button, Grid, Paper, Typography } from \"@material-ui/core\";\nimport { AppContext } from \"../../../store\";\nimport FamilyMemberForm from \"./form\";\nimport {\n  CANCER_ADD_FAMILY_MEMBER,\n  CANCER_UPDATE,\n  CANCER_UPDATE_FAMILY_MEMBER,\n  CANCER_REMOVE_FAMILY_MEMBER,\n} from \"../../../Reducer/Cancer\";\nimport { CancerFamilyMemberInterface } from \"../../../Reducer/Cancer/Cancer.model\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nconst cancerList = [\n  {\n    value: \"Allogeneic\",\n    title: \"Allogeneic bone marrow or peripheral stem cell transplant\",\n    children: false,\n  },\n  { value: \"Chemotherapy\", title: \"Chemotherapy\", children: false },\n  { value: \"Radiation\", title: \"Radiation\", children: false },\n];\nconst Sugery = { value: \"Sugery\", title: \"Sugery\", children: true };\nexport default function PreviousTreatment() {\n  const { CancerState, CancerDispatch } = useContext(AppContext);\n  return (\n    <Accordeon noBorder title=\"Family History\" highlight initialClosed>\n      <Grid container spacing={3}>\n        {CancerState.FamilyMember.length < 3 && (\n          <>\n            {CancerState.FamilyMember.length === 0 && (\n              <Grid item xs={12} spacing={3}>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  You didn't add any Family Member yet, to add a new Family\n                  Member press the Button below.{\" \"}\n                </Typography>\n              </Grid>\n            )}\n            <Grid item xs={12} spacing={3}>\n              <Button\n                startIcon={<AddCircleOutlineIcon />}\n                size=\"small\"\n                onClick={() => {\n                  CancerDispatch({\n                    type: CANCER_ADD_FAMILY_MEMBER,\n                  });\n                }}\n                variant=\"outlined\"\n                color=\"primary\"\n              >\n                Add new family member\n              </Button>\n            </Grid>\n          </>\n        )}\n        {CancerState.FamilyMember.map(\n          (F: CancerFamilyMemberInterface, index: number) => (\n            <Accordeon\n              title={`Family Member ${index}`}\n              key={`Family-Member-${F.id}`}\n              onChange={(value: any) => {\n                if (value === \"Yes\") {\n                  debugger;\n                } else {\n                  debugger;\n                  CancerDispatch({\n                    type: CANCER_UPDATE,\n                    key: \"sugery\",\n                    value: \"\",\n                  });\n                }\n              }}\n            >\n              <FamilyMemberForm\n                familyMember={F}\n                onRemove={(id: string) => {\n                  CancerDispatch({\n                    type: CANCER_REMOVE_FAMILY_MEMBER,\n                    id,\n                  });\n                }}\n                onSave={(fm: CancerFamilyMemberInterface) => {\n                  CancerDispatch({\n                    type: CANCER_UPDATE_FAMILY_MEMBER,\n                    fm,\n                  });\n                }}\n              />\n            </Accordeon>\n          )\n        )}\n      </Grid>\n    </Accordeon>\n  );\n}\n",["136","137"],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.initialState.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PersonalInfo.tsx",[],["138","139"],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/index.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/Agent/index.tsx",["140","141","142","143"],"/private/var/www/oberholtzermedia-form/src/actions/profile.ts",["144","145","146","147"],"import axios from \"axios\";\nimport { token } from \"../context/Auth.Context\";\nimport { format, compareAsc } from \"date-fns\";\nimport {\n  ProfileAddressDataInterface,\n  ProfileMedicareDataInterface,\n  ProfileUserDataInterface,\n} from \"../context/Profile.Contex\";\nimport {\n  UserAddressInfoDataInterface,\n  UserInterface,\n} from \"../v2/Reducer/User/User.model\";\n\nexport const BASE_URL =\n  \"http://ec2co-ecsel-uixxpxra75ed-1580772910.us-west-2.elb.amazonaws.com\";\n\nexport const validateAddress = (Address: UserAddressInfoDataInterface) => {\n  const axiosConfig = {\n    headers: {\n      \"Content-Type\": \"application/json;charset=UTF-8\",\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  const data = `?street=${Address.street}&street2=${Address.street2}&city=${Address.city}&state=${Address.state}&zipcode=${Address.zipcode}`;\n  return axios\n    .get(`${BASE_URL}/address-validation/${data}`, axiosConfig)\n    .then((r: any) => r.data);\n};\n\nexport const checkMedicare = (User: UserInterface) => {\n  const axiosConfig = {\n    headers: {\n      \"Content-Type\": \"application/json;charset=UTF-8\",\n      Authorization: `Bearer ${token}`,\n    },\n  };\n  if (!User.PersonalInfo.birthDate) {\n    // eslint-disable-next-line no-throw-literal\n    throw \"Invalid User DOB, Check Personal info section.\";\n  }\n  if (!User.PersonalInfo.firstName) {\n    // eslint-disable-next-line no-throw-literal\n    throw \"Invalid User firstname, Check Personal info section.\";\n  }\n  if (!User.PersonalInfo.lastName) {\n    // eslint-disable-next-line no-throw-literal\n    throw \"Invalid User lastname, Check Personal info section.\";\n  }\n\n  const DOB = new Date(User.PersonalInfo.birthDate);\n  // ?memberID=9dx2tp7pc18&Patient_DOB=1%2F22%2F1938&Patient_First=Rodolfo&Patient_Last=Gaytan&payerCode=00007&Provider_LastName=Fastflow%20Marketing&Provider_NPI=1609388842\n  const data = `?memberID=${User.MediCare.memberID}&Patient_DOB=${format(\n    new Date(DOB),\n    \"MM/dd/yyyy\"\n  )}&Patient_First=${User.PersonalInfo.firstName}&Patient_Last=${\n    User.PersonalInfo.lastName\n  }&payerCode=${User.MediCare.payerCode}&Provider_LastName=${\n    User.MediCare.Provider_LastName\n  }&Provider_NPI=${User.MediCare.Provider_NPI}`;\n  return axios\n    .get(`${BASE_URL}/medicare/${data}`, axiosConfig)\n    .then((r: any) => r.data);\n};\n","/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/User.initialState.ts",[],"/private/var/www/oberholtzermedia-form/src/reportWebVitals.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/utils/index.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AditionalInfo.tsx",["148","149","150","151","152","153","154","155","156","157"],"import React, { useContext, useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AppContext } from \"../../../store\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {\n  Button,\n  Checkbox,\n  FormGroup,\n  FormHelperText,\n  InputLabel,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport {\n  USER_UPDATE,\n  USER_SET_ERROR_ADITIONAL_INFO,\n  USER_UPDATE_ADITIONAL_INFO,\n} from \"../../../Reducer/User\";\nimport { EthnicityList } from \"../../../Reducer/User/User.initialState\";\nimport InputPhone from \"../../common/InputPhone\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: `0 ${theme.spacing(3)}px`,\n      width: \"95%\",\n    },\n    radio: {\n      flexDirection: \"row\",\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    button: {\n      margin: theme.spacing(1, 1, 0, 0),\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\nexport default function UserAditionalInformationInterface() {\n  const classes = useStyles();\n  const { UserState, UserDispatch } = useContext(AppContext);\n  const [internalError, setErr] = useState<string>(\"\");\n  const handleDateChange = (date: Date | null) => {\n    UserDispatch({\n      type: USER_UPDATE,\n      key: \"birthDate\",\n      value: date,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    console.log(\"handleChange\", event);\n    UserDispatch({\n      type: USER_UPDATE_ADITIONAL_INFO,\n      key: (event.target as HTMLInputElement).name,\n      value: (event.target as HTMLInputElement).value,\n    });\n\n    //     previousTests: Array<string>;\n    //   salivaSwabTest?: boolean;\n    //   isAlzheimerorDementiatype?: boolean;\n    //   isNursingLiving?: boolean;\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid container className={classes.root} spacing={2}>\n        {internalError ? (\n          <Grid item xs={12}>\n            <Alert severity=\"error\">{internalError}</Alert>\n          </Grid>\n        ) : (\n          <>\n            {UserState.errorMessage.AditionalInformation.success && (\n              <Grid item xs={12}>\n                <Alert severity=\"success\">\n                  This section was validated successfully .\n                </Alert>\n              </Grid>\n            )}\n          </>\n        )}\n        <Grid item xs={12}>\n          <FormControl\n            required\n            className={classes.formControl}\n            error={\n              UserState.errorMessage.AditionalInformation.message\n                .salivaSwabTest !== \"\"\n            }\n          >\n            <InputLabel htmlFor=\"salivaSwabTest-required\">\n              Have you ever taken a Saliva Swab DNA test?\n            </InputLabel>\n            <Select\n              native\n              name=\"salivaSwabTest\"\n              inputProps={{\n                id: \"is-required\",\n              }}\n              onChange={handleChange}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <option value={\"Yes\"}>Yes</option>\n              <option value={\"No\"}>No</option>\n            </Select>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message\n                .salivaSwabTest !== \"\"\n                ? UserState.errorMessage.AditionalInformation.message\n                    .salivaSwabTest\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl\n            required\n            className={classes.formControl}\n            error={\n              UserState.errorMessage.AditionalInformation.message\n                .isNursingLiving !== \"\"\n            }\n          >\n            <InputLabel htmlFor=\"isNursingLiving-required\">\n              Currenly living in a nursing home or assisted living facility?\n            </InputLabel>\n            <Select\n              native\n              name=\"isNursingLiving\"\n              inputProps={{\n                id: \"is-required\",\n              }}\n              onChange={handleChange}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <option value={\"Yes\"}>Yes</option>\n              <option value={\"No\"}>No</option>\n            </Select>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message\n                .isNursingLiving !== \"\"\n                ? UserState.errorMessage.AditionalInformation.message\n                    .isNursingLiving\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl\n            required\n            className={classes.formControl}\n            error={\n              UserState.errorMessage.AditionalInformation.message\n                .isAlzheimerorDementiatype !== \"\"\n            }\n          >\n            <InputLabel htmlFor=\"isAlzheimerorDementiatype-required\">\n              Do you have Alzheimer's or Dementia?\n            </InputLabel>\n            <Select\n              native\n              name=\"isAlzheimerorDementiatype\"\n              inputProps={{\n                id: \"is-required\",\n              }}\n              onChange={handleChange}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <option value={\"Yes\"}>Yes</option>\n              <option value={\"No\"}>No</option>\n            </Select>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message\n                .isAlzheimerorDementiatype !== \"\"\n                ? UserState.errorMessage.AditionalInformation.message\n                    .isAlzheimerorDementiatype\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControl\n            required\n            error={\n              UserState.errorMessage.AditionalInformation.message\n                .previousTests !== \"\"\n            }\n            component=\"fieldset\"\n            className={classes.formControl}\n          >\n            <FormLabel component=\"legend\">Previous Generic Test</FormLabel>\n            <FormGroup>\n              {[\"Cancer\", \"Diabetes\", \"Cardio\"].map(\n                (item: string, index: number) => (\n                  <FormControlLabel\n                    key={`form-item-PreviousGenericTest${index}-${item}`}\n                    control={\n                      <Checkbox\n                        checked={UserState.AditionalInformation.previousTests.includes(\n                          item\n                        )}\n                        value={item}\n                        onChange={(\n                          event: React.ChangeEvent<{\n                            checked?: boolean | undefined;\n                            value: unknown;\n                          }>\n                        ) => {\n                          if (event.target.checked) {\n                            UserDispatch({\n                              type: USER_UPDATE_ADITIONAL_INFO,\n                              key: \"previousTests\",\n                              value: [\n                                ...UserState.AditionalInformation.previousTests,\n                                event.target.value,\n                              ],\n                            });\n                          } else {\n                            const index = UserState.AditionalInformation.previousTests.findIndex(\n                              (i: string) => i === event.target.value\n                            );\n                            const newPreviousTests =\n                              UserState.AditionalInformation.previousTests;\n                            newPreviousTests.splice(index, 1);\n\n                            UserDispatch({\n                              type: USER_UPDATE_ADITIONAL_INFO,\n                              key: \"previousTests\",\n                              value: newPreviousTests,\n                            });\n                          }\n                        }}\n                        name={item}\n                      />\n                    }\n                    label={item}\n                  />\n                )\n              )}\n            </FormGroup>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message\n                .previousTests !== \"\"\n                ? UserState.errorMessage.AditionalInformation.message\n                    .previousTests\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          {/* <FormControl\n            component=\"fieldset\"\n            error={\n              UserState.errorMessage.AditionalInformation.message.ethnicity\n            }\n            className={classes.formControl}\n          >\n            <FormLabel component=\"legend\">Ethnicity (*) </FormLabel>\n            <RadioGroup\n              aria-label=\"ethnicity\"\n              name=\"ethnicity\"\n              value={UserState.AditionalInformation.ethnicity.value}\n              onChange={handleChange}\n              className={classes.radio}\n            >\n              {EthnicityList.map((et: string, key: number) => (\n                <FormControlLabel\n                  value={et}\n                  key={et}\n                  control={<Radio />}\n                  label={et}\n                />\n              ))}\n            </RadioGroup>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message.ethnicity !==\n              \"\"\n                ? UserState.errorMessage.AditionalInformation.message.ethnicity\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl> */}\n        </Grid>\n        {/* // /////////////////////// */}\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          onClick={() => {\n            UserDispatch({ type: USER_SET_ERROR_ADITIONAL_INFO });\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}\n        >\n          Save\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/context/Auth.Context.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/MediCare2.tsx",["158","159"],"import React, { useContext, useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AppContext } from \"../../../store\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport { Button, TextField } from \"@material-ui/core\";\n\nimport {\n  USER_SET_ERROR_MEDI_CARE,\n  USER_UPDATE_MEDICARE_INFO,\n} from \"../../../Reducer/User\";\nimport { checkMedicare } from \"../../../../actions/profile\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: `0 ${theme.spacing(3)}px`,\n      width: \"95%\",\n    },\n    radio: {\n      flexDirection: \"row\",\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    button: {\n      margin: theme.spacing(1, 1, 0, 0),\n    },\n    table: {\n      minWidth: 650,\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\nfunction createData(name: string, value: any) {\n  return { name, value };\n}\n\nconst rows = [\n  createData(\"Frozen yoghurt\", 159),\n  createData(\"Ice cream sandwich\", 237),\n  createData(\"Eclair\", 262),\n  createData(\"Cupcake\", 305),\n  createData(\"Gingerbread\", 356),\n];\n// The first commit of Material-UI\n// const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n//   new Date(UserState.MediCare.firstName)\n// );\n\nexport default function UserMedicareForm() {\n  const classes = useStyles();\n  const [loading, setLoading] = useState<boolean>(false);\n  const { UserState, UserDispatch } = useContext(AppContext);\n  const [internalError, setErr] = useState<string>(\"\");\n\n  const handleChange = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    console.log(\"handleChange\", event);\n    UserDispatch({\n      type: USER_UPDATE_MEDICARE_INFO,\n      key: (event.target as HTMLInputElement).name,\n      value: (event.target as HTMLInputElement).value,\n    });\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid container className={classes.root} spacing={2}>\n        {internalError ? (\n          <Grid item xs={12}>\n            <Alert severity=\"error\">{internalError}</Alert>\n          </Grid>\n        ) : (\n          <>\n            {UserState.errorMessage.MediCare.success && (\n              <Grid item xs={12}>\n                <Alert severity=\"success\">\n                  This section was validated successfully .\n                </Alert>\n              </Grid>\n            )}\n          </>\n        )}\n\n        <Grid item xs={12} sm={6}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"memberID\"\n            error={\n              UserState.errorMessage.MediCare.message.memberID !== \"\" ||\n              internalError !== \"\"\n            }\n            style={{ margin: 8 }}\n            placeholder=\"memberID\"\n            helperText={\n              UserState.errorMessage.MediCare.message.memberID !== \"\"\n                ? UserState.errorMessage.MediCare.message.memberID\n                : internalError\n                ? internalError\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.MediCare.memberID}\n            name={\"memberID\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        {/* // /////////////////////// */}\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          onClick={() => {\n            // UserDispatch({ type: USER_SET_ERROR_MEDI_CARE });\n            if (!loading) {\n              setLoading(true);\n              try {\n                if (UserState.MediCare.memberID === \"\") {\n                  UserDispatch({\n                    type: USER_SET_ERROR_MEDI_CARE,\n                  });\n                  setLoading(false);\n                } else\n                  checkMedicare(UserState)\n                    .then((r: any) => {\n                      setErr(\"\");\n                      UserDispatch({\n                        type: USER_UPDATE_MEDICARE_INFO,\n                        key: \"extendedMedicareLeadData\",\n                        value: r || {},\n                      });\n                      UserDispatch({ type: USER_SET_ERROR_MEDI_CARE });\n                      setLoading(false);\n                    })\n                    .catch((err: any) => {\n                      setErr(err);\n                      UserDispatch({\n                        type: USER_SET_ERROR_MEDI_CARE,\n                      });\n                      UserDispatch({\n                        type: USER_UPDATE_MEDICARE_INFO,\n                        key: \"extendedMedicareLeadData\",\n                        value: {},\n                      });\n                      setLoading(false);\n                    });\n              } catch (err) {\n                setErr(err);\n                UserDispatch({ type: USER_SET_ERROR_MEDI_CARE });\n                setLoading(false);\n              }\n            }\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}\n        >\n          Save\n        </Button>\n      </Grid>\n      {UserState.MediCare.extendedMedicareLeadData && (\n        <TableContainer component={Paper}>\n          <Table\n            className={classes.table}\n            size=\"small\"\n            aria-label=\"a dense table\"\n          >\n            <TableBody>\n              {Object.entries(UserState.MediCare.extendedMedicareLeadData).map(\n                (row: [string, any]) => {\n                  const [key, value] = row;\n                  console.log(row);\n                  switch (true) {\n                    case key === \"APIResponseMessage\":\n                    case key === \"EDIErrorMessage\":\n                    case key === \"DisclaimerMessage\":\n                    case key === \"PayerName\":\n                    case key === \"DOS\":\n                    case key === \"AddtionalInfo\":\n                      return (\n                        <TableRow key={key}>\n                          <TableCell component=\"th\" scope=\"row\">\n                            {key}\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <span\n                              dangerouslySetInnerHTML={{ __html: value }}\n                            ></span>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    case key === \"MedicareInfoSummary\":\n                      return (\n                        <>\n                          {UserState.MediCare.extendedMedicareLeadData\n                            .MedicareInfoSummary &&\n                            Object.entries(\n                              UserState.MediCare.extendedMedicareLeadData\n                                .MedicareInfoSummary\n                            )\n                              .filter((r: any) => typeof r[1] === \"string\")\n                              .map((row2: [string, any]) => (\n                                <TableRow key={row2[0]}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                    {row2[0]}\n                                  </TableCell>\n                                  <TableCell align=\"right\">\n                                    <span\n                                      dangerouslySetInnerHTML={{\n                                        __html: row2[1],\n                                      }}\n                                    ></span>\n                                  </TableCell>\n                                </TableRow>\n                              ))}\n                        </>\n                      );\n                  }\n                }\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </Grid>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Stepper.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.functions.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AddressInfo.tsx",["160","161","162","163","164","165","166","167","168","169","170"],"import React, { useContext, useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AppContext } from \"../../../store\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {\n  Button,\n  Checkbox,\n  FormGroup,\n  FormHelperText,\n  InputLabel,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport {\n  USER_SET_ERROR_ADDRESS_INFO,\n  USER_UPDATE_ADDRESS_INFO,\n} from \"../../../Reducer/User\";\nimport { AddressStatesList } from \"../../../Reducer/User/User.initialState\";\nimport InputPhone from \"../../common/InputPhone\";\nimport { validateAddress } from \"../../../../actions/profile\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: `0 ${theme.spacing(3)}px`,\n      width: \"95%\",\n    },\n    radio: {\n      flexDirection: \"row\",\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    button: {\n      margin: theme.spacing(1, 1, 0, 0),\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\n// The first commit of Material-UI\n// const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n//   new Date(UserState.AddressInfo.firstName)\n// );\n\nexport default function UserAddressInfoForm() {\n  const classes = useStyles();\n  const [loading, setLoading] = useState<boolean>(false);\n  const { UserState, UserDispatch } = useContext(AppContext);\n  const [internalError, setErr] = useState<string>(\"\");\n\n  const handleDateChange = (date: Date | null) => {\n    UserDispatch({\n      type: USER_UPDATE_ADDRESS_INFO,\n      key: \"birthDate\",\n      value: date,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    console.log(\"handleChange\", event);\n    UserDispatch({\n      type: USER_UPDATE_ADDRESS_INFO,\n      key: (event.target as HTMLInputElement).name,\n      value: (event.target as HTMLInputElement).value,\n    });\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid container className={classes.root} spacing={2}>\n        {internalError ? (\n          <Grid item xs={12}>\n            <Alert severity=\"error\">{internalError}</Alert>\n          </Grid>\n        ) : (\n          <>\n            {UserState.errorMessage.AddressInfo.success && (\n              <Grid item xs={12}>\n                <Alert severity=\"success\">\n                  This section was validated successfully .\n                </Alert>\n              </Grid>\n            )}\n          </>\n        )}\n        <Grid item xs={12} sm={6}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"Street\"\n            error={UserState.errorMessage.AddressInfo.message.street !== \"\"}\n            style={{ margin: 8 }}\n            placeholder=\"Street\"\n            helperText={\n              UserState.errorMessage.AddressInfo.message.street !== \"\"\n                ? UserState.errorMessage.AddressInfo.message.street\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.AddressInfo.street}\n            name={\"street\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            disabled={loading}\n            id=\"outlined-full-width\"\n            label=\"Apartament/ Unit\"\n            style={{ margin: 8 }}\n            placeholder=\"Apartament/ Unit\"\n            helperText={\"optional\"}\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.AddressInfo.street2}\n            name={\"street2\"}\n            onChange={handleChange}\n          />\n        </Grid>\n\n        <Grid item xs={12} sm={4}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"City\"\n            error={UserState.errorMessage.AddressInfo.message.city !== \"\"}\n            style={{ margin: 8 }}\n            placeholder=\"City\"\n            helperText={\n              UserState.errorMessage.AddressInfo.message.city !== \"\"\n                ? UserState.errorMessage.AddressInfo.message.city\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.AddressInfo.city}\n            name={\"city\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Grid item xs={12}>\n            <FormControl\n              required\n              disabled={loading}\n              className={classes.formControl}\n              error={UserState.errorMessage.AddressInfo.message.state !== \"\"}\n            >\n              <InputLabel htmlFor=\"state-required\">State</InputLabel>\n              <Select\n                native\n                name=\"state\"\n                inputProps={{\n                  id: \"is-required\",\n                  name: \"state\",\n                }}\n                onChange={handleChange}\n              >\n                <option aria-label=\"None\" value=\"\" />\n                {AddressStatesList.map((state: string) => (\n                  <option value={state} key={`AddressStatesList-${state}`}>\n                    {state}\n                  </option>\n                ))}\n              </Select>\n              <FormHelperText>\n                {UserState.errorMessage.AddressInfo.message.state !== \"\"\n                  ? UserState.errorMessage.AddressInfo.message.state\n                  : \"Required\"}\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"Zipcode\"\n            error={UserState.errorMessage.AddressInfo.message.zipcode !== \"\"}\n            style={{ margin: 8 }}\n            placeholder=\"Zipcode\"\n            helperText={\n              UserState.errorMessage.AddressInfo.message.zipcode !== \"\"\n                ? UserState.errorMessage.AddressInfo.message.zipcode\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.AddressInfo.zipcode}\n            name={\"zipcode\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        {/* // /////////////////////// */}\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          onClick={() => {\n            // UserDispatch({ type: USER_SET_ERROR_ADDRESS_INFO });\n            if (!loading) {\n              setLoading(true);\n              validateAddress(UserState.AddressInfo)\n                .then((r: any) => {\n                  setErr(\"\");\n                  UserDispatch({ type: USER_SET_ERROR_ADDRESS_INFO });\n                  setLoading(false);\n                })\n                .catch((err: any) => {\n                  UserDispatch({ type: USER_SET_ERROR_ADDRESS_INFO });\n                  setErr(err.response.data.message);\n                  setLoading(false);\n                });\n            }\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}\n        >\n          Save\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/index.tsx",["171","172","173","174","175","176","177"],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/Quiz/index.tsx",["178","179","180","181"],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/AvailableGenes/index.tsx",["182","183","184","185","186","187","188"],"import React, { useContext } from \"react\";\nimport Accordeon from \"../../common/Accordeon\";\nimport {\n  Button,\n  Grid,\n  Checkbox,\n  Typography,\n  FormControl,\n  FormGroup,\n  FormControlLabel,\n} from \"@material-ui/core\";\n\nimport { AppContext } from \"../../../store\";\nimport FamilyMemberForm from \"./../FamilyHistory/form\";\nimport {\n  CANCER_ADD_FAMILY_MEMBER,\n  CANCER_UPDATE,\n  CANCER_UPDATE_FAMILY_MEMBER,\n  CANCER_REMOVE_FAMILY_MEMBER,\n} from \"../../../Reducer/Cancer\";\nimport { CancerFamilyMemberInterface } from \"../../../Reducer/Cancer/Cancer.model\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { availableGenesCancerList } from \"../../../Reducer/Cancer/Cancer.initialState\";\nexport default function PreviousTreatment() {\n  const { CancerState, CancerDispatch } = useContext(AppContext);\n\n  const handleKeyValueChange = (key: string, value: any) => {\n    CancerDispatch({\n      type: CANCER_UPDATE,\n      key,\n      value,\n    });\n  };\n  return (\n    <Accordeon\n      noBorder\n      title=\"Selects all available genes\"\n      highlight\n      initialClosed\n    >\n      <Grid container spacing={3}>\n        <FormControl\n          required\n          // error={error}\n          component=\"fieldset\"\n          // className={classes.formControl}\n        >\n          <FormGroup>\n            {availableGenesCancerList.map((item) => {\n              const includes = CancerState.Diagnostic.comprehensiveCancer.includes(\n                item.title\n              );\n              return (\n                <>\n                  <Grid item xs={12}>\n                    <Typography variant=\"caption\">\n                      {item.description}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={includes}\n                          onChange={(e: any) => {\n                            if (includes) {\n                              const index = CancerState.Diagnostic.comprehensiveCancer.findIndex(\n                                (i: string) => i === item.title\n                              );\n                              const newPreviousTests =\n                                CancerState.Diagnostic.comprehensiveCancer;\n                              newPreviousTests.splice(index, 1);\n                              handleKeyValueChange(\n                                \"comprehensiveCancer\",\n                                newPreviousTests\n                              );\n                            } else {\n                              handleKeyValueChange(\"comprehensiveCancer\", [\n                                ...CancerState.Diagnostic.comprehensiveCancer,\n                                item.title,\n                              ]);\n                            }\n                          }}\n                        />\n                      }\n                      label={item.title}\n                    />\n                  </Grid>\n                  <br />\n                </>\n              );\n            })}\n          </FormGroup>\n        </FormControl>\n      </Grid>\n    </Accordeon>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/TestDescription/index.tsx",["189","190","191","192","193"],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/RCETransfer.tsx",["194","195","196","197","198","199","200","201"],{"ruleId":"202","severity":1,"message":"203","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":27},{"ruleId":"202","severity":1,"message":"206","line":4,"column":10,"nodeType":"204","messageId":"205","endLine":4,"endColumn":20},{"ruleId":"202","severity":1,"message":"207","line":5,"column":8,"nodeType":"204","messageId":"205","endLine":5,"endColumn":13},{"ruleId":"202","severity":1,"message":"208","line":10,"column":3,"nodeType":"204","messageId":"205","endLine":10,"endColumn":11},{"ruleId":"202","severity":1,"message":"209","line":12,"column":3,"nodeType":"204","messageId":"205","endLine":12,"endColumn":12},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"202","severity":1,"message":"214","line":3,"column":10,"nodeType":"204","messageId":"205","endLine":3,"endColumn":26},{"ruleId":"202","severity":1,"message":"215","line":4,"column":8,"nodeType":"204","messageId":"205","endLine":4,"endColumn":20},{"ruleId":"202","severity":1,"message":"216","line":5,"column":3,"nodeType":"204","messageId":"205","endLine":5,"endColumn":17},{"ruleId":"202","severity":1,"message":"217","line":6,"column":3,"nodeType":"204","messageId":"205","endLine":6,"endColumn":19},{"ruleId":"202","severity":1,"message":"218","line":9,"column":8,"nodeType":"204","messageId":"205","endLine":9,"endColumn":24},{"ruleId":"202","severity":1,"message":"219","line":11,"column":8,"nodeType":"204","messageId":"205","endLine":11,"endColumn":17},{"ruleId":"202","severity":1,"message":"220","line":12,"column":8,"nodeType":"204","messageId":"205","endLine":12,"endColumn":13},{"ruleId":"202","severity":1,"message":"221","line":14,"column":8,"nodeType":"204","messageId":"205","endLine":14,"endColumn":13},{"ruleId":"202","severity":1,"message":"222","line":53,"column":10,"nodeType":"204","messageId":"205","endLine":53,"endColumn":17},{"ruleId":"202","severity":1,"message":"223","line":69,"column":25,"nodeType":"204","messageId":"205","endLine":69,"endColumn":40},{"ruleId":"210","replacedBy":"224"},{"ruleId":"212","replacedBy":"225"},{"ruleId":"202","severity":1,"message":"226","line":3,"column":24,"nodeType":"204","messageId":"205","endLine":3,"endColumn":29},{"ruleId":"202","severity":1,"message":"227","line":14,"column":7,"nodeType":"204","messageId":"205","endLine":14,"endColumn":17},{"ruleId":"202","severity":1,"message":"228","line":23,"column":7,"nodeType":"204","messageId":"205","endLine":23,"endColumn":13},{"ruleId":"210","replacedBy":"229"},{"ruleId":"212","replacedBy":"230"},{"ruleId":"210","replacedBy":"231"},{"ruleId":"212","replacedBy":"232"},{"ruleId":"202","severity":1,"message":"233","line":1,"column":40,"nodeType":"204","messageId":"205","endLine":1,"endColumn":50},{"ruleId":"202","severity":1,"message":"226","line":7,"column":24,"nodeType":"204","messageId":"205","endLine":7,"endColumn":29},{"ruleId":"234","severity":1,"message":"235","line":66,"column":6,"nodeType":"236","endLine":66,"endColumn":24,"suggestions":"237"},{"ruleId":"234","severity":1,"message":"235","line":73,"column":6,"nodeType":"236","endLine":73,"endColumn":26,"suggestions":"238"},{"ruleId":"202","severity":1,"message":"239","line":3,"column":18,"nodeType":"204","messageId":"205","endLine":3,"endColumn":28},{"ruleId":"202","severity":1,"message":"240","line":5,"column":3,"nodeType":"204","messageId":"205","endLine":5,"endColumn":30},{"ruleId":"202","severity":1,"message":"241","line":6,"column":3,"nodeType":"204","messageId":"205","endLine":6,"endColumn":31},{"ruleId":"202","severity":1,"message":"242","line":7,"column":3,"nodeType":"204","messageId":"205","endLine":7,"endColumn":27},{"ruleId":"202","severity":1,"message":"243","line":13,"column":3,"nodeType":"204","messageId":"205","endLine":13,"endColumn":12},{"ruleId":"202","severity":1,"message":"244","line":16,"column":8,"nodeType":"204","messageId":"205","endLine":16,"endColumn":20},{"ruleId":"202","severity":1,"message":"245","line":18,"column":3,"nodeType":"204","messageId":"205","endLine":18,"endColumn":21},{"ruleId":"202","severity":1,"message":"246","line":19,"column":3,"nodeType":"204","messageId":"205","endLine":19,"endColumn":26},{"ruleId":"202","severity":1,"message":"247","line":22,"column":8,"nodeType":"204","messageId":"205","endLine":22,"endColumn":13},{"ruleId":"202","severity":1,"message":"248","line":23,"column":8,"nodeType":"204","messageId":"205","endLine":23,"endColumn":18},{"ruleId":"202","severity":1,"message":"249","line":32,"column":10,"nodeType":"204","messageId":"205","endLine":32,"endColumn":23},{"ruleId":"202","severity":1,"message":"250","line":33,"column":8,"nodeType":"204","messageId":"205","endLine":33,"endColumn":18},{"ruleId":"202","severity":1,"message":"251","line":63,"column":25,"nodeType":"204","messageId":"205","endLine":63,"endColumn":31},{"ruleId":"202","severity":1,"message":"252","line":64,"column":9,"nodeType":"204","messageId":"205","endLine":64,"endColumn":25},{"ruleId":"202","severity":1,"message":"253","line":53,"column":7,"nodeType":"204","messageId":"205","endLine":53,"endColumn":11},{"ruleId":"254","severity":1,"message":"255","line":191,"column":38,"nodeType":"256","messageId":"257","endLine":191,"endColumn":40},{"ruleId":"202","severity":1,"message":"208","line":8,"column":3,"nodeType":"204","messageId":"205","endLine":8,"endColumn":11},{"ruleId":"202","severity":1,"message":"209","line":9,"column":3,"nodeType":"204","messageId":"205","endLine":9,"endColumn":12},{"ruleId":"202","severity":1,"message":"244","line":16,"column":8,"nodeType":"204","messageId":"205","endLine":16,"endColumn":20},{"ruleId":"202","severity":1,"message":"245","line":18,"column":3,"nodeType":"204","messageId":"205","endLine":18,"endColumn":21},{"ruleId":"202","severity":1,"message":"246","line":19,"column":3,"nodeType":"204","messageId":"205","endLine":19,"endColumn":26},{"ruleId":"202","severity":1,"message":"247","line":22,"column":8,"nodeType":"204","messageId":"205","endLine":22,"endColumn":13},{"ruleId":"202","severity":1,"message":"248","line":23,"column":8,"nodeType":"204","messageId":"205","endLine":23,"endColumn":18},{"ruleId":"202","severity":1,"message":"258","line":24,"column":8,"nodeType":"204","messageId":"205","endLine":24,"endColumn":24},{"ruleId":"202","severity":1,"message":"259","line":26,"column":8,"nodeType":"204","messageId":"205","endLine":26,"endColumn":17},{"ruleId":"202","severity":1,"message":"250","line":32,"column":8,"nodeType":"204","messageId":"205","endLine":32,"endColumn":18},{"ruleId":"202","severity":1,"message":"252","line":71,"column":9,"nodeType":"204","messageId":"205","endLine":71,"endColumn":25},{"ruleId":"202","severity":1,"message":"233","line":1,"column":40,"nodeType":"204","messageId":"205","endLine":1,"endColumn":50},{"ruleId":"202","severity":1,"message":"226","line":6,"column":24,"nodeType":"204","messageId":"205","endLine":6,"endColumn":29},{"ruleId":"202","severity":1,"message":"260","line":20,"column":8,"nodeType":"204","messageId":"205","endLine":20,"endColumn":22},{"ruleId":"202","severity":1,"message":"261","line":21,"column":8,"nodeType":"204","messageId":"205","endLine":21,"endColumn":23},{"ruleId":"202","severity":1,"message":"262","line":58,"column":9,"nodeType":"204","messageId":"205","endLine":58,"endColumn":21},{"ruleId":"234","severity":1,"message":"235","line":82,"column":6,"nodeType":"236","endLine":82,"endColumn":25,"suggestions":"263"},{"ruleId":"234","severity":1,"message":"235","line":89,"column":6,"nodeType":"236","endLine":89,"endColumn":27,"suggestions":"264"},{"ruleId":"202","severity":1,"message":"265","line":5,"column":3,"nodeType":"204","messageId":"205","endLine":5,"endColumn":9},{"ruleId":"202","severity":1,"message":"226","line":10,"column":3,"nodeType":"204","messageId":"205","endLine":10,"endColumn":8},{"ruleId":"202","severity":1,"message":"266","line":14,"column":3,"nodeType":"204","messageId":"205","endLine":14,"endColumn":13},{"ruleId":"202","severity":1,"message":"267","line":17,"column":10,"nodeType":"204","messageId":"205","endLine":17,"endColumn":40},{"ruleId":"202","severity":1,"message":"265","line":4,"column":3,"nodeType":"204","messageId":"205","endLine":4,"endColumn":9},{"ruleId":"202","severity":1,"message":"268","line":14,"column":8,"nodeType":"204","messageId":"205","endLine":14,"endColumn":24},{"ruleId":"202","severity":1,"message":"269","line":16,"column":3,"nodeType":"204","messageId":"205","endLine":16,"endColumn":27},{"ruleId":"202","severity":1,"message":"270","line":18,"column":3,"nodeType":"204","messageId":"205","endLine":18,"endColumn":30},{"ruleId":"202","severity":1,"message":"271","line":19,"column":3,"nodeType":"204","messageId":"205","endLine":19,"endColumn":30},{"ruleId":"202","severity":1,"message":"272","line":21,"column":10,"nodeType":"204","messageId":"205","endLine":21,"endColumn":37},{"ruleId":"202","severity":1,"message":"273","line":22,"column":8,"nodeType":"204","messageId":"205","endLine":22,"endColumn":28},{"ruleId":"202","severity":1,"message":"259","line":6,"column":8,"nodeType":"204","messageId":"205","endLine":6,"endColumn":17},{"ruleId":"202","severity":1,"message":"266","line":7,"column":16,"nodeType":"204","messageId":"205","endLine":7,"endColumn":26},{"ruleId":"202","severity":1,"message":"274","line":19,"column":24,"nodeType":"204","messageId":"205","endLine":19,"endColumn":38},{"ruleId":"202","severity":1,"message":"275","line":21,"column":9,"nodeType":"204","messageId":"205","endLine":21,"endColumn":29},{"ruleId":"202","severity":1,"message":"276","line":46,"column":21,"nodeType":"204","messageId":"205","endLine":46,"endColumn":29},{"ruleId":"202","severity":1,"message":"233","line":1,"column":40,"nodeType":"204","messageId":"205","endLine":1,"endColumn":50},{"ruleId":"202","severity":1,"message":"226","line":6,"column":24,"nodeType":"204","messageId":"205","endLine":6,"endColumn":29},{"ruleId":"202","severity":1,"message":"277","line":13,"column":8,"nodeType":"204","messageId":"205","endLine":13,"endColumn":18},{"ruleId":"202","severity":1,"message":"278","line":18,"column":8,"nodeType":"204","messageId":"205","endLine":18,"endColumn":25},{"ruleId":"202","severity":1,"message":"262","line":58,"column":9,"nodeType":"204","messageId":"205","endLine":58,"endColumn":21},{"ruleId":"202","severity":1,"message":"275","line":69,"column":9,"nodeType":"204","messageId":"205","endLine":69,"endColumn":29},{"ruleId":"234","severity":1,"message":"235","line":82,"column":6,"nodeType":"236","endLine":82,"endColumn":25,"suggestions":"279"},{"ruleId":"234","severity":1,"message":"235","line":89,"column":6,"nodeType":"236","endLine":89,"endColumn":27,"suggestions":"280"},"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'AppContext' is defined but never used.","'Alert' is defined but never used.","'Checkbox' is defined but never used.","'FormGroup' is defined but never used.","no-native-reassign",["281"],"no-negated-in-lhs",["282"],"'StepperInterface' is defined but never used.","'SteppReducer' is defined but never used.","'initialStepper' is defined but never used.","'SET_CURRENT_STEP' is defined but never used.","'useScrollTrigger' is defined but never used.","'Container' is defined but never used.","'Slide' is defined but never used.","'Agent' is defined but never used.","'Counter' is defined but never used.","'StepperDispatch' is assigned a value but never used.",["281"],["282"],"'Paper' is defined but never used.","'cancerList' is assigned a value but never used.","'Sugery' is assigned a value but never used.",["281"],["282"],["281"],["282"],"'useReducer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'StepperDispatch'. Either include it or remove the dependency array.","ArrayExpression",["283"],["284"],"'compareAsc' is defined but never used.","'ProfileAddressDataInterface' is defined but never used.","'ProfileMedicareDataInterface' is defined but never used.","'ProfileUserDataInterface' is defined but never used.","'TextField' is defined but never used.","'DateFnsUtils' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'EthnicityList' is defined but never used.","'InputPhone' is defined but never used.","'setErr' is assigned a value but never used.","'handleDateChange' is assigned a value but never used.","'rows' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'FormControlLabel' is defined but never used.","'FormLabel' is defined but never used.","'AvailableGenes' is defined but never used.","'TestDescription' is defined but never used.","'handleChange' is assigned a value but never used.",["285"],["286"],"'Button' is defined but never used.","'Typography' is defined but never used.","'CancerDiagnosticErrorInterface' is defined but never used.","'FamilyMemberForm' is defined but never used.","'CANCER_ADD_FAMILY_MEMBER' is defined but never used.","'CANCER_UPDATE_FAMILY_MEMBER' is defined but never used.","'CANCER_REMOVE_FAMILY_MEMBER' is defined but never used.","'CancerFamilyMemberInterface' is defined but never used.","'AddCircleOutlineIcon' is defined but never used.","'CancerDispatch' is assigned a value but never used.","'handleKeyValueChange' is assigned a value but never used.","'includes' is assigned a value but never used.","'CancerQuiz' is defined but never used.","'PreviousTreatment' is defined but never used.",["287"],["288"],"no-global-assign","no-unsafe-negation",{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"293","fix":"297"},{"desc":"295","fix":"298"},"Update the dependencies array to be: [AgentState.error, StepperDispatch]",{"range":"299","text":"300"},"Update the dependencies array to be: [AgentState.success, StepperDispatch]",{"range":"301","text":"302"},"Update the dependencies array to be: [CancerState.error, StepperDispatch]",{"range":"303","text":"304"},"Update the dependencies array to be: [CancerState.success, StepperDispatch]",{"range":"305","text":"306"},{"range":"307","text":"304"},{"range":"308","text":"306"},[1877,1895],"[AgentState.error, StepperDispatch]",[2050,2070],"[AgentState.success, StepperDispatch]",[2264,2283],"[CancerState.error, StepperDispatch]",[2439,2460],"[CancerState.success, StepperDispatch]",[2264,2283],[2439,2460]]