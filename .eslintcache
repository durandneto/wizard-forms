[{"/private/var/www/oberholtzermedia-form/src/components/Profile/Address/index.tsx":"1","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/index.tsx":"2","/private/var/www/oberholtzermedia-form/src/App.tsx":"3","/private/var/www/oberholtzermedia-form/src/context/Profile.Contex.tsx":"4","/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/index.tsx":"5","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/index.tsx":"6","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/table.tsx":"7","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/table.tsx":"8","/private/var/www/oberholtzermedia-form/src/components/Profile/Address/table.tsx":"9","/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/table.tsx":"10","/private/var/www/oberholtzermedia-form/src/components/ProgressHeader.tsx":"11","/private/var/www/oberholtzermedia-form/src/context/App.Contex.tsx":"12","/private/var/www/oberholtzermedia-form/src/context/Tabs.Context.tsx":"13","/private/var/www/oberholtzermedia-form/src/actions/profile.ts":"14","/private/var/www/oberholtzermedia-form/src/index.tsx":"15","/private/var/www/oberholtzermedia-form/src/components/Progress.tsx":"16","/private/var/www/oberholtzermedia-form/src/components/Review/index.tsx":"17","/private/var/www/oberholtzermedia-form/src/reportWebVitals.ts":"18","/private/var/www/oberholtzermedia-form/src/components/Form/Item.tsx":"19","/private/var/www/oberholtzermedia-form/src/context/Diabetes.Contex.tsx":"20","/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/index.tsx":"21","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/index.tsx":"22","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/table.tsx":"23","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/index.tsx":"24","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/table.tsx":"25","/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/table.tsx":"26","/private/var/www/oberholtzermedia-form/src/components/Form/DiabetesFamilyMember.tsx":"27","/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/index.tsx":"28","/private/var/www/oberholtzermedia-form/src/components/Form/CardiacFamilyMember.tsx":"29","/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/table.tsx":"30","/private/var/www/oberholtzermedia-form/src/context/Cardiac.Contex.tsx":"31","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/index.tsx":"32","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/table.tsx":"33","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/index.tsx":"34","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/table.tsx":"35","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/table.tsx":"36","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/index.tsx":"37","/private/var/www/oberholtzermedia-form/src/context/Cancer.Contex.tsx":"38","/private/var/www/oberholtzermedia-form/src/components/Form/CancerFamilyMember.tsx":"39","/private/var/www/oberholtzermedia-form/src/utils/index.ts":"40","/private/var/www/oberholtzermedia-form/src/components/SubmitFormModal/index.tsx":"41","/private/var/www/oberholtzermedia-form/src/components/ProgressBottom.tsx":"42","/private/var/www/oberholtzermedia-form/src/context/Agent.Contex.tsx":"43","/private/var/www/oberholtzermedia-form/src/components/Agent/Info/table.tsx":"44","/private/var/www/oberholtzermedia-form/src/components/Agent/Info/index.tsx":"45","/private/var/www/oberholtzermedia-form/src/components/templates/index.tsx":"46","/private/var/www/oberholtzermedia-form/src/actions/medicare.ts":"47","/private/var/www/oberholtzermedia-form/src/context/Auth.Context.tsx":"48","/private/var/www/oberholtzermedia-form/src/components/Stepper/index.tsx":"49","/private/var/www/oberholtzermedia-form/src/components/Stepper/Card.tsx":"50","/private/var/www/oberholtzermedia-form/src/stories/Button.stories.tsx":"51","/private/var/www/oberholtzermedia-form/src/stories/Page.tsx":"52","/private/var/www/oberholtzermedia-form/src/stories/Button.tsx":"53","/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/Stepper.stories.tsx":"54","/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/index.tsx":"55","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Stepper.tsx":"56","/private/var/www/oberholtzermedia-form/src/v2/Reducer/App.tsx":"57","/private/var/www/oberholtzermedia-form/src/v2/components/Agent/index.tsx":"58","/private/var/www/oberholtzermedia-form/src/v2/store/index.tsx":"59","/private/var/www/oberholtzermedia-form/src/v2/components/User/index.tsx":"60","/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/Accordeon.stories.tsx":"61","/private/var/www/oberholtzermedia-form/src/stories/Header.tsx":"62","/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/index.tsx":"63","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PersonalInfo.tsx":"64","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Agent/index.tsx":"65","/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/index.tsx":"66","/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/User.initialState.ts":"67","/private/var/www/oberholtzermedia-form/src/v2/components/common/InputPhone/index.tsx":"68","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AditionalInfo.tsx":"69","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AddressInfo.tsx":"70","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/MediCare.tsx":"71","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PrimaryCare.tsx":"72","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/index.tsx":"73","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/index.ts":"74","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.initialState.ts":"75","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/quiz/index.tsx":"76","/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.functions.ts":"77","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/Quiz/index.tsx":"78","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/PreviousTreatment/index.tsx":"79","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/FamilyHistory/index.tsx":"80","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/FamilyHistory/form.tsx":"81"},{"size":6835,"mtime":1613598456793,"results":"82","hashOfConfig":"83"},{"size":17118,"mtime":1613613568801,"results":"84","hashOfConfig":"83"},{"size":17919,"mtime":1614106572271,"results":"85","hashOfConfig":"83"},{"size":3497,"mtime":1613963556951,"results":"86","hashOfConfig":"83"},{"size":5974,"mtime":1613971429200,"results":"87","hashOfConfig":"83"},{"size":3001,"mtime":1613597118746,"results":"88","hashOfConfig":"83"},{"size":703,"mtime":1613403705684,"results":"89","hashOfConfig":"83"},{"size":1312,"mtime":1613576467503,"results":"90","hashOfConfig":"83"},{"size":686,"mtime":1613403327887,"results":"91","hashOfConfig":"83"},{"size":650,"mtime":1613971429201,"results":"92","hashOfConfig":"83"},{"size":544,"mtime":1613143561414,"results":"93","hashOfConfig":"83"},{"size":89,"mtime":1612819422010,"results":"94","hashOfConfig":"83"},{"size":724,"mtime":1613488546809,"results":"95","hashOfConfig":"83"},{"size":2289,"mtime":1613977269014,"results":"96","hashOfConfig":"83"},{"size":559,"mtime":1613756313798,"results":"97","hashOfConfig":"83"},{"size":5343,"mtime":1613962984278,"results":"98","hashOfConfig":"83"},{"size":6960,"mtime":1613677981749,"results":"99","hashOfConfig":"83"},{"size":425,"mtime":1613576502476,"results":"100","hashOfConfig":"83"},{"size":710,"mtime":1613570208513,"results":"101","hashOfConfig":"83"},{"size":2776,"mtime":1613574064582,"results":"102","hashOfConfig":"83"},{"size":3768,"mtime":1613584816620,"results":"103","hashOfConfig":"83"},{"size":1923,"mtime":1613578955055,"results":"104","hashOfConfig":"83"},{"size":521,"mtime":1613403417425,"results":"105","hashOfConfig":"83"},{"size":2790,"mtime":1613578988850,"results":"106","hashOfConfig":"83"},{"size":1028,"mtime":1613403774860,"results":"107","hashOfConfig":"83"},{"size":757,"mtime":1613403391480,"results":"108","hashOfConfig":"83"},{"size":6071,"mtime":1613509366464,"results":"109","hashOfConfig":"83"},{"size":2792,"mtime":1613578939232,"results":"110","hashOfConfig":"83"},{"size":6488,"mtime":1613509400924,"results":"111","hashOfConfig":"83"},{"size":1047,"mtime":1613403435426,"results":"112","hashOfConfig":"83"},{"size":4113,"mtime":1613574054464,"results":"113","hashOfConfig":"83"},{"size":7366,"mtime":1613578921460,"results":"114","hashOfConfig":"83"},{"size":1038,"mtime":1613403449855,"results":"115","hashOfConfig":"83"},{"size":2990,"mtime":1613610369777,"results":"116","hashOfConfig":"83"},{"size":1027,"mtime":1613403481121,"results":"117","hashOfConfig":"83"},{"size":953,"mtime":1613403467909,"results":"118","hashOfConfig":"83"},{"size":13328,"mtime":1613688704837,"results":"119","hashOfConfig":"83"},{"size":8005,"mtime":1613688809996,"results":"120","hashOfConfig":"83"},{"size":6538,"mtime":1613509400924,"results":"121","hashOfConfig":"83"},{"size":494,"mtime":1613677416518,"results":"122","hashOfConfig":"83"},{"size":917,"mtime":1613576476343,"results":"123","hashOfConfig":"83"},{"size":1876,"mtime":1613145467747,"results":"124","hashOfConfig":"83"},{"size":715,"mtime":1613584955733,"results":"125","hashOfConfig":"83"},{"size":589,"mtime":1613403507544,"results":"126","hashOfConfig":"83"},{"size":2209,"mtime":1613593666534,"results":"127","hashOfConfig":"83"},{"size":1053,"mtime":1613596463312,"results":"128","hashOfConfig":"83"},{"size":5612,"mtime":1613971429197,"results":"129","hashOfConfig":"83"},{"size":982,"mtime":1613576453991,"results":"130","hashOfConfig":"83"},{"size":1433,"mtime":1613679183815,"results":"131","hashOfConfig":"83"},{"size":7267,"mtime":1613690758660,"results":"132","hashOfConfig":"83"},{"size":804,"mtime":1613741654448,"results":"133","hashOfConfig":"83"},{"size":2415,"mtime":1613741309402,"results":"134","hashOfConfig":"83"},{"size":941,"mtime":1613741309393,"results":"135","hashOfConfig":"83"},{"size":705,"mtime":1613757809504,"results":"136","hashOfConfig":"83"},{"size":3090,"mtime":1614022602144,"results":"137","hashOfConfig":"83"},{"size":2427,"mtime":1614027731364,"results":"138","hashOfConfig":"83"},{"size":585,"mtime":1613749191644,"results":"139","hashOfConfig":"83"},{"size":5255,"mtime":1614024258376,"results":"140","hashOfConfig":"83"},{"size":1142,"mtime":1613985660200,"results":"141","hashOfConfig":"83"},{"size":4914,"mtime":1614024338479,"results":"142","hashOfConfig":"83"},{"size":736,"mtime":1613769854724,"results":"143","hashOfConfig":"83"},{"size":1356,"mtime":1613741309397,"results":"144","hashOfConfig":"83"},{"size":5600,"mtime":1614105127294,"results":"145","hashOfConfig":"83"},{"size":9104,"mtime":1613981060838,"results":"146","hashOfConfig":"83"},{"size":1468,"mtime":1613973263777,"results":"147","hashOfConfig":"83"},{"size":9947,"mtime":1613980921692,"results":"148","hashOfConfig":"83"},{"size":2421,"mtime":1613980843316,"results":"149","hashOfConfig":"83"},{"size":1327,"mtime":1613935441212,"results":"150","hashOfConfig":"83"},{"size":10739,"mtime":1613978314575,"results":"151","hashOfConfig":"83"},{"size":8128,"mtime":1613978601087,"results":"152","hashOfConfig":"83"},{"size":8254,"mtime":1614013639670,"results":"153","hashOfConfig":"83"},{"size":3509,"mtime":1613974795349,"results":"154","hashOfConfig":"83"},{"size":5147,"mtime":1614097263145,"results":"155","hashOfConfig":"83"},{"size":2651,"mtime":1614106000360,"results":"156","hashOfConfig":"83"},{"size":6194,"mtime":1614103652053,"results":"157","hashOfConfig":"83"},{"size":5695,"mtime":1614090022849,"results":"158","hashOfConfig":"83"},{"size":1083,"mtime":1614028847328,"results":"159","hashOfConfig":"83"},{"size":5695,"mtime":1614090530853,"results":"160","hashOfConfig":"83"},{"size":5104,"mtime":1614104727893,"results":"161","hashOfConfig":"83"},{"size":2544,"mtime":1614106130094,"results":"162","hashOfConfig":"83"},{"size":319,"mtime":1614106537836,"results":"163","hashOfConfig":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"167"},"1j9z5km",{"filePath":"168","messages":"169","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"171"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"171"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"171"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"171"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"171"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"171"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"203"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"193"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"193"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"203"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"198"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"171"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"193"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"203"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"193"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"220"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"171"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"203"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"220"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"193"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"193"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"203"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"305"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"217"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"326"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"326"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"217"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"350"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"217"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"326"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"369","messages":"370","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"371","messages":"372","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"373","messages":"374","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/private/var/www/oberholtzermedia-form/src/components/Profile/Address/index.tsx",["375"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n  FormFeedback,\n  CustomInput,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileAddressDataInterface } from \"../../../context/Profile.Contex\";\nimport { calculateError } from \"../../../utils\";\nimport TableInfo from \"./table\";\n\nlet states = [\n  \"AK\",\n  \"AL\",\n  \"AR\",\n  \"AS\",\n  \"AZ\",\n  \"CA\",\n  \"CO\",\n  \"CT\",\n  \"DC\",\n  \"DE\",\n  \"FL\",\n  \"GA\",\n  \"GU\",\n  \"HI\",\n  \"IA\",\n  \"ID\",\n  \"IL\",\n  \"IN\",\n  \"KS\",\n  \"KY\",\n  \"LA\",\n  \"MA\",\n  \"MD\",\n  \"ME\",\n  \"MI\",\n  \"MN\",\n  \"MO\",\n  \"MS\",\n  \"MT\",\n  \"NC\",\n  \"ND\",\n  \"NE\",\n  \"NH\",\n  \"NJ\",\n  \"NM\",\n  \"NV\",\n  \"NY\",\n  \"OH\",\n  \"OK\",\n  \"OR\",\n  \"PA\",\n  \"PR\",\n  \"RI\",\n  \"SC\",\n  \"SD\",\n  \"TN\",\n  \"TX\",\n  \"UT\",\n  \"VA\",\n  \"VI\",\n  \"VT\",\n  \"WA\",\n  \"WI\",\n  \"WV\",\n  \"WY\",\n];\nconst Address = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Profile, updateContext, validateAddress } = useContext(AppContext);\n  const {\n    tabs: { Address },\n  } = Profile;\n\n  const save = useCallback(() => {\n    const error: ProfileAddressDataInterface = {\n      streetLine: null,\n      streetLine2: null,\n      city: null,\n      state: null,\n      postalCode: null,\n    };\n\n    if (Address.data.streetLine === null || Address.data.streetLine === \"\") {\n      error.streetLine = \"Street line can not be empty.\";\n    }\n\n    if (Address.data.postalCode === null || Address.data.postalCode === \"\") {\n      error.postalCode = \"Postal Code can not be empty.\";\n    }\n\n    if (Address.data.city === null || Address.data.city === \"\") {\n      error.city = \"City can not be empty.\";\n    }\n\n    if (Address.data.state === null || Address.data.state === \"\") {\n      error.state = \"State can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Address.data, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [Address.data]);\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(Address.error);\n  }, [Address.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  console.log(\"Address\", { Address });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {showError && (\n            <Row>\n              <Col>\n                <Alert color=\"danger\">error</Alert>\n              </Col>\n            </Row>\n          )}\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"examplePassword\">Street Address</Label>\n                <Input\n                  invalid={Address.error?.streetLine}\n                  disabled={loading}\n                  value={Address.data.streetLine}\n                  onChange={(e) => {\n                    updateContext(\"streetLine\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.streetLine}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"address2\">Apartament/ Unit</Label>\n                <Input\n                  disabled={loading}\n                  value={Address.data.streetLine2}\n                  id=\"address2\"\n                  onChange={(e) => {\n                    updateContext(\"streetLine2\", e.target.value);\n                  }}\n                />\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"city\">City</Label>\n                <Input\n                  invalid={Address.error?.city}\n                  disabled={loading}\n                  value={Address.data.city}\n                  id=\"city\"\n                  onChange={(e) => {\n                    updateContext(\"city\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.city}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup>\n                <Label for=\"exampleCustomSelect\">Custom Select</Label>\n                <CustomInput\n                  type=\"select\"\n                  id=\"exampleCustomSelect\"\n                  name=\"customSelect\"\n                  disabled={loading}\n                  invalid={Address.error?.state}\n                  value={Address.data.state}\n                  onChange={(e: any) => {\n                    updateContext(\"state\", e.target.value);\n                  }}\n                >\n                  <option value=\"\">Select</option>\n                  {states.map((s: string) => (\n                    <option value={s} key={`state-${s}`}>\n                      {s}\n                    </option>\n                  ))}\n                </CustomInput>\n                <FormFeedback>{Address.error?.state}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormGroup className=\"position-relative\">\n                <Label for=\"postalcode\">Zip code</Label>\n                <Input\n                  invalid={Address.error?.postalCode}\n                  disabled={loading}\n                  value={Address.data.postalCode}\n                  id=\"postalcode\"\n                  onChange={(e) => {\n                    updateContext(\"postalCode\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{Address.error?.postalCode}</FormFeedback>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={{ size: 12, offset: 0 }} sm={{ size: 4, offset: 8 }}>\n              <Button\n                color={loading ? \"\" : \"success\"}\n                onClick={() => {\n                  if (!loading) {\n                    setLoading(true);\n                    validateAddress(Address.data)\n                      .then((r: any) => {\n                        setLoading(false);\n                        updateContext(\"error\", null);\n                        updateContext(\"success\", true);\n                      })\n                      .catch((err: any) => {\n                        updateContext(\n                          \"error\",\n                          err.response.data.message.join(\", \")\n                        );\n                        updateContext(\"success\", false);\n                        setLoading(false);\n                      });\n                  }\n                }}\n              >\n                {loading ? `Validating ...` : `Validate Address`}\n              </Button>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Address;\n",["376","377"],"/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/index.tsx",["378","379","380","381","382","383","384","385","386","387","388","389"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  DropdownToggle,\n  Alert,\n  DropdownMenu,\n  DropdownItem,\n  FormFeedback,\n  InputGroup,\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  CustomInput,\n} from \"reactstrap\";\nimport TableInfo from \"./table\";\n\nimport InputMask from \"react-input-mask\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileUserDataInterface } from \"../../../context/Profile.Contex\";\nimport FormItem from \"../../Form/Item\";\nimport { calculateError } from \"../../../utils\";\n\nconst Ethnicity: Array<string> = [\n  \"Asian\",\n  \"African American\",\n  \"Ashkenzai Jewish\",\n  \"Caucasian\",\n  \"French Canadian\",\n  \"Hispanic\",\n  \"Indian\",\n  \"Middle Eastern\",\n  \"Native American\",\n  \"Pacific Islander\",\n  \"Other\",\n];\n\nconst PersonalInfo = (props: any) => {\n  const { Profile, updateContext, ContextData, setContextData } = useContext(\n    AppContext\n  );\n  const {\n    tabs: { PersonalInfo },\n  } = Profile;\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [dropdownAltOpen, setAltDropdownOpen] = useState(false);\n  const [code, setCode] = useState(PersonalInfo.data.altPhoneCode || \"Area\");\n  const [altCode, setAltCode] = useState(\n    PersonalInfo.data.altPhoneCode || \"Area\"\n  );\n\n  const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\n  const toggleAltDropDown = () => setAltDropdownOpen(!dropdownAltOpen);\n\n  const save = useCallback(() => {\n    const error: ProfileUserDataInterface = {\n      firstName: null,\n      lastName: null,\n      email: null,\n      gender: null,\n      birthDate: null,\n      phone: null,\n      phoneCode: null,\n      altPhone: null,\n      altPhoneCode: null,\n      ethnicity: null,\n      salivaSwabTest: null,\n      isAlzheimerorDementiatype: null,\n      previousTests: null,\n      isNursingLiving: null,\n    };\n\n    if (\n      PersonalInfo.data.firstName === null ||\n      PersonalInfo.data.firstName === \"\"\n    ) {\n      error.firstName = \"First name can not be empty.\";\n    }\n\n    if (PersonalInfo.data.previousTests.length === 0) {\n      error.previousTests = \"Previous generic test can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.lastName === null ||\n      PersonalInfo.data.lastName === \"\"\n    ) {\n      error.lastName = \"Last name can not be empty.\";\n    }\n\n    if (PersonalInfo.data.gender === null || PersonalInfo.data.gender === \"\") {\n      error.gender = \"Gender can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.ethnicity === null ||\n      PersonalInfo.data.ethnicity === \"\"\n    ) {\n      error.ethnicity = \"Ethnicity can not be empty.\";\n    }\n\n    if (\n      PersonalInfo.data.birthDate === null ||\n      PersonalInfo.data.birthDate === \"\"\n    ) {\n      error.birthDate = \"DOB can not be empty.\";\n    }\n\n    if (PersonalInfo.data.phone === null || PersonalInfo.data.phone === \"\") {\n      error.phone = \"Phone can not be empty.\";\n    }\n    if (PersonalInfo.data.email === null || PersonalInfo.data.email === \"\") {\n      error.email = \"E-mail can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [PersonalInfo.data.firstName, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [PersonalInfo.data]);\n\n  const showError: boolean = useMemo(() => {\n    console.log(PersonalInfo.error);\n    return calculateError(PersonalInfo.error);\n  }, [PersonalInfo.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  console.log({ showError });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"4\">\n              <FormItem\n                error={PersonalInfo.error?.firstName}\n                id=\"PersonalInfoFirstName\"\n                label=\"First name (*)\"\n                value={PersonalInfo.data.firstName}\n                onChange={(e: any) => {\n                  updateContext(\"firstName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <FormItem\n                id=\"PersonalInfoLastName\"\n                label=\"Last name (*)\"\n                value={PersonalInfo.data.lastName}\n                error={PersonalInfo.error?.lastName}\n                onChange={(e: any) => {\n                  updateContext(\"lastName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for=\"RadioMale\">Gender</Label>\n              <FormGroup>\n                <CustomInput\n                  invalid={PersonalInfo.error?.gender}\n                  onChange={(e) => {\n                    updateContext(\"gender\", e.target.value);\n                  }}\n                  bsSize=\"sm\"\n                  type=\"radio\"\n                  value=\"male\"\n                  checked={PersonalInfo.data.gender === \"male\"}\n                  name=\"gender\"\n                  id=\"RadioMale\"\n                  label=\"Male\"\n                  inline\n                />\n                <CustomInput\n                  onChange={(e) => {\n                    updateContext(\"gender\", e.target.value);\n                  }}\n                  invalid={PersonalInfo.error?.gender}\n                  bsSize=\"sm\"\n                  type=\"radio\"\n                  value=\"female\"\n                  checked={PersonalInfo.data.gender === \"female\"}\n                  name=\"gender\"\n                  id=\"RadioFemale\"\n                  label=\"Female\"\n                  inline\n                />\n                <FormFeedback>{PersonalInfo.error?.gender}</FormFeedback>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for={`form-input-id-phone`}>Phone</Label>\n              <InputGroup>\n                {/* <InputGroupButtonDropdown\n                  addonType=\"append\"\n                  isOpen={dropdownOpen}\n                  toggle={toggleDropDown}\n                >\n                  <DropdownToggle caret>{code}</DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem header>Area</DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setCode(\"+ 1\");\n                        updateContext(\"phoneCode\", \"+ 1\");\n                      }}\n                    >\n                      + 1\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setCode(\"+ 778\");\n                        updateContext(\"phoneCode\", \"+ 778\");\n                      }}\n                    >\n                      + 778\n                    </DropdownItem>\n                  </DropdownMenu>\n                </InputGroupButtonDropdown> */}\n                <Input\n                  type=\"tel\"\n                  mask=\"999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  value={PersonalInfo.data.phone}\n                  invalid={PersonalInfo.error?.phone}\n                  tag={InputMask}\n                  onChange={(e) => {\n                    updateContext(\"phone\", e.target.value);\n                  }}\n                />\n              </InputGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"4\">\n              <Label for={`form-input-id-phone`}>Alt. Phone</Label>\n              <InputGroup>\n                {/* <InputGroupButtonDropdown\n                  addonType=\"append\"\n                  isOpen={dropdownAltOpen}\n                  toggle={toggleAltDropDown}\n                >\n                  <DropdownToggle caret>{altCode}</DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem header>Area</DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setAltCode(\"+ 1\");\n                        updateContext(\"altPhoneCode\", \"+ 1\");\n                      }}\n                    >\n                      + 1\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setAltCode(\"+ 778\");\n                        updateContext(\"altPhoneCode\", \"+ 778\");\n                      }}\n                    >\n                      + 778\n                    </DropdownItem>\n                  </DropdownMenu>\n                </InputGroupButtonDropdown> */}\n                <Input\n                  type=\"tel\"\n                  mask=\"999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  tag={InputMask}\n                  value={PersonalInfo.data.altPhone}\n                  invalid={PersonalInfo.error?.altPhone}\n                  onChange={(e: any) => {\n                    updateContext(\"altPhone\", e.target.value);\n                  }}\n                />\n              </InputGroup>\n            </Col>\n            <Col xs=\"4\">\n              <FormItem\n                id=\"emailAddress\"\n                label=\"Email Address\"\n                value={PersonalInfo.data.email}\n                error={PersonalInfo.error?.email}\n                onChange={(e: any) => {\n                  updateContext(\"email\", e.target.value);\n                }}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col sx=\"12\" sm=\"4\">\n              <FormGroup>\n                <Label for=\"birthDate\">Birth Date</Label>\n                <Input\n                  bsSize=\"sm\"\n                  type=\"date\"\n                  name=\"date\"\n                  id=\"birthDate\"\n                  min=\"1920-01-01\"\n                  max=\"2000-01-01\"\n                  placeholder=\"Birth date\"\n                  value={PersonalInfo.data.birthDate}\n                  invalid={PersonalInfo.error?.birthDate}\n                  onChange={(e) => {\n                    updateContext(\"birthDate\", e.target.value);\n                  }}\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <Label for=\"RadioEthnicity\">Ethnicity</Label>\n              <FormGroup>\n                {Ethnicity.map((et, key) => (\n                  <CustomInput\n                    onChange={(e) => updateContext(\"ethnicity\", e.target.value)}\n                    bsSize=\"sm\"\n                    type=\"radio\"\n                    value={et}\n                    invalid={PersonalInfo.error?.ethnicity}\n                    checked={PersonalInfo.data.ethnicity === et}\n                    name=\"RadioEthnicity\"\n                    id={`Ethnicity-id-${key}`}\n                    key={`Ethnicity-id-${key}`}\n                    label={et}\n                    inline\n                  />\n                ))}\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for={`typeOfNursinLiving`}>\n                  <b>\n                    Currenly living in a nursing home or assisted living\n                    facility?\n                  </b>\n                </Label>\n                <CustomInput\n                  value={PersonalInfo.data.isNursingLiving}\n                  onChange={(e: any) => {\n                    updateContext(\"isNursingLiving\", e.target.value);\n                  }}\n                  type=\"select\"\n                  id={`typeOfNursinLiving`}\n                >\n                  <option value=\"\">Select</option>\n                  <option value=\"Yes\">Yes</option>\n                  <option value=\"No\">No</option>\n                </CustomInput>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for={`AlzheimerorDementiatype`}>\n                  <b>Do you have Alzheimer's or Dementia?</b>\n                </Label>\n                <CustomInput\n                  value={PersonalInfo.data.isAlzheimerorDementiatype}\n                  onChange={(e: any) => {\n                    updateContext(\"isAlzheimerorDementiatype\", e.target.value);\n                  }}\n                  type=\"select\"\n                  id={`AlzheimerorDementiatype`}\n                >\n                  <option value=\"\">Select</option>\n                  <option value=\"Yes\">Yes</option>\n                  <option value=\"No\">No</option>\n                </CustomInput>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\">\n              <br />\n              <Label>\n                <b>Have you ever taken a Saliva Swab DNA test?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Yes\"\n                  checked={PersonalInfo.data.salivaSwabTest === \"Yes\"}\n                  onChange={(e) => {\n                    if (e.target.checked) {\n                      updateContext(\"salivaSwabTest\", \"Yes\");\n                    } else {\n                      updateContext(\"salivaSwabTest\", \"No\");\n                    }\n                  }}\n                />\n                <Label check>Yes, I did.</Label>\n              </FormGroup>\n            </Col>\n            <Col xs=\"12\">\n              <br />\n              <Label for=\"RadioEthnicity\">\n                <b>Previous Generic Test </b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Cardiac\"\n                  checked={PersonalInfo.data.previousTests.includes(\"Cardiac\")}\n                  invalid={PersonalInfo.error?.previousTests}\n                  onChange={(e) => {\n                    ContextData.Cardiac.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Cardiac</Label>\n              </FormGroup>\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Diabetes\"\n                  invalid={PersonalInfo.error?.previousTests}\n                  checked={PersonalInfo.data.previousTests.includes(\"Diabetes\")}\n                  onChange={(e) => {\n                    ContextData.Diabetes.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Diabetes</Label>\n              </FormGroup>\n              <FormGroup check inline>\n                <Input\n                  type=\"checkbox\"\n                  value=\"Cancer\"\n                  checked={PersonalInfo.data.previousTests.includes(\"Cancer\")}\n                  invalid={PersonalInfo.error?.previousTests}\n                  onChange={(e) => {\n                    ContextData.Cancer.show = !e.target.checked;\n                    setContextData({ ...ContextData });\n                    if (e.target.checked) {\n                      updateContext(\"previousTests\", [\n                        ...PersonalInfo.data.previousTests,\n                        e.target.value,\n                      ]);\n                    } else {\n                      const index = PersonalInfo.data.previousTests.findIndex(\n                        (i: string) => i === e.target.value\n                      );\n                      const newPreviousTests = PersonalInfo.data.previousTests;\n                      newPreviousTests.splice(index, 1);\n\n                      updateContext(\"previousTests\", newPreviousTests);\n                    }\n                  }}\n                />\n                <Label check>Cancer</Label>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default PersonalInfo;\n",["390","391"],"/private/var/www/oberholtzermedia-form/src/App.tsx",["392","393","394","395"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { TabHeaderInterface, TabItemInterface } from \"./components/TabHeader\";\nimport ProgressHeader from \"./components/ProgressHeader\";\nimport { TabsContext } from \"./context/Tabs.Context\";\nimport { AppContext } from \"./context/App.Contex\";\n\nimport \"./css/animate.min.css\";\nimport \"./css/bootstrap.min.css\";\nimport \"./css/style.css\";\nimport \"./css/icon_fonts/css/all_icons_min.css\";\nimport \"./css/magnific-popup.min.css\";\nimport \"./css/skins/square/yellow.css\";\n\nimport \"./css/custom.css\";\n\nimport { validateAddress, checkMedicare } from \"./actions/profile\";\nimport { PopoverBody, PopoverHeader, UncontrolledPopover } from \"reactstrap\";\nimport SubmitFormModal from \"./components/SubmitFormModal\";\nimport Review from \"./components/Review\";\nimport TemplatePage from \"./components/templates\";\nimport { submitForm } from \"./actions/medicare\";\nimport { calculateError } from \"./utils\";\n\ninterface RegisterFunctionInterface {\n  name: string;\n  _cb: () => void;\n}\n\nconst initialPopulate =\n  // eslint-disable-next-line array-callback-return\n\n  (Context: Array<TabHeaderInterface>) =>\n    Context.reduce((acc: any, c: any) => {\n      acc[c.slug] = {\n        ...c,\n        show: true,\n        tabs: c.tabs.reduce((a: any, cc: any) => {\n          a[cc.slug] = {\n            ...cc,\n            isRequired: cc.isRequired ? true : false,\n            empty: cc.isRequired ? true : false,\n            error: null,\n            success: false,\n            save: () => {\n              console.log(a[cc.slug]);\n            },\n          };\n          return a;\n        }, {}),\n      };\n      return acc;\n    }, {});\n\nconst reversePopulate =\n  // eslint-disable-next-line array-callback-return\n\n  (Context: Array<TabHeaderInterface>) =>\n    Context.reduce((acc: any, c: any) => {\n      acc[c.slug] = {\n        ...c,\n        tabs: c.tabs.reduce((a: any, cc: any) => {\n          a[cc.slug] = cc;\n          return a;\n        }, {}),\n      };\n      return acc;\n    }, {});\n\nconst generateErrors =\n  // eslint-disable-next-line array-callback-return\n  (Context: Array<TabHeaderInterface>) =>\n    Context.reduce((acc: any, c: any) => {\n      acc[c.slug] = c.tabs.reduce((a: any, cc: any) => {\n        a[cc.slug] = null;\n        return a;\n      }, {});\n      return acc;\n    }, {});\n\nconst PopoverContent = ({ tabs, setActivePanel }: any) => {\n  return (\n    <>\n      <PopoverHeader>\n        Error{\" \"}\n        <i style={{ color: \"#dc3545\" }} className=\"icon-attention-filled\"></i>\n      </PopoverHeader>\n      <PopoverBody>\n        {\n          // eslint-disable-next-line array-callback-return\n          tabs.map((t: any) => {\n            if (t.error) {\n              return (\n                <div\n                  onClick={() => {\n                    setActivePanel(t);\n                  }}\n                >\n                  <h6>{t.label}</h6>\n                  {/* <p dangerouslySetInnerHTML={{__html: t.error}} ></p> */}\n                  {Object.values(t.error)\n                    .filter((r: any) => r !== null)\n                    .map((error: any) => (\n                      <span>{Object.values(error)}</span>\n                    ))}\n                </div>\n              );\n            }\n          })\n        }\n      </PopoverBody>\n    </>\n  );\n};\n\nconst PopoverContentSuccess = (props: any) => {\n  return (\n    <>\n      <PopoverHeader>\n        Success <i style={{ color: \"#155724\" }} className=\"icon-ok-1\"></i>\n      </PopoverHeader>\n      <PopoverBody>This section was successfully Validated</PopoverBody>\n    </>\n  );\n};\n\nfunction App() {\n  const [tabsContext, setTabsContext] = useState<TabHeaderInterface[]>(\n    TabsContext\n  );\n  const [ContextData, setContextData] = useState<any>(() =>\n    initialPopulate(TabsContext)\n  );\n\n  const [Profile, setProfile] = useState<any>(ContextData.Profile);\n  const [Diabetes, setDiabetes] = useState<any>(ContextData.Diabetes);\n  const [Cardiac, setCardiac] = useState<any>(ContextData.Cardiac);\n  const [Agent, setAgent] = useState<any>(ContextData.Agent);\n  const [Cancer, setCancer] = useState<any>(ContextData.Cancer);\n  const [Error, setError] = useState(() => generateErrors(TabsContext));\n  const [APPError, setAPPError] = useState<any>(null);\n  const [isSavingData, setIsSavingData] = useState(false);\n  const [isReviewingData, setIsReviewingData] = useState(false);\n  const [validateSubmitForm, setValidadeSubmitForm] = useState<\n    Array<RegisterFunctionInterface>\n  >([]);\n\n  const [activeTab, setActiveTab] = useState<any>(Agent);\n  const [activePanel, setCurrentPanel] = useState(Agent.tabs.Info);\n  const [prevTab, setPrevTab] = useState<any>(Agent.tabs[-1] || null);\n  const [nextTab, setNextTab] = useState<any>(Profile);\n\n  const backToPrevTab = useCallback(() => {\n    console.log(\"goToNextTab\");\n    let nt: any = Object.values(ContextData)\n      .filter((t: any) => t.index < activeTab.index && t.show)\n      .pop();\n\n    if (nt.index === 0) {\n      setPrevTab(null);\n    } else {\n      setPrevTab(activeTab);\n    }\n\n    setActiveTab(nt);\n    setCurrentPanel(Object.values(nt.tabs)[0]);\n\n    setNextTab(\n      Object.values(ContextData)\n        .filter((t: any) => t.index === nt.index + 1)\n        .pop()\n    );\n  }, [activeTab, prevTab, setPrevTab, setNextTab, setActiveTab, tabsContext]);\n\n  const registerFunction = useCallback(\n    (f: RegisterFunctionInterface) => {\n      console.log(\"registerFunction\");\n      // validateSubmitForm[f.name] = f._cb\n      const newFunction = validateSubmitForm.map((fun) => {\n        if (fun.name === f.name) {\n          fun._cb = f._cb;\n        }\n\n        return fun;\n      });\n      setValidadeSubmitForm(newFunction);\n    },\n    [validateSubmitForm]\n  );\n\n  const verifyErros = useCallback(() => {\n    Object.values(ContextData).map((context: any) => {\n      return {\n        ...context,\n        tabs: Object.values(context.tabs).map((tab: any) => {\n          console.log(context.slug, tab);\n          if (tab.empty) {\n            ContextData[context.slug].tabs[tab.slug].error =\n              \"This section is mandatory.\";\n          }\n          return tab;\n        }),\n      };\n    });\n    setContextData({ ...ContextData });\n  }, [ContextData]);\n\n  const setActivePanel = useCallback(\n    (tab: any) => {\n      setActiveTab({\n        ...activeTab,\n        activeTab: tab,\n      });\n    },\n    [activeTab, setActiveTab]\n  );\n\n  const goToNextTab = useCallback(() => {\n    console.log(\"goToNextTab\");\n    let nt: any = Object.values(ContextData)\n      .filter((t: any) => t.index > activeTab.index && t.show)\n      .shift();\n\n    if (nt.index === 0) {\n      setPrevTab(null);\n    } else {\n      setPrevTab(activeTab);\n    }\n\n    setActiveTab(nt);\n    setCurrentPanel(Object.values(nt.tabs)[0]);\n\n    setNextTab(\n      Object.values(ContextData)\n        .filter((t: any) => t.index === nt.index + 1)\n        .pop()\n    );\n  }, [activeTab, ContextData]);\n\n  const goToNextPanel = useCallback(() => {\n    console.log(\"goToNextPanel\");\n\n    setCurrentPanel(Object.values(activeTab.tabs)[activePanel.index + 1]);\n  }, [activeTab.tabs, activePanel.index]);\n\n  const backToPrevPanel = useCallback(() => {\n    console.log(\"backToPrevPanel\");\n\n    setCurrentPanel(Object.values(activeTab.tabs)[activePanel.index - 1]);\n  }, [activeTab.tabs, activePanel.index]);\n\n  const updateContext = useCallback(\n    (key: string, value: any) => {\n      Object.values(ContextData).map((context: any) => {\n        return {\n          ...context,\n          tabs: Object.values(context.tabs).map((tab: any) => {\n            if (tab.id === activePanel.id) {\n              console.log(context.slug, tab.slug, key, value);\n              if (\n                key === \"error\" ||\n                key === \"success\" ||\n                key === \"isRequired\"\n              ) {\n                ContextData[context.slug].tabs[tab.slug][key] = value;\n                ContextData[context.slug][key] = value;\n              } else if (key === \"save\") {\n                ContextData[context.slug].tabs[tab.slug].save = async () => {\n                  await value();\n                  if (activePanel.success) {\n                    if (\n                      activePanel.index ===\n                      Object.values(activeTab.tabs).length - 1\n                    ) {\n                      goToNextTab();\n                    } else {\n                      goToNextPanel();\n                    }\n                  }\n                };\n              } else {\n                ContextData[context.slug].tabs[tab.slug].data[key] = value;\n              }\n              ContextData[context.slug].tabs[tab.slug].empty = false;\n            }\n            return tab;\n          }),\n        };\n      });\n      setContextData({ ...ContextData });\n    },\n    [\n      ContextData,\n      activePanel.id,\n      activePanel.index,\n      activePanel.success,\n      activeTab.tabs,\n      goToNextPanel,\n      goToNextTab,\n    ]\n  );\n\n  const ContextProvider = useMemo(() => {\n    return {\n      nextTab,\n      prevTab,\n      activeTab,\n      activePanel,\n      setActiveTab,\n      tabsContext,\n      goToNextTab,\n      backToPrevTab,\n      goToNextPanel,\n      backToPrevPanel,\n      Profile,\n      Diabetes,\n      Cardiac,\n      Cancer,\n      Agent,\n      APPError,\n      setAPPError,\n      updateContext,\n      validateAddress,\n      setTabsContext,\n      Error,\n      setError,\n      ContextData,\n      setActivePanel,\n      checkMedicare,\n      setIsSavingData,\n      setIsReviewingData,\n      registerFunction,\n      validateSubmitForm,\n      setCurrentPanel,\n      setContextData,\n    };\n  }, [\n    nextTab,\n    prevTab,\n    activePanel,\n    activeTab,\n    setActiveTab,\n    goToNextTab,\n    backToPrevTab,\n    tabsContext,\n    ContextData,\n    setTabsContext,\n    Error,\n    setError,\n    Agent,\n    APPError,\n    setActivePanel,\n    updateContext,\n    goToNextPanel,\n    backToPrevPanel,\n    Profile,\n    Diabetes,\n    Cardiac,\n    Cancer,\n    registerFunction,\n    validateSubmitForm,\n  ]);\n\n  //  useEffect(() => {\n  //    console.log(tabsContext)\n  //   setContextData(reversePopulate(tabsContext))\n  //  }, [tabsContext])\n\n  //  useEffect(() => {\n  //   setActivePanel(Object.values(activeTab.tabs)[0])\n  //  }, [activeTab, setActivePanel])\n\n  useEffect(() => {\n    setProfile(ContextData.Profile);\n    setDiabetes(ContextData.Diabetes);\n    setCardiac(ContextData.Cardiac);\n    setCancer(ContextData.Cancer);\n    setAgent(ContextData.Agent);\n  }, [ContextData]);\n\n  console.log({ prevTab }, { nextTab });\n  return (\n    <AppContext.Provider value={ContextProvider}>\n      <SubmitFormModal\n        isOpen={isSavingData}\n        onCancel={() => {\n          setIsSavingData(false);\n        }}\n      />\n      <Review\n        isOpen={isReviewingData}\n        toggle={() => {\n          setIsReviewingData(!isReviewingData);\n        }}\n      />\n\n      <div id=\"main_container\" className=\"visible\">\n        <div id=\"header_in\">\n          {/* <div id=\"logo_in\"><img src={\"https://oberholtzermedia.com/wp-content/uploads/2020/12/oberholtzerMediaLogo.png\"} height=\"48\" data-retina=\"true\" alt=\"Quote\" /></div> */}\n          <div id=\"logo_in\">Form</div>\n        </div>\n        <ProgressHeader\n          toggle={() => {\n            verifyErros();\n            setIsReviewingData(!isReviewingData);\n          }}\n        />\n\n        <div className=\"wrapper_in\">\n          <div className=\"container-fluid\">\n            <div className=\"tab-content\">\n              <div className=\"tab-pane fade show active\">\n                <div className=\"subheader\"></div>\n                <div className=\"row\">\n                  <aside className=\"col-lg-2 col-sm-3\">\n                    <h2>{activeTab?.label}</h2>\n                    <p className=\"lead\">\n                      Little brief here to explain what is this for.\n                    </p>\n                    <ul className=\"list\">\n                      {Object.values(ContextData).map(\n                        (tab: any, index: number) => {\n                          // if (prevTab && !prevTab.success) return <span />;\n\n                          if (tab.show === false) {\n                            return <span />;\n                          }\n                          return (\n                            <>\n                              {index > 0 && (\n                                <div\n                                  style={{\n                                    width: \"0.5px\",\n                                    height: \"20px\",\n                                    backgroundColor: \"#ccc\",\n                                    marginLeft: \"30px\",\n                                  }}\n                                ></div>\n                              )}\n                              <li\n                                id={`profile-tab-index-${index}`}\n                                key={`profile-tab-index-${index}`}\n                                onClick={() => {\n                                  setActiveTab(tab);\n                                  setCurrentPanel(Object.values(tab.tabs)[0]);\n                                  if (tab.index === 0) {\n                                    setPrevTab(tabsContext[-1]);\n                                  } else {\n                                    setPrevTab(\n                                      Object.values(ContextData)\n                                        .filter(\n                                          (t: any) => t.index === tab.index - 1\n                                        )\n                                        .pop()\n                                    );\n                                  }\n                                  setNextTab(\n                                    Object.values(ContextData)\n                                      .filter(\n                                        (t: any) => t.index === tab.index + 1\n                                      )\n                                      .pop()\n                                  );\n                                }}\n                                className={\n                                  tab.id === activeTab?.id ? \"active\" : \"\"\n                                }\n                              >\n                                <span>\n                                  {tab.label}{\" \"}\n                                  {tab.index === 0\n                                    ? \"enable\"\n                                    : tab.index > 0 &&\n                                      prevTab &&\n                                      prevTab.success\n                                    ? \"enable\"\n                                    : tab.success\n                                    ? \"enable\"\n                                    : \"disable\"}\n                                </span>\n                                {Object.values(tab.tabs).filter((t: any) =>\n                                  calculateError(t.error)\n                                ).length > 0 && (\n                                  <>\n                                    <i\n                                      style={{ color: \"#dc3545\" }}\n                                      className=\"icon-attention-filled\"\n                                    ></i>\n                                    <UncontrolledPopover\n                                      trigger=\"hover\"\n                                      placement=\"left\"\n                                      target={`profile-tab-index-${index}`}\n                                    >\n                                      {({ scheduleUpdate }) => (\n                                        <PopoverContent\n                                          tabs={Object.values(tab.tabs)}\n                                          setActivePanel={(tab2: any) => {\n                                            // setActivePanel(tab2)\n                                          }}\n                                        />\n                                      )}\n                                    </UncontrolledPopover>\n                                  </>\n                                )}\n                                {Object.values(tab.tabs).reduce(\n                                  (success: boolean, currenTab: any) => {\n                                    if (success) {\n                                      return currenTab.success;\n                                    }\n                                    return success;\n                                  },\n                                  true\n                                ) && (\n                                  <>\n                                    <i\n                                      style={{ color: \"#155724\" }}\n                                      className=\"icon-ok-1\"\n                                    ></i>\n                                    <UncontrolledPopover\n                                      trigger=\"hover\"\n                                      placement=\"left\"\n                                      target={`profile-tab-index-${index}`}\n                                    >\n                                      {({ scheduleUpdate }) => (\n                                        <PopoverContentSuccess />\n                                      )}\n                                    </UncontrolledPopover>\n                                  </>\n                                )}\n                              </li>\n                            </>\n                          );\n                        }\n                      )}\n                    </ul>\n                  </aside>\n                  <div className=\"col-lg-10 col-sm-9\">\n                    <TemplatePage />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","/private/var/www/oberholtzermedia-form/src/context/Profile.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/index.tsx",["396","397","398","399","400","401","402","403","404","405","406","407","408"],"import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  InputGroupAddon,\n  Button,\n  Form,\n  Col,\n  Row,\n  Alert,\n  Container,\n  Card,\n  CardText,\n  CardTitle,\n  CardColumns,\n  Table,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\n\nimport TableInfo from \"./table\";\nimport FormItem from \"../../Form/Item\";\nimport { ProfileMedicareDataInterface } from \"../../../context/Profile.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst MedicareID = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [mResult, setResult] = useState({});\n\n  const {\n    activeTab,\n    Profile,\n    checkMedicare,\n    registerFunction,\n    updateContext,\n    Error,\n    setError,\n    setActiveTab,\n  } = useContext(AppContext);\n  const {\n    tabs: { MediCare },\n  } = Profile;\n  const {\n    tabs: { PersonalInfo },\n  } = Profile;\n  // const [internalError, setInternalError]  = useState<string | null>(null)\n\n  const save = useCallback(() => {\n    if (MediCare.data.memberID === \"\" || MediCare.data.memberID === null) {\n      updateContext(\"error\", \"MediCare ID can not be empty.\");\n    } else {\n      setLoading(true);\n      checkMedicare(PersonalInfo.data, MediCare.data)\n        .then((r: any) => {\n          let message = \"\";\n          let error = false;\n\n          if (true) {\n            updateContext(\"success\", true);\n            updateContext(\"error\", null);\n          } else {\n            if (r.PayerName === \"MediCare Part A and B\") {\n              message += r.PayerName;\n              error = true;\n            }\n\n            if (r.HBPC_Deductible_OOP_Summary) {\n              message += \", Patient has aditional Payers\";\n              error = true;\n            }\n\n            if (r.DisclaimerMessage) {\n              message += `<br />${r.DisclaimerMessage}`;\n              error = true;\n            }\n\n            if (r.EDIErrorMessage) {\n              updateContext(\"error\", r.EDIErrorMessage);\n              updateContext(\"success\", null);\n              updateContext(\"extendedMedicareLeadData\", null);\n            } else if (error) {\n              updateContext(\"error\", message);\n              updateContext(\"success\", false);\n              updateContext(\"extendedMedicareLeadData\", null);\n            } else {\n              updateContext(\"error\", null);\n              updateContext(\"success\", r.AddtionalInfo);\n              updateContext(\"extendedMedicareLeadData\", r);\n            }\n            setResult(r);\n          }\n\n          setLoading(false);\n        })\n        .catch((err: any) => {\n          updateContext(\"success\", false);\n          updateContext(\"error\", err.response.data.message);\n          updateContext(\"extendedMedicareLeadData\", {});\n          setResult({});\n          setLoading(false);\n        });\n    }\n  }, [MediCare.data, PersonalInfo.data, checkMedicare, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [PersonalInfo.data]);\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(MediCare.error);\n  }, [MediCare.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  console.log(MediCare.error);\n  return (\n    <div className=\"col-xs-12\">\n      <Container>\n        {(showError || MediCare.success) && !loading && (\n          <Row>\n            <Col>\n              {MediCare.error && (\n                <Alert color=\"danger\">\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: JSON.stringify(MediCare.error),\n                    }}\n                  ></div>\n                </Alert>\n              )}\n              {MediCare.success && (\n                <Alert color=\"success\">\n                  <div\n                    dangerouslySetInnerHTML={{ __html: MediCare.success }}\n                  ></div>\n                </Alert>\n              )}\n            </Col>\n          </Row>\n        )}\n        <Row>\n          <Col xs=\"12\">\n            <Form>\n              <FormItem\n                label=\"MediCare ID\"\n                // error={MediCare.error}\n                onChange={(e: any) => {\n                  updateContext(\"memberID\", e.target.value);\n                }}\n                placeholder=\"MediCare ID\"\n                id=\"memberID\"\n                value={MediCare.data.memberID}\n                disabled={loading}\n                appendAddon={() => (\n                  <InputGroupAddon addonType=\"append\">\n                    <Button\n                      color={loading ? `` : `secondary`}\n                      onClick={() => {\n                        if (!loading) {\n                          save();\n                        }\n                      }}\n                    >\n                      {loading ? `Checking ...` : `Check Elgibility`}\n                    </Button>\n                  </InputGroupAddon>\n                )}\n              />\n            </Form>\n          </Col>\n        </Row>\n        {/* {mResult && (\n          <Row>\n            <Col>\n              <CardColumns>\n                <Card body inverse>\n                  <CardTitle tag=\"h5\">Result</CardTitle>\n                  <CardText>\n                    <Table borderless>\n                      <tbody>\n                        <tr>\n                          <th scope=\"row\">Status</th>\n                          <td>{mResult.status}</td>\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">2</th>\n                          <td>Jacob</td>\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">3</th>\n                          <td>Larry</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  </CardText>\n                </Card>\n              </CardColumns>\n            </Col>\n          </Row>\n        )} */}\n      </Container>\n    </div>\n  );\n};\n\nexport default MedicareID;\n","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/index.tsx",["409","410","411","412","413","414"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  InputGroup,\n  Container,\n  Alert,\n  Row,\n  Col,\n  Form,\n  FormFeedback,\n  Label,\n  Input,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport InputMask from \"react-input-mask\";\nimport TableInfo from \"./table\";\nimport FormItem from \"../../Form/Item\";\nimport { ProfilePrimaryCareDataInterface } from \"../../../context/Profile.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst PhysicianInformation = (props: any) => {\n  const { Profile, updateContext } = useContext(AppContext);\n  const {\n    tabs: { PrimaryCare },\n  } = Profile;\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [code, setCode] = useState(PrimaryCare.data.code || \"Area\");\n\n  const toggleDropDown = () => setDropdownOpen(!dropdownOpen);\n\n  const save = useCallback(() => {\n    const error: ProfilePrimaryCareDataInterface = {\n      fullName: null,\n      phone: null,\n    };\n\n    if (\n      PrimaryCare.data.fullName === null ||\n      PrimaryCare.data.fullName === \"\"\n    ) {\n      error.fullName = \"Name can not be empty.\";\n    }\n\n    if (PrimaryCare.data.phone === null || PrimaryCare.data.phone === \"\") {\n      error.phone = \"Name can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [PrimaryCare.data, updateContext]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [PrimaryCare.data]);\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(PrimaryCare.error);\n  }, [PrimaryCare.error]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                label=\"Doctor name\"\n                id={`DoctorFullname`}\n                placeholder={\"Doctor Full name\"}\n                value={PrimaryCare.data.fullName}\n                error={PrimaryCare.error?.fullName}\n                onChange={(e: any) => {\n                  updateContext(\"fullName\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <Label for={`form-input-id-phone`}>Phone</Label>\n              <InputGroup>\n                <Input\n                  type=\"tel\"\n                  mask=\"99999999999999999999\"\n                  maskChar=\"\"\n                  id=\"form-input-id-phone\"\n                  value={PrimaryCare.data.phone}\n                  invalid={PrimaryCare.error?.phone}\n                  tag={InputMask}\n                  onChange={(e) => {\n                    updateContext(\"phone\", e.target.value);\n                  }}\n                />\n                <FormFeedback>{PrimaryCare.error?.phone}</FormFeedback>\n              </InputGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default PhysicianInformation;\n","/private/var/www/oberholtzermedia-form/src/components/Profile/PrimaryCare/table.tsx",["415"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst PrimaryCareTable = (props: any) => {\n  const { Profile }  = useContext(AppContext)\n  const { tabs: { PrimaryCare: {data: PrimaryCare} } } = Profile\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Doctor fullname</th>\n          <th>Phone</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{PrimaryCare.fullName}</td>\n          <td>{PrimaryCare.phone}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default PrimaryCareTable;","/private/var/www/oberholtzermedia-form/src/components/Profile/PersonalInfo/table.tsx",["416"],"import { useContext } from \"react\";\nimport { Table } from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport { ProfileInterface } from \"../../../context/Profile.Contex\";\n\nconst ProfileTable = (props: any) => {\n  const { Profile } = useContext(AppContext);\n  const {\n    tabs: {\n      PersonalInfo: { data: PersonalInfo },\n    },\n  } = Profile;\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Gender</th>\n          <th>Phone</th>\n          <th>Alt. Phone</th>\n          <th>Email Address</th>\n          <th>Birth Date</th>\n          <th>Ethnicity</th>\n          <th>Previous Tests only</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{PersonalInfo.firstName}</td>\n          <td>{PersonalInfo.lastName}</td>\n          <td>{PersonalInfo.gender}</td>\n          <td>{`${PersonalInfo.phoneCode} ${PersonalInfo.phone}`}</td>\n          <td>{`${PersonalInfo.altPhoneCode} ${PersonalInfo.altPhone}`}</td>\n          <td>{PersonalInfo.email}</td>\n          <td>{PersonalInfo.birthDate}</td>\n          <td>{PersonalInfo.ethnicity}</td>\n          <td>{PersonalInfo.previousTests.join(\",\")}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n};\n\nexport default ProfileTable;\n",["417","418"],"/private/var/www/oberholtzermedia-form/src/components/Profile/Address/table.tsx",["419"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Profile }  = useContext(AppContext)\n  const { tabs: { Address : { data: Address} } } = Profile\n  \n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Full Address</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{`${Address.streetLine}, ${Address.city} - ${Address.state} ${Address.postalCode}`}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;",["420","421"],"/private/var/www/oberholtzermedia-form/src/components/Profile/MedicareID/table.tsx",["422"],"/private/var/www/oberholtzermedia-form/src/components/ProgressHeader.tsx",[],["423","424"],"/private/var/www/oberholtzermedia-form/src/context/App.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/context/Tabs.Context.tsx",[],["425","426"],"/private/var/www/oberholtzermedia-form/src/actions/profile.ts",["427","428","429","430"],"/private/var/www/oberholtzermedia-form/src/index.tsx",[],["431","432"],"/private/var/www/oberholtzermedia-form/src/components/Progress.tsx",["433","434","435","436","437","438"],"import { TabItemInterface } from \"./TabHeader\";\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  PopoverHeader,\n  PopoverBody,\n  UncontrolledPopover,\n} from \"reactstrap\";\nimport { useContext, useMemo } from \"react\";\nimport { AppContext } from \"../context/App.Contex\";\nimport { calculateError } from \"../utils\";\n\nconst PopoverContent = ({ tab }: any) => {\n  debugger;\n  return (\n    <>\n      <PopoverHeader>\n        Error{\" \"}\n        <i style={{ color: \"#dc3545\" }} className=\"icon-attention-filled\"></i>\n      </PopoverHeader>\n      <PopoverBody>\n        {Object.values(tab.error)\n          .filter((r: any) => r !== null)\n          .map((error: any) => (\n            <span>{Object.values(error)}</span>\n          ))}\n      </PopoverBody>\n    </>\n  );\n};\n\nconst MyProgress = () => {\n  const {\n    activeTab,\n    activePanel,\n    setCurrentPanel,\n    nextTab,\n    goToNextPanel,\n    prevTab,\n    backToPrevPanel,\n    backToPrevTab,\n    goToNextTab,\n    setIsReviewingData,\n  } = useContext(AppContext);\n\n  console.log(activePanel);\n  return (\n    <div className=\"progress_container\">\n      <Container>\n        <Row>\n          <Col className=\"progress_left_col\">\n            {Object.values(activeTab.tabs).map((tab: any, index: number) => {\n              const style = tab.success ? { color: \"#222\" } : {};\n              if (tab.id === activePanel.id) style.color = \"#409fff\";\n\n              const showError: boolean = calculateError(tab.error);\n              console.log(\"---------------\");\n              console.log(\"---------------\");\n              console.log(\"Progress eror\");\n              console.log({ showError });\n              console.log(\"---------------\");\n              console.log(\"---------------\");\n              console.log(\"---------------\");\n\n              return (\n                <span\n                  style={style}\n                  onClick={() => {\n                    setCurrentPanel(tab);\n                  }}\n                  key={`profile-tab-index-progress-${index}`}\n                  id={`profile-tab-index-progress-${index}`}\n                >\n                  {index > 0 && ` | `}\n                  {tab.label}\n                  {showError && (\n                    <>\n                      <i\n                        style={{ color: \"#dc3545\" }}\n                        className=\"icon-attention-filled\"\n                      ></i>\n                      <UncontrolledPopover\n                        trigger=\"hover\"\n                        placement=\"left\"\n                        target={`profile-tab-index-progress-${index}`}\n                      >\n                        {({ scheduleUpdate }) => <PopoverContent tab={tab} />}\n                      </UncontrolledPopover>\n                    </>\n                  )}\n                  {tab.success && (\n                    <i style={{ color: \"#155724\" }} className=\"icon-ok-1\"></i>\n                  )}\n                </span>\n              );\n            })}\n          </Col>\n          <Col className=\"progress_right_col\">\n            {activePanel.index > 0 && (\n              <Button\n                onClick={() => {\n                  backToPrevPanel();\n                }}\n                type=\"button\"\n                className=\"backward\"\n                size=\"sm\"\n                name=\"prev\"\n              >\n                Prev\n              </Button>\n            )}\n            {prevTab && activePanel.index === 0 && (\n              <Button\n                onClick={backToPrevTab}\n                type=\"button\"\n                className=\"backward\"\n                size=\"sm\"\n                name=\"prev\"\n              >\n                Prev\n              </Button>\n            )}\n            {/* <Button\n              onClick={activePanel.save}\n              type=\"button\"\n              color=\"success\"\n              size=\"sm\"\n              name=\"save\"\n            >\n              Save {activePanel.label}\n            </Button> */}\n            {/* {activePanel.index < Object.values(activeTab.tabs).length - 1 && ( */}\n            {/* {activePanel.index < Object.values(activeTab.tabs).length - 1 && ( */}\n\n            <Button\n              onClick={() => {\n                activePanel.save();\n              }}\n              tpe=\"button\"\n              className=\"forward\"\n              size=\"sm\"\n              name=\"save\"\n            >\n              Next\n            </Button>\n            {/* )} */}\n\n            {/* {nextTab &&\n              activePanel.index ===\n                Object.values(activeTab.tabs).length - 1 && (\n                <Button\n                  onClick={() => {\n                    activePanel.save();\n                    goToNextTab();\n                  }}\n                  type=\"button\"\n                  className=\"forward\"\n                  size=\"sm\"\n                  name=\"save\"\n                >\n                  Save and Go to {nextTab?.label}\n                </Button>\n              )} */}\n            {/* {\n                 !nextTab && activePanel.index === activeTab.tabs.length - 1 && <Button type=\"button\" className=\"forward\" size=\"sm\" onClick={() => {\n                    console.log({validateSubmitForm})\n\n                    setIsReviewingData(true)}} name=\"save\">Save and Submit</Button>\n               }  */}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default MyProgress;\n","/private/var/www/oberholtzermedia-form/src/components/Review/index.tsx",["439","440","441","442"],"/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport { useState, useContext } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport {\n  UncontrolledPopover,\n  PopoverHeader,\n  PopoverBody,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Breadcrumb,\n  BreadcrumbItem,\n  Collapse,\n  Navbar,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  NavbarText,\n} from \"reactstrap\";\nimport { submitForm } from \"../../actions/medicare\";\nimport { AppContext } from \"../../context/App.Contex\";\nimport { calculateError } from \"../../utils\";\n\nconst PopoverContent = (props: any) => {\n  return (\n    <>\n      <PopoverHeader>\n        Error{\" \"}\n        <i style={{ color: \"#dc3545\" }} className=\"icon-attention-filled\"></i>\n      </PopoverHeader>\n      <PopoverBody>\n        {Object.values(props.error)\n          .filter((r: any) => r !== null)\n          .map((error: any) => (\n            <span>{Object.values(error)}</span>\n          ))}\n      </PopoverBody>\n    </>\n  );\n};\n\nconst PopoverContentSuccess = (props: any) => {\n  return (\n    <>\n      <PopoverHeader>\n        Success <i style={{ color: \"#155724\" }} className=\"icon-ok-1\"></i>\n      </PopoverHeader>\n      <PopoverBody>This section was successfully Validated</PopoverBody>\n    </>\n  );\n};\n\nconst ReviewModal = (props: any) => {\n  const {\n    tabsContext: tabs,\n    setIsSavingData,\n    setAPPError,\n    ContextData,\n  } = useContext(AppContext);\n\n  const [tables, setTables] = useState(() => {\n    const arr = new Array(tabs.length);\n    for (let i = 0; i < arr.length; i++) {\n      arr[i] = new Array(tabs[i].tabs.length).fill(true); // Creating an array of size 4 and filled of 1\n    }\n\n    return arr;\n  });\n\n  return (\n    <Modal isOpen={props.isOpen} toggle={props.toggle} size=\"lg\">\n      <ModalHeader toggle={props.toggle}>Form Review</ModalHeader>\n      <ModalBody>\n        <Container>\n          {Object.values(ContextData).map((context: any, tabIndex: number) => (\n            <Row key={`review-modal-index-${tabIndex}`}>\n              <Col xs=\"12\">\n                <h4>{context.label}</h4>\n                {Object.values(context.tabs).map(\n                  (item: any, itemIndex: number) => {\n                    if (!item.isRequired && item.index === 0)\n                      return <p>No record found</p>;\n                    if (!item.isRequired && item.index > 0) return <span />;\n\n                    return (\n                      <div>\n                        <Navbar color=\"light\" light expand=\"md\">\n                          <NavbarBrand href=\"#\">{context.label} /</NavbarBrand>\n                          <Nav className=\"mr-auto\" navbar>\n                            <NavItem>\n                              <NavLink href=\"#\">{item.label}</NavLink>\n                            </NavItem>\n                          </Nav>\n                          {calculateError(item.error) && (\n                            <NavbarText>\n                              <div id={`propover-error-${item.id}`}>\n                                <i\n                                  style={{ color: \"#dc3545\" }}\n                                  className=\"icon-attention-filled\"\n                                ></i>\n                                {/* <Button onClick={()=>{\n                                                                        // const t = tables\n                                                                        // t[tabIndex][itemIndex] = !t[tabIndex][itemIndex]\n                                                                        // setTables([...tables, t])\n                                                                    }} \n                                                                    color=\"link\">\n                                                                        {\n                                                                            tables[tabIndex][itemIndex] ? `Quick fix` : `Save`\n                                                                        }\n                                                                    </Button> */}\n                              </div>\n                              <UncontrolledPopover\n                                trigger=\"hover\"\n                                placement=\"left\"\n                                target={`propover-error-${item.id}`}\n                              >\n                                {({ scheduleUpdate }) => (\n                                  <PopoverContent {...item} />\n                                )}\n                              </UncontrolledPopover>\n                            </NavbarText>\n                          )}\n                          {item.success && (\n                            <>\n                              <div id={`propover-success-${item.id}`}>\n                                <i\n                                  style={{ color: \"#155724\" }}\n                                  className=\"icon-ok-1\"\n                                ></i>\n                              </div>\n                              <UncontrolledPopover\n                                trigger=\"hover\"\n                                placement=\"left\"\n                                target={`propover-success-${item.id}`}\n                              >\n                                {({ scheduleUpdate }) => (\n                                  <PopoverContentSuccess />\n                                )}\n                              </UncontrolledPopover>\n                            </>\n                          )}\n                        </Navbar>\n                        <item.component table={tables[tabIndex][itemIndex]} />\n                      </div>\n                    );\n                  }\n                )}\n              </Col>\n            </Row>\n          ))}\n          {/* <Row>\n                    <Col xs=\"12\">\n                        <div className=\"box_contact\">\n                            <i className=\"pe-7s-id\"></i>\n                            <h4>Personal Info</h4>\n                            <blockquote className=\"blockquote styled\">\n\t\t\t\t\t\t\t<small>First name: <cite title=\"\"><b>Jhon</b></cite></small>\n\t\t\t\t\t\t\t<small>Last name: <cite title=\"\"><b>Doe</b></cite></small>\n\t\t\t\t\t\t</blockquote>\n                        </div>\n                    </Col>\n                </Row> */}\n        </Container>\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          color=\"secondary\"\n          onClick={() => {\n            props.toggle();\n            setAPPError(null);\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            setIsSavingData(true);\n            submitForm(ContextData)\n              .then((r) => {\n                debugger;\n              })\n              .catch(setAPPError);\n          }}\n        >\n          Submit\n        </Button>{\" \"}\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default ReviewModal;\n","/private/var/www/oberholtzermedia-form/src/reportWebVitals.ts",[],["443","444"],"/private/var/www/oberholtzermedia-form/src/components/Form/Item.tsx",[],["445","446"],"/private/var/www/oberholtzermedia-form/src/context/Diabetes.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/index.tsx",["447","448","449","450","451","452"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  CustomInput,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport {\n  DiabetesDiagnostic,\n  DiabetesDiagnosticDataInterface,\n} from \"../../../context/Diabetes.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst Diagnostic = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { Diagnostic },\n  } = Diabetes;\n\n  const save = useCallback(() => {\n    const error: DiabetesDiagnosticDataInterface = {\n      BMI: {\n        value: null,\n      },\n      Diagnostic: {\n        list: null,\n        isRCEDiabetesTransfer: null,\n      },\n      FamilyMemberList: { list: null },\n    };\n\n    if (Diagnostic.data.list.length === 0) {\n      error.Diagnostic.list = \"Diagnostic list can not be empty.\";\n    }\n\n    updateContext(\"error\", error.Diagnostic);\n    updateContext(\"success\", !calculateError(error.Diagnostic));\n  }, [Diagnostic.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [Diagnostic.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <Label>\n                <b>Have you been diagnosed with any of the following?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <p> (check all that apply)</p>\n            </Col>\n            <Col xs=\"12\">\n              {DiabetesDiagnostic.map((diagnostic: string) => (\n                <FormGroup check inline>\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      value={diagnostic}\n                      checked={Diagnostic.data.list.includes(diagnostic)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          updateContext(\"list\", [\n                            ...Diagnostic.data.list,\n                            e.target.value,\n                          ]);\n                        } else {\n                          const index = Diagnostic.data.list.findIndex(\n                            (i: string) => i === e.target.value\n                          );\n                          const newPreviousTests = Diagnostic.data.list;\n                          newPreviousTests.splice(index, 1);\n                          updateContext(\"list\", newPreviousTests);\n                        }\n                      }}\n                    />{\" \"}\n                    {diagnostic}\n                  </Label>\n                </FormGroup>\n              ))}\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <br />\n              <FormGroup>\n                <Label for=\"isRCEDiabetesTransferCheckbox\">\n                  <b>Check here if doing a RCE Diabetes transfer</b>\n                </Label>\n                <div>\n                  <CustomInput\n                    onClick={(e: any) => {\n                      updateContext(\"isRCEDiabetesTransfer\", e.target.checked);\n                    }}\n                    checked={Diagnostic.data.isRCEDiabetesTransfer}\n                    type=\"checkbox\"\n                    id=\"isRCEDiabetesTransferCheckbox\"\n                    label=\"Yes, I'm.\"\n                  />\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Diagnostic;\n","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/index.tsx",["453","454","455","456","457","458","459","460"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport FormItem from \"../../Form/Item\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport { DiabetesDiagnosticDataInterface } from \"../../../context/Diabetes.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst BMIComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { BMI },\n  } = Diabetes;\n\n  const save = useCallback(() => {\n    const error: DiabetesDiagnosticDataInterface = {\n      BMI: {\n        value: null,\n      },\n      Diagnostic: {\n        list: null,\n        isRCEDiabetesTransfer: null,\n      },\n      FamilyMemberList: { list: null },\n    };\n\n    if (BMI.data.value === \"\") {\n      error.BMI.value = \"BMI can not be empty.\";\n    }\n\n    updateContext(\"error\", error.BMI);\n    updateContext(\"success\", !calculateError(error.BMI));\n  }, [BMI.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [BMI.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  console.log({ BMI });\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <FormItem\n                label=\"BMI\"\n                error={BMI.error?.value}\n                onChange={(e: any) => {\n                  updateContext(\"value\", e.target.value);\n                }}\n                placeholder=\"BMI\"\n                id=\"BMI\"\n                value={BMI.data.value}\n                disabled={loading}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default BMIComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Diabetes/BMI/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/index.tsx",["461","462","463","464","465"],"import { useContext, useState } from \"react\";\nimport DiabetesFamilyMemberForm from \"../../Form/DiabetesFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  DiabetesFamilyMemberInterface,\n} from \"../../../context/Diabetes.Contex\";\n\nimport { guidGenerator } from \"../../../utils\";\n\nconst DiabetesFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Diabetes, updateContext } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Diabetes;\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: DiabetesFamilyMemberInterface, index: number) => (\n                <Row key={`FamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <DiabetesFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`FamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: DiabetesFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default DiabetesFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Diabetes/FamilyMember/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Diabetes/Diagnostic/table.tsx",["466"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Diabetes }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic} } } = Diabetes\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>List of diagnostics</th>\n          <th>Is RCE Diabetes transfer</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.list.join(\", \")}.</td>\n          <td>{Diagnostic.isRCEDiabetesTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Form/DiabetesFamilyMember.tsx",["467"],"import FormItem from  \"./Item\"\nimport { Container, Row, Col, Form, FormGroup, Label, Input,\n    Alert, Button, Card, CustomInput } from 'reactstrap';\nimport { DiabetesFamilyMemberInterface } from \"../../context/Diabetes.Contex\";\nimport { useState } from \"react\";\n\ninterface FormDiabetesFamilyMemberInterface {\n  success: boolean;\n  error: string;\n  onSave: (fm: DiabetesFamilyMemberInterface) => void;\n  onRemove: () => void;\n  id: string;\n  loading: boolean;\n  disabled: boolean;\n  model: DiabetesFamilyMemberInterface;\n  index: number;\n}\n\nconst Relationship = [{value: \"MOM\", label:\"Mom\"},\n{value: \"DAD\", label:\"Dad\"},\n{value: \"BROTHER\", label:\"Brother\"},\n{value: \"SISTER\", label:\"Sister\"},\n{value: \"GRANDMOTHER\", label:\"Grandmother\"},\n{value: \"GRANDFATHER\", label:\"Grandfather\"},\n{value: \"COUSIN\", label:\"Cousin\"},\n{value: \"AUNT\", label:\"Aunt\"},\n{value: \"UNCLE\", label:\"Uncle\"},\n{value: \"GREATGRANDMOTHER\", label:\"Great Grandmother\"},\n{value: \"GREATGRANDFATHER\", label:\"Great Grandfather\"},\n{value: \"SON\", label:\"Son\"},\n{value: \"DAUGHTER\", label:\"Daughter\"},\n{value: \"NIECE\", label:\"Niece\"},\n{value: \"NEWPHEW\", label:\"Nephew\"},\n{value: \"HALF-SISTER\", label:\"Half-sister\"},\n{value: \"HALF-BROTHER\", label:\"Half-brother\"}]\n\nconst DiabetesFamilyMemberForm = ({model, success, error, onSave, id, loading, disabled, index, onRemove }: FormDiabetesFamilyMemberInterface) => {\n  const [fData, onChange] = useState(model);\n  \n  return (\n  <div className=\"col-xs-12\" style={{marginBottom: \"20px\"}}>\n    <Card style={{padding: \"15px\"}}>\n    <Container >\n      <Row>\n        <Col xs=\"11\">\n        <h4 style={{color: \"#007bff\"}}>Family Member {index + 1}</h4>\n        </Col>\n        <Col xs=\"1\">\n          <Button outline color=\"secondary\"\n            onClick={onRemove}\n          >X</Button>\n        </Col>\n      </Row>\n        {\n          error && (\n            <Row>\n                <Col>\n                    <Alert color=\"danger\">\n                        {error}\n                    </Alert>\n                </Col>\n            </Row>\n          )\n        }\n      <Row>\n        <Col xs=\"12\" sm=\"4\">\n            <FormItem id={`userFirstNameFormFamilyMember-${id}`} label=\"First name (*)\" value={fData.firstName}\n            onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                firstName: e.target.value\n              })\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"4\">\n            <FormItem id={`userLastNameFormFamilyMember-${id}`} label=\"Last name (*)\"  value={fData.lastName} onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                lastName: e.target.value\n              })\n\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"4\">\n            <Label for={`genderFormFamilyMember-${id}-male`}>Gender</Label>\n            <FormGroup>\n              <CustomInput  onChange={e => {\n                onChange({\n                ...fData,\n                gender: e.target.value\n              })\n                }}\n                bsSize=\"sm\" type=\"radio\" value=\"male\" checked={fData.gender === \"male\"} name={`genderFormFamilyMember-${id}`} id={`genderFormFamilyMember-${id}-male`} label=\"Male\"  inline/>\n                <CustomInput  onChange={e => {\n                  onChange({\n                ...fData,\n                gender: e.target.value\n              })\n                }}\n                bsSize=\"sm\" type=\"radio\" value=\"female\" checked={fData.gender === \"female\"}  name={`genderFormFamilyMember-${id}`} id={`genderFormFamilyMember-${id}-female`} label=\"Female\"  inline/>\n            </FormGroup>\n          </Col>\n      </Row>\n      <Row>\n        <Col xs=\"12\" sm=\"6\" >\n          <FormGroup>\n            <Label for=\"birthDate\">Birth Date</Label>\n            <Input\n              bsSize=\"sm\"\n              type=\"date\"\n              name=\"date\"\n              id=\"birthDate\"\n              placeholder=\"Birth date\"\n              value={fData.birthDate}\n              onChange={e => {\n                onChange({\n                  ...fData,\n                  birthDate: e.target.value\n                })\n              }}\n              \n            />\n          </FormGroup>\n        </Col>\n        <Col xs=\"12\" sm=\"6\">\n          <FormGroup>\n            <Label for={`RelationshipFormFamilyMember`}>Relationship to patient</Label>\n            <CustomInput\n            value={fData.relationship || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                relationship: e.target.value\n              })\n            }}\n             type=\"select\" id={`RelationshipFormFamilyMember`} name=\"family_member_one_cancer\">\n              <option value=\"\">Select</option>\n              {\n                Relationship.map((s) => (\n                  <option key={`relationship-diabetes-${s.value}`}  value={s.value} >{s.label}</option>\n                ))\n              }\n            </CustomInput>\n          </FormGroup>\n        </Col>\n          <Col xs=\"12\" sm=\"6\">\n            <FormItem id={`DiagnosisOrSymptomFormFamilyMember-${id}`} label=\"Diagnosis or Symptoms (*)\" value={fData.diagnosisOrSymptoms} onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                diagnosisOrSymptoms: e.target.value\n              })\n            }}/>\n          </Col>\n          <Col xs=\"12\" sm=\"6\">\n            <FormItem \n              id={`AgeOfOnsetFormFamilyMember-${id}`}\n              label=\"Age of onset (*)\" value={fData.ageOfOnset}\n              onChange={(e: any)=>{\n                onChange({\n                  ...fData,\n                  ageOfOnset: e.target.value\n                })\n              }}/>\n          </Col>\n      </Row>\n      <Row>\n        <Col sm={{ size: '2', offset: 10 }}>\n          <Button color=\"success\" onClick={() => {\n            onSave(fData)\n          }}>Save</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {\n            fData !== model && <span>Unsaved data</span>\n          }\n        </Col>\n      </Row>\n    </Container>\n  </Card>\n</div>\n  )}\n\n  export default DiabetesFamilyMemberForm",["468","469"],"/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/index.tsx",["470","471","472","473","474"],"import { useContext, useState } from \"react\";\nimport CardiacFamilyMemberForm from \"../../Form/CardiacFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  CardiacFamilyMemberInterface,\n} from \"../../../context/Cardiac.Contex\";\nimport { guidGenerator } from \"../../../utils\";\n\nconst CardiacFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Cardiac, updateContext } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Cardiac;\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: CardiacFamilyMemberInterface, index: number) => (\n                <Row key={`CardiacFamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <CardiacFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`CardiacFamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: CardiacFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default CardiacFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Form/CardiacFamilyMember.tsx",[],["475","476"],"/private/var/www/oberholtzermedia-form/src/components/Cardiac/FamilyMember/table.tsx",[],["477","478"],"/private/var/www/oberholtzermedia-form/src/context/Cardiac.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/index.tsx",["479","480","481","482","483","484","485"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  CustomInput,\n  CardImgOverlay,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport {\n  CardiacDataInterface,\n  CardiacDiagnosticInterface,\n  FamilyMemberHeartConditions,\n} from \"../../../context/Cardiac.Contex\";\nimport { calculateError } from \"../../../utils\";\n\nconst Diagnostic = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const { Cardiac, updateContext } = useContext(AppContext);\n  const {\n    tabs: { Diagnostic },\n  } = Cardiac;\n\n  const save = useCallback(() => {\n    const error: CardiacDiagnosticInterface = {\n      typeOfCardiac: null,\n      age: null,\n      prescribedMedications: null,\n      heartMedicationList: null,\n      OTC: null,\n      diabetesType: null,\n      hasDiabetes: null,\n      isRCECardioTransfer: null,\n      otherDiagnosis: null,\n    };\n    if (Diagnostic.data.typeOfCardiac.length === 0) {\n      error.typeOfCardiac = \"Indicated test can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Diagnostic.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n    return () => {\n      save();\n    };\n  }, [Diagnostic.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <Label>\n                <b>Have you been diagnosed with any of the following?</b>\n              </Label>\n            </Col>\n            <Col xs=\"12\">\n              <p> (check all that apply)</p>\n            </Col>\n            <Col xs=\"12\">\n              {FamilyMemberHeartConditions.map((condition: any) => (\n                <FormGroup\n                  check\n                  inline\n                  key={`Cardiac-FamilyMemberHeartConditions-condition-${condition.value}`}\n                >\n                  <Label check>\n                    <Input\n                      type=\"checkbox\"\n                      value={condition.value}\n                      checked={Diagnostic.data.typeOfCardiac.includes(\n                        condition.value\n                      )}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          updateContext(\"typeOfCardiac\", [\n                            ...Diagnostic.data.typeOfCardiac,\n                            e.target.value,\n                          ]);\n                        } else {\n                          const index = Diagnostic.data.typeOfCardiac.findIndex(\n                            (i: string) => i === e.target.value\n                          );\n                          const newPreviousTests =\n                            Diagnostic.data.typeOfCardiac;\n                          newPreviousTests.splice(index, 1);\n                          updateContext(\"typeOfCardiac\", newPreviousTests);\n                        }\n                      }}\n                    />{\" \"}\n                    {condition.label}\n                  </Label>\n                </FormGroup>\n              ))}\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <br />\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-prescrebied-medication-1\">\n                  <b>\n                    Have you ever been prescribed medications for you heart like\n                    Nitrates, Renexa or Nitrostat or any other drugs for High\n                    Blood Pressure or High Cholesterol?\n                  </b>\n                </Label>\n                <div>\n                  {[\"Yes\", \"No\"].map((type: string, index: number) => (\n                    <CustomInput\n                      inline\n                      value={type}\n                      checked={Diagnostic.data.prescribedMedications === type}\n                      onClick={(e: any) => {\n                        updateContext(\"prescribedMedications\", e.target.value);\n                      }}\n                      type=\"radio\"\n                      id={`Cardiac-FamilyMemberHeartConditions-prescrebied-medication-${index}`}\n                      key={`Cardiac-FamilyMemberHeartConditions-prescrebied-medication-${index}`}\n                      name=\"Cardiac-FamilyMemberHeartConditions-prescrebied-medication-Radio\"\n                      label={type}\n                    />\n                  ))}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-diabetesType-1\">\n                  <b>Do you have any type of diabetes?</b>\n                </Label>\n                <div>\n                  {[\"Type 1\", \"Type 2\", \"None\"].map(\n                    (type: string, index: number) => (\n                      <CustomInput\n                        inline\n                        onClick={(e: any) => {\n                          updateContext(\"diabetesType\", e.target.value);\n                        }}\n                        value={type}\n                        checked={Diagnostic.data.diabetesType === type}\n                        type=\"radio\"\n                        id={`Cardiac-FamilyMemberHeartConditions-diabetesType-${index}`}\n                        key={`Cardiac-FamilyMemberHeartConditions-diabetesType-${index}`}\n                        name=\"Cardiac-FamilyMemberHeartConditions-diabetesType-Radio\"\n                        label={type}\n                      />\n                    )\n                  )}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <FormGroup>\n                <Label for=\"Cardiac-FamilyMemberHeartConditions-OTC\">\n                  <b>\n                    List All medications, prescribed medications and all OTC:\n                  </b>\n                </Label>\n                <Input\n                  onChange={(e: any) => {\n                    updateContext(\"OTC\", e.target.value);\n                  }}\n                  value={Diagnostic.data.OTC}\n                  type=\"textarea\"\n                  name=\"text\"\n                  id=\"Cardiac-FamilyMemberHeartConditions-OTC\"\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs=\"12\">\n              <FormGroup>\n                <Label for=\"isRCECardioTransferCheckbox\">\n                  <b>Check here if doing a RCE cardio transfer</b>\n                </Label>\n                <div>\n                  <CustomInput\n                    onClick={(e: any) => {\n                      updateContext(\"isRCECardioTransfer\", e.target.checked);\n                    }}\n                    checked={Diagnostic.data.isRCECardioTransfer}\n                    type=\"checkbox\"\n                    id=\"isRCECardioTransferCheckbox\"\n                    label=\"Yes, I'm.\"\n                  />\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Diagnostic;\n","/private/var/www/oberholtzermedia-form/src/components/Cardiac/Diagnostic/table.tsx",["486","487","488"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Cardiac, updateContext, Error }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic } } } = Cardiac\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Diagnosed</th>\n          <th>Prescribed Medications</th>\n          <th>Diabetes Type</th>\n          <th>Prescribed medications and all OTC</th>\n          <th>Is RCE cardio transfer?</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.typeOfCardiac.join(\", \")}.</td>\n          <td>{Diagnostic.prescribedMedications}</td>\n          <td>{Diagnostic.diabetesType}</td>\n          <td>{Diagnostic.OTC}</td>\n          <td>{Diagnostic.isRCECardioTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/index.tsx",["489","490","491","492","493","494","495","496"],"import { useCallback, useContext, useEffect, useState } from \"react\";\nimport CancerFamilyMemberForm from \"../../Form/CancerFamilyMember\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  Button,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport {\n  familyMemberData,\n  CancerFamilyMemberInterface,\n} from \"../../../context/Cancer.Contex\";\nimport { guidGenerator } from \"../../../utils\";\n\nconst CancerFamilyMemberComponent = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [limit, setLimit] = useState<number>(3);\n\n  const { Cancer, updateContext, Error } = useContext(AppContext);\n  const {\n    tabs: { FamilyMember },\n  } = Cancer;\n\n  const save = useCallback(() => {\n    updateContext(\"success\", true);\n  }, [FamilyMember.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [FamilyMember.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          {FamilyMember.data.list.length > 0 &&\n            FamilyMember.data.list.map(\n              (FM: CancerFamilyMemberInterface, index: number) => (\n                <Row key={`CancerFamilyMemberDataInterface-${FM.id}`}>\n                  <Col xs=\"12\">\n                    <CancerFamilyMemberForm\n                      index={index}\n                      error={FamilyMember.error && FamilyMember.error[index]}\n                      id={`CancerFamilyMemberDataInterface-id-${FM.id}`}\n                      success={false}\n                      onSave={(fm: CancerFamilyMemberInterface) => {\n                        FamilyMember.data.list[index] = fm;\n                        updateContext(\"list\", FamilyMember.data.list);\n                      }}\n                      loading={loading}\n                      disabled={loading}\n                      model={FM}\n                      onRemove={() => {\n                        FamilyMember.data.list.splice(index, 1);\n                        updateContext(\"list\", FamilyMember.data.list);\n                        setLimit(limit + 1);\n                      }}\n                    />\n                  </Col>\n                </Row>\n              )\n            )}\n          {limit > 0 && (\n            <Row>\n              <Col xs=\"12\">\n                <Button\n                  onClick={() => {\n                    updateContext(\"list\", [\n                      ...FamilyMember.data.list,\n                      {\n                        ...familyMemberData,\n                        id: guidGenerator(),\n                      },\n                    ]);\n                    setLimit(limit - 1);\n                  }}\n                >\n                  Add Family Member\n                </Button>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default CancerFamilyMemberComponent;\n","/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/table.tsx",["497","498","499"],"import { useContext } from 'react';\nimport { Table } from 'reactstrap';\nimport { AppContext } from '../../../context/App.Contex';\nimport { ProfileInterface } from '../../../context/Profile.Contex';\n\nconst AddressTable = (props: any) => {\n  const { Cancer, updateContext, Error }  = useContext(AppContext)\n  const { tabs: { Diagnostic : { data: Diagnostic } } } = Cancer\n  return (\n    <Table size=\"sm\" responsive>\n      <thead>\n        <tr>\n          <th>Diagnosed</th>\n          <th>Prescribed Medications</th>\n          <th>Diabetes Type</th>\n          <th>Prescribed medications and all OTC</th>\n          <th>Is RCE Cancer transfer?</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{Diagnostic.indicationTest}</td>\n          <td>{Diagnostic.isDiagnosed ? 'Yes' : 'No'}</td>\n          <td>{Diagnostic.treatment}</td>\n          <td>{Diagnostic.OTC}</td>\n          <td>{Diagnostic.isRCECancerTransfer ? 'Yes' : 'No'}</td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n\nexport default AddressTable;","/private/var/www/oberholtzermedia-form/src/components/Cancer/FamilyMember/table.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Cancer/Diagnostic/index.tsx",["500","501","502","503","504","505","506","507","508","509","510","511","512","513"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormFeedback,\n  CustomInput,\n  Button,\n  ButtonGroup,\n} from \"reactstrap\";\nimport InputMask from \"react-input-mask\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\nimport ProgressMobileStepper from \"../../Stepper\";\nimport {\n  FamilyMemberHeartConditions,\n  DiagnosedCancerList,\n  TreatmentCancerList,\n  CancerDiagnosticInterface,\n  ListInterface,\n} from \"../../../context/Cancer.Contex\";\nimport { calculateError } from \"../../../utils\";\nimport OutlinedCard from \"../../Stepper/Card\";\n\nconst Diagnostic = (props: any) => {\n  const { Cancer, updateContext } = useContext(AppContext);\n  const {\n    tabs: { Diagnostic },\n  } = Cancer;\n\n  const [loading, setLoading] = useState<boolean>(false);\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [currentStepItem, setCurrentStepItem] = useState<any>(() => {\n    const [ent, value] = Object.entries(Diagnostic.data.cancerList)[\n      currentStep\n    ];\n    return {\n      slug: ent,\n      ...((value as unknown) as ListInterface),\n    };\n  });\n\n  const save = useCallback(() => {\n    const error: CancerDiagnosticInterface = {\n      indicationTest: null,\n      isDiagnosed: null,\n      isRCECancerTransfer: null,\n      treatment: null,\n      OTC: null,\n      cancerList: Object.keys(Diagnostic.data.cancerList).reduce(\n        (a: any, c: string) => {\n          a[c] = null;\n          return a;\n        },\n        {}\n      ),\n    };\n\n    if (Diagnostic.data.isDiagnosed === \"\") {\n      error.isDiagnosed = \"Indicated test can not be empty.\";\n    } else if (Diagnostic.data.isDiagnosed === \"Yes\") {\n      // if (Diagnostic.data.indicationTest === \"\") {\n      //   error.indicationTest = \"Indicated test can not be empty.\";\n      // }\n      // if (Diagnostic.data.OTC === \"\") {\n      //   error.OTC = \"OTC can not be empty.\";\n      // }\n      Object.entries(Diagnostic.data.cancerList).map((l) => {\n        const [slug, value] = l;\n        const item: ListInterface = (value as unknown) as ListInterface;\n        if (item.value === \"\") {\n          error.cancerList[slug] = `${slug} is required`;\n        } else if (item.value === \"Yes\") {\n          if (!item?.secondValue) {\n            error.cancerList[slug] = `${item.secondLabel} is required`;\n          }\n          if (item.radio && !item.radio.value) {\n            error.cancerList[slug] = `${item.radio.label} is required`;\n          }\n          if (item.number && !item.number.value) {\n            error.cancerList[slug] = `${item.number.label} is required`;\n          }\n        }\n      });\n      debugger;\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Diagnostic.data]);\n  const validateField = useCallback((): boolean => {\n    let error = null;\n    if (Diagnostic.data.cancerList[currentStepItem.slug].value === \"\") {\n      error = `${currentStepItem.slug} is required`;\n    } else if (\n      Diagnostic.data.cancerList[currentStepItem.slug].value === \"Yes\"\n    ) {\n      if (!Diagnostic.data.cancerList[currentStepItem.slug]?.secondValue) {\n        error = `${currentStepItem.secondLabel} is required`;\n      }\n      if (\n        currentStepItem.radio &&\n        !Diagnostic.data.cancerList[currentStepItem.slug].radio.value\n      ) {\n        error = `${currentStepItem.radio.label} is required`;\n      }\n      if (\n        currentStepItem.number &&\n        !Diagnostic.data.cancerList[currentStepItem.slug].number.value\n      ) {\n        error = `${currentStepItem.number.label} is required`;\n      }\n    }\n    const nextError = {\n      ...Diagnostic.error,\n      cancerList: {\n        ...Diagnostic.error?.cancerList,\n        [currentStepItem.slug]: error,\n      },\n    };\n    updateContext(\"error\", nextError);\n    // updateContext(\"success\", !calculateError(error));\n    return error ? false : true;\n  }, [currentStepItem]);\n\n  const steps = useMemo(\n    () => Object.values(Diagnostic.data.cancerList).length,\n    [Diagnostic.data.cancerList]\n  );\n\n  useEffect(() => {\n    const [ent, value] = Object.entries(Diagnostic.data.cancerList)[\n      currentStep\n    ];\n    setCurrentStepItem({\n      slug: ent,\n      ...((value as unknown) as ListInterface),\n    });\n  }, [currentStep]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [Diagnostic.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\">\n              <FormGroup>\n                <Label for=\"Cancer-FamilyMemberHeartConditions-isDiagnosed-1\">\n                  <b>Have you ever been diagnosed with any type of cancer?</b>\n                </Label>\n                <div>\n                  <ButtonGroup size=\"lg\">\n                    <Button\n                      outline={Diagnostic.data.isDiagnosed !== \"Yes\"}\n                      color={\"primary\"}\n                      onClick={(e: any) => updateContext(\"isDiagnosed\", \"Yes\")}\n                    >\n                      Yes\n                    </Button>\n                    <Button\n                      outline={Diagnostic.data.isDiagnosed !== \"No\"}\n                      onClick={(e: any) => updateContext(\"isDiagnosed\", \"No\")}\n                    >\n                      No\n                    </Button>\n                  </ButtonGroup>\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          {Diagnostic.data.isDiagnosed === \"Yes\" && (\n            <>\n              <Row\n                key={`ListInterface-${currentStepItem.slug}-${currentStepItem.label}`}\n              >\n                {console.log(currentStepItem)}\n                <Col xs=\"12\">\n                  <OutlinedCard\n                    {...currentStepItem}\n                    invalid={Diagnostic.error?.cancerList[currentStepItem.slug]}\n                    // currentStepItem.slug={currentStepItem.slug}\n                    id={`ListInterface-currentStepItem-id-${currentStepItem.label}`}\n                    onChange={(value: string) => {\n                      updateContext(\"cancerList\", {\n                        ...Diagnostic.data.cancerList,\n                        [currentStepItem.slug]: {\n                          ...Diagnostic.data.cancerList[currentStepItem.slug],\n                          value,\n                        },\n                      });\n                      debugger;\n                      if (value === \"No\" && currentStep < steps - 1) {\n                        setCurrentStep(currentStep + 1);\n                      }\n                      //  else {\n                      //   Diagnostic.save();\n                      // }\n                    }}\n                    secondValue={\n                      Diagnostic.data.cancerList[currentStepItem.slug]\n                        .secondValue\n                    }\n                    radio={\n                      Diagnostic.data.cancerList[currentStepItem.slug].radio\n                    }\n                    // number={\n                    //   Diagnostic.data.cancerList[currentStepItem.slug].number\n                    // }\n                    onSecondLabelChange={(value: number) => {\n                      debugger;\n                      updateContext(\"cancerList\", {\n                        ...Diagnostic.data.cancerList,\n                        [currentStepItem.slug]: {\n                          ...Diagnostic.data.cancerList[currentStepItem.slug],\n                          secondValue: value,\n                        },\n                      });\n                    }}\n                    onRadioChange={(value: string) => {\n                      debugger;\n                      updateContext(\"cancerList\", {\n                        ...Diagnostic.data.cancerList,\n                        [currentStepItem.slug]: {\n                          ...Diagnostic.data.cancerList[currentStepItem.slug],\n                          radio: {\n                            ...Diagnostic.data.cancerList[currentStepItem.slug]\n                              .radio,\n                            value,\n                          },\n                        },\n                      });\n                    }}\n                    value={\n                      Diagnostic.data.cancerList[currentStepItem.slug].value\n                    }\n                  />\n                </Col>\n              </Row>\n              <ProgressMobileStepper\n                activeStep={currentStep}\n                handleBack={() => {\n                  setCurrentStep(currentStep - 1);\n                }}\n                handleNext={() => {\n                  if (validateField()) {\n                    setCurrentStep(currentStep + 1);\n                  }\n                }}\n                steps={steps}\n              />\n              {/* <Row>\n                <Col xs=\"12\">\n                  <FormGroup>\n                    <Label for=\"Cancer-FamilyMemberHeartConditions-indicationTest-1\">\n                      <b>Indication for testing selection</b>\n                    </Label>\n                    <div>\n                      {DiagnosedCancerList.map((type: any, index: number) => (\n                        <CustomInput\n                          inline\n                          onClick={(e: any) => {\n                            updateContext(\"indicationTest\", e.target.value);\n                          }}\n                          value={type.value}\n                          invalid={Diagnostic.error?.indicationTest}\n                          checked={\n                            Diagnostic.data.indicationTest === type.value\n                          }\n                          type=\"radio\"\n                          id={`Cancer-FamilyMemberHeartConditions-indicationTest-${index}`}\n                          key={`Cancer-FamilyMemberHeartConditions-indicationTest-${index}`}\n                          name=\"Cancer-FamilyMemberHeartConditions-indicationTest-Radio\"\n                          label={type.label}\n                        />\n                      ))}\n                    </div>\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs=\"12\">\n                  <FormGroup>\n                    <Label for=\"Cancer-FamilyMemberHeartConditions-treatment-1\">\n                      <b>Previous or current treatment</b>\n                    </Label>\n                    <div>\n                      {TreatmentCancerList.map(\n                        (treatment: any, index: number) => (\n                          <CustomInput\n                            inline\n                            onClick={(e: any) => {\n                              updateContext(\"treatment\", e.target.value);\n                            }}\n                            value={treatment.value}\n                            checked={Diagnostic.data.treatment.value}\n                            type=\"radio\"\n                            id={`Cancer-FamilyMemberHeartConditions-treatment-${index}`}\n                            key={`Cancer-FamilyMemberHeartConditions-treatment-${index}`}\n                            name=\"Cancer-FamilyMemberHeartConditions-treatment-Radio\"\n                            label={treatment.label}\n                          />\n                        )\n                      )}\n                    </div>\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs=\"12\">\n                  <FormGroup>\n                    <Label for=\"Cancer-FamilyMemberHeartConditions-OTC\">\n                      <b>\n                        List All medications, prescribed medications and all\n                        OTC:\n                      </b>\n                    </Label>\n                    <Input\n                      onChange={(e: any) => {\n                        updateContext(\"OTC\", e.target.value);\n                      }}\n                      value={Diagnostic.data.OTC}\n                      type=\"textarea\"\n                      name=\"text\"\n                      id=\"Cancer-FamilyMemberHeartConditions-OTC\"\n                    />\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs=\"12\">\n                  <FormGroup>\n                    <Label for=\"isRCECancerTransferCheckbox\">\n                      <b>Check here if doing a RCE Cancer transfer</b>\n                    </Label>\n                    <div>\n                      <CustomInput\n                        onClick={(e: any) => {\n                          updateContext(\n                            \"isRCECancerTransfer\",\n                            e.target.checked\n                          );\n                        }}\n                        checked={Diagnostic.data.isRCECancerTransfer}\n                        type=\"checkbox\"\n                        id=\"isRCECancerTransferCheckbox\"\n                        label=\"Yes, I'm.\"\n                      />\n                    </div>\n                  </FormGroup>\n                </Col>\n              </Row> */}\n            </>\n          )}\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default Diagnostic;\n","/private/var/www/oberholtzermedia-form/src/context/Cancer.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Form/CancerFamilyMember.tsx",["514"],"import FormItem from  \"./Item\"\nimport { Container, Row, Col, FormGroup, Label, Input,\n    Alert, Button, Card, CustomInput } from 'reactstrap';\nimport { CancerFamilyMemberInterface, FamilyMemberHeartConditions, Relationship } from \"../../context/Cancer.Contex\";\nimport { useState } from \"react\";\n\ninterface FormCancerFamilyMemberInterface {\n  success: boolean;\n  error: string;\n  onSave: (fm: CancerFamilyMemberInterface) => void;\n  onRemove: () => void;\n  id: string;\n  loading: boolean;\n  disabled: boolean;\n  model: CancerFamilyMemberInterface;\n  index: number;\n}\n\nconst CancerFamilyMember = ({model, success, error, onSave, id, loading, disabled, index, onRemove }: FormCancerFamilyMemberInterface) => {\n  const [fData, onChange] = useState(model);\n  \n  return (\n  <div className=\"col-xs-12\" style={{marginBottom: \"20px\"}}>\n    <Card style={{padding: \"15px\"}}>\n    <Container >\n      <Row>\n        <Col xs=\"11\">\n          <h4 style={{color: \"#007bff\"}}>Family Member {index + 1}</h4>\n        </Col>\n        <Col xs=\"1\">\n          <Button outline color=\"secondary\"\n            onClick={onRemove}\n          >X</Button>\n        </Col>\n      </Row>\n        {\n          error && (\n            <Row>\n                <Col>\n                    <Alert color=\"danger\">\n                        {error}\n                    </Alert>\n                </Col>\n            </Row>\n          )\n        }\n      <Row>\n      <Col xs=\"12\" sm=\"3\" >\n          <FormGroup>\n            <Label for={`AgeOfDiagnosisCancerFormFamilyMember${id}`}>Age of diagnosis</Label>\n            <Input\n              bsSize=\"sm\"\n              type=\"text\"\n              name=\"AgeOfDiagnosis\"\n              id={`AgeOfDiagnosisCancerFormFamilyMember${id}`}\n              placeholder=\"Age of diagnosis\"\n              value={fData.ageOfDiagnosis || ''}\n              onChange={e => {\n                onChange({\n                  ...fData,\n                  ageOfDiagnosis: e.target.value\n                })\n              }}\n            />\n          </FormGroup>\n        </Col>\n      <Col xs=\"12\" sm=\"3\">\n          <FormGroup>\n            <Label for={`RelationshipCancerFormFamilyMember${id}`}>Relationship</Label>\n            <CustomInput\n            value={fData.relationship || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                relationship: e.target.value\n              })\n            }}\n             type=\"select\" id={`RelationshipCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              {\n                Relationship.map((s) => (\n                  <option value={s.value} key={s.value} >{s.label}</option>\n                ))\n              }\n            </CustomInput>\n          </FormGroup>\n        </Col>\n      <Col xs=\"12\" sm=\"3\">\n          <FormGroup>\n            <Label for={`materialOrPaternalCancerFormFamilyMember${id}`}>Maternal or Paternal</Label>\n            <CustomInput\n            value={fData.materialOrPaternal || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                materialOrPaternal: e.target.value\n              })\n            }}\n             type=\"select\" id={`materialOrPaternalCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              <option value=\"Maternal\" >Maternal</option>\n              <option value=\"Paternal\" >Paternal</option>\n            </CustomInput>\n          </FormGroup>\n        </Col>\n        <Col xs=\"12\" sm=\"3\">\n          <FormItem\n            id={`ageCancerFormFamilyMember-${id}`}\n            label=\"Family Member Age\" \n            value={fData.age}\n            onChange={(e: any)=>{\n              onChange({\n                ...fData,\n                age: e.target.value\n              })\n            }}/>\n        </Col>\n      </Row>\n      {/* <Row> */}\n        {/* <Col xs=\"12\">\n            <Label><b>Have you been diagnosed with any of the following?</b></Label>\n        </Col>\n        <Col xs=\"12\">\n            <p> (check all that apply)</p>\n        </Col> */}\n        {/* <Col xs=\"12\">\n          {\n            FamilyMemberHeartConditions.map((condition: any, index: number) => (\n              <FormGroup check inline key={`CancerFamilyMember-heart-condition-${index}`}>\n                <Label check>\n                  <Input\n                    type=\"checkbox\"\n                    value={condition.value}\n                    checked={fData.heartConditions.includes(condition.value)}\n                    onChange={e => {\n                      if (e.target.checked) {\n                        onChange({\n                          ...fData,\n                          heartConditions: \n                          [\n                            ...fData.heartConditions,\n                            e.target.value\n                          ]\n                        })\n                      } else {\n                        const index = fData.heartConditions.findIndex((i: string) => i === e.target.value)\n                        const heartConditions = fData.heartConditions\n                        heartConditions.splice(index, 1)\n                        onChange({\n                          ...fData,\n                          heartConditions\n                        })\n                      }\n                    }}/> { condition.label }\n                </Label>\n              </FormGroup>\n            ))\n          }\n        </Col>  */}\n      {/* </Row> */}\n      <Row>\n        <Col xs=\"4\" >\n          <br />\n          <FormGroup>\n            <Label for={`typeOfCancerCancerFormFamilyMember${id}`}>Has any type of Cancer?</Label>\n            <CustomInput\n            value={fData.typeOfCancer || ''}\n            onChange={(e:any) => {\n              onChange({\n                ...fData,\n                typeOfCancer: e.target.value\n              })\n            }}\n             type=\"select\" id={`typeOfCancerCancerFormFamilyMember${id}`}>\n              <option value=\"\">Select</option>\n              <option value=\"Yes\" >Yes</option>\n              <option value=\"No\" >No</option>\n            </CustomInput>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={{ size: '2', offset: 10 }}>\n          <Button color=\"success\" onClick={() => {\n            onSave(fData)\n          }}>Save</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {\n            fData !== model && <span>Unsaved data</span>\n          }\n        </Col>\n      </Row>\n    </Container>\n  </Card>\n</div>\n  )}\n\n  export default CancerFamilyMember","/private/var/www/oberholtzermedia-form/src/utils/index.ts",[],"/private/var/www/oberholtzermedia-form/src/components/SubmitFormModal/index.tsx",["515","516","517"],"/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport { useContext, useEffect } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport { submitForm } from \"../../actions/medicare\";\nimport { AppContext } from \"../../context/App.Contex\";\n\nconst SubmitFormModal = (props: any) => {\n  const { ContextData, APPError } = useContext(AppContext);\n\n  console.log(\"SubmitFormModal\", { APPError });\n  return (\n    <Modal isOpen={props.isOpen} size=\"lg\">\n      <ModalHeader>Form Sync</ModalHeader>\n      <ModalBody>\n        {APPError ? `${APPError.message}` : \"Saving form ...\"}\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={props.onCancel}>\n          Cancel\n        </Button>\n        {/* <Button color=\"primary\" onClick={props.toggle}>Submit</Button>{' '} */}\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default SubmitFormModal;\n","/private/var/www/oberholtzermedia-form/src/components/ProgressBottom.tsx",["518","519","520","521","522","523","524"],"/private/var/www/oberholtzermedia-form/src/context/Agent.Contex.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Agent/Info/table.tsx",[],["525","526"],"/private/var/www/oberholtzermedia-form/src/components/Agent/Info/index.tsx",["527","528","529","530","531","532","533","534","535","536"],"import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Alert,\n  CustomInput,\n} from \"reactstrap\";\nimport { AppContext } from \"../../../context/App.Contex\";\nimport TableInfo from \"./table\";\n\nimport FormItem from \"../../Form/Item\";\nimport { calculateError } from \"../../../utils\";\n\nconst AgentInfo = (props: any) => {\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const { Agent, updateContext } = useContext(AppContext);\n\n  const {\n    tabs: { Info },\n  } = Agent;\n\n  const showError: boolean = useMemo(() => {\n    return calculateError(Info.error);\n  }, [Info.error]);\n\n  const save = useCallback(() => {\n    const error: {\n      url: null | string;\n      name: null | string;\n    } = {\n      url: null,\n      name: null,\n    };\n\n    if (Info.data.url === \"\") {\n      error.url = \"Url can not be empty.\";\n    }\n\n    if (Info.data.name === \"\") {\n      error.name = \"Name can not be empty.\";\n    }\n\n    updateContext(\"error\", error);\n    updateContext(\"success\", !calculateError(error));\n  }, [Info.data]);\n\n  useEffect(() => {\n    updateContext(\"save\", save);\n  }, [Info.data]);\n\n  if (props.table) {\n    return <TableInfo {...props} />;\n  }\n\n  return (\n    <div className=\"col-xs-12\">\n      <Form>\n        <Container>\n          <Row>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                id={`agentUrlFormFamilyMember-url`}\n                label=\"Recording URL\"\n                value={Info.data.url}\n                error={Info.error?.url}\n                onChange={(e: any) => {\n                  updateContext(\"url\", e.target.value);\n                }}\n              />\n            </Col>\n            <Col xs=\"12\" sm=\"6\">\n              <FormItem\n                id={`agentNameFormFamilyMember-name`}\n                label=\"Agent name\"\n                value={Info.data.name}\n                error={Info.error?.name || null}\n                onChange={(e: any) => {\n                  updateContext(\"name\", e.target.value);\n                }}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </Form>\n    </div>\n  );\n};\n\nexport default AgentInfo;\n","/private/var/www/oberholtzermedia-form/src/components/templates/index.tsx",["537","538","539"],"import { useContext } from \"react\";\nimport { Container, Row, Col, Button } from \"reactstrap\";\nimport { AppContext } from \"../../context/App.Contex\";\n\nimport Progress from \"../Progress\";\n\nconst TPage = () => {\n  const { activeTab, activePanel, updateContext } = useContext(AppContext);\n  console.log({ activePanel });\n  return (\n    <div id=\"wizard_container\">\n      <div id=\"top-wizard\">\n        <Container>\n          <Row>\n            <Col>\n              <Progress />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <h3>{activePanel.label}</h3>\n              <p>\n                Lorem Ipsum is simply dummy text of the printing and typesetting\n                industry. Lorem Ipsum hass been the industry's standard dummy\n                text ever since the 1500s,{\" \"}\n              </p>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div id=\"middle-wizard\">\n        <activePanel.component />\n      </div>\n      <div id=\"bottom-wizard\"></div>\n    </div>\n  );\n};\n\nexport default TPage;\n","/private/var/www/oberholtzermedia-form/src/actions/medicare.ts",["540"],"/private/var/www/oberholtzermedia-form/src/context/Auth.Context.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Stepper/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/components/Stepper/Card.tsx",["541","542","543","544","545","546","547"],"import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Grid, Divider } from \"@material-ui/core\";\nimport InputMask from \"react-input-mask\";\nimport { Button, ButtonGroup, Input } from \"reactstrap\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  paper: {\n    padding: theme.spacing(1),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction FormRow() {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n      <Grid item xs={4}>\n        <Paper className={classes.paper}>item</Paper>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nexport default function OutlinedCard(props: any) {\n  const {\n    onChange,\n    onSecondLabelChange,\n    id,\n    label,\n    value,\n    checked,\n    hint,\n    error,\n    secondLabel,\n    ps,\n    secondValue,\n    onRadioChange,\n    radio,\n    invalid,\n    description,\n  } = props;\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {label}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {description}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {`${hint ? hint : \"\"} ${ps ? ps : secondLabel}`}\n        </Typography>\n        <Divider />\n        <Typography className={classes.pos}>\n          {value === \"Yes\" && (\n            <>\n              {secondLabel && (\n                <>\n                  <Typography variant=\"subtitle1\" gutterBottom>\n                    {secondLabel}\n                  </Typography>\n                  <Input\n                    type=\"tel\"\n                    mask=\"99\"\n                    maskChar=\"\"\n                    invalid={invalid}\n                    value={secondValue}\n                    id={`Cancer-FamilyMemberHeartConditions-second-label-form-${id}`}\n                    tag={InputMask}\n                    onChange={(e: any) => onSecondLabelChange(e.target.value)}\n                  />\n                </>\n              )}\n            </>\n          )}\n        </Typography>\n\n        {invalid && <Alert severity=\"error\">{invalid}</Alert>}\n      </CardContent>\n      <CardActions>\n        <ButtonGroup>\n          <Button\n            outline={value !== \"Yes\"}\n            color={\"primary\"}\n            onClick={(e: any) => onChange(\"Yes\")}\n          >\n            Yes\n          </Button>\n          <Button outline={value !== \"No\"} onClick={(e: any) => onChange(\"No\")}>\n            No\n          </Button>\n        </ButtonGroup>\n      </CardActions>\n    </Card>\n  );\n}\n\n// const ButtonG = ({\n//   onChange,\n//   onSecondLabelChange,\n//   id,\n//   label,\n//   value,\n//   checked,\n//   error,\n//   secondLabel,\n//   secondValue,\n//   onRadioChange,\n//   radio,\n//   invalid,\n// }: any) => {\n//   return (\n//     <>\n//       <Row>\n//         <Col xs=\"12\" sm={value === \"Yes\" ? \"2\" : \"12\"}>\n//           {label}\n//           <br />\n// <ButtonGroup size=\"lg\">\n//   <Button\n//     outline={value !== \"Yes\"}\n//     color={\"primary\"}\n//     onClick={(e: any) => onChange(\"Yes\")}\n//   >\n//     Yes\n//   </Button>\n//   <Button\n//     outline={value !== \"No\"}\n//     onClick={(e: any) => onChange(\"No\")}\n//   >\n//     No\n//   </Button>\n// </ButtonGroup>\n\n//           {/* <FormGroup inline>\n//             <Label\n//               for={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//               inline\n//             >\n//               {label}\n//             </Label>\n//             <div>\n//               <CustomInput\n//                 inline\n//                 invalid={invalid}\n//                 onClick={(e: any) => onChange(\"Yes\")}\n//                 value={value}\n//                 checked={value === \"Yes\"}\n//                 type=\"radio\"\n//                 id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 label={\"Yes\"}\n//               />\n//               <CustomInput\n//                 inline\n//                 invalid={invalid}\n//                 onClick={(e: any) => onChange(\"No\")}\n//                 value={value}\n//                 checked={value === \"No\"}\n//                 type=\"radio\"\n//                 id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-no-${id}`}\n//                 name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                 label={\"No\"}\n//               />\n//             </div>\n//           </FormGroup> */}\n//         </Col>\n//         {value === \"Yes\" && (\n//           <>\n// {secondLabel && (\n//   <Col xs=\"12\" sm=\"5\">\n//     <FormGroup>\n//       <Label>{secondLabel}</Label>\n//       <Input\n//         type=\"tel\"\n//         mask=\"99\"\n//         maskChar=\"\"\n//         invalid={invalid}\n//         value={secondValue}\n//         id={`Cancer-FamilyMemberHeartConditions-second-label-form-${id}`}\n//         tag={InputMask}\n//         onChange={(e: any) => onSecondLabelChange(e.target.value)}\n//       />\n//       <FormFeedback>{error}</FormFeedback>\n//     </FormGroup>\n//   </Col>\n// )}\n//             {radio && (\n//               <Col xs=\"12\" sm=\"5\">\n//                 <FormGroup inline>\n//                   <Label\n//                     for={`Cancer-FamilyMemberHeartConditions-isDiagnosed-form-${id}`}\n//                     inline\n//                   >\n//                     {label}\n//                   </Label>\n//                   <div>\n//                     {radio.items.map((r: any) => (\n//                       <CustomInput\n//                         inline\n//                         invalid={invalid}\n//                         onClick={(e: any) => onRadioChange(r.value)}\n//                         value={value}\n//                         checked={radio.value === r.value}\n//                         type=\"radio\"\n//                         id={`Cancer-FamilyMemberHeartConditions-isDiagnosed-${r.value}-form-${id}`}\n//                         name={`Cancer-FamilyMemberHeartConditions-isDiagnosed-${r.value}-form-${id}`}\n//                         label={r.label}\n//                       />\n//                     ))}\n//                   </div>\n//                 </FormGroup>\n//               </Col>\n//             )}\n//           </>\n//         )}\n//         {invalid && <div>{invalid}</div>}\n//       </Row>\n//     </>\n//   );\n// };\n","/private/var/www/oberholtzermedia-form/src/stories/Button.stories.tsx",[],["548","549"],"/private/var/www/oberholtzermedia-form/src/stories/Page.tsx",[],"/private/var/www/oberholtzermedia-form/src/stories/Button.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/Stepper.stories.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Stepper/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Stepper.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/App.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/Agent/index.tsx",["550","551","552","553"],"import React, { useContext, useEffect, useReducer } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nimport { AppContext } from \"../../store\";\nimport { AGENT_UPDATE, AGENT_SET_ERROR } from \"../../Reducer/Agent\";\nimport { Button, Grid, Paper, Typography } from \"@material-ui/core\";\nimport {\n  SET_STEP_ERROR,\n  SET_STEP_SUCCESS,\n  GOT_TO_NEXT_STEP,\n} from \"../../Reducer/Stepper\";\nimport Accordeon from \"../common/Accordeon\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      \"& .MuiTextField-root\": {\n        margin: theme.spacing(1),\n        width: 200,\n      },\n    },\n    action: {\n      justifyContent: \"flex-end\",\n      display: \"flex\",\n      marginTop: \"30px\",\n    },\n    root: {\n      flexGrow: 1,\n      padding: \"30px 15px\",\n      backgroundColor: \"transparent\",\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary,\n      backgroundColor: \"transparent\",\n    },\n    button: {\n      margin: theme.spacing(1, 1, 0, 0),\n    },\n  })\n);\nexport default function Agent() {\n  const classes = useStyles();\n  const { AgentState, AgentDispatch, StepperDispatch } = useContext(AppContext);\n\n  const handleChange = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    console.log(\"handleChange\", event);\n    AgentDispatch({\n      type: AGENT_UPDATE,\n      key: (event.target as HTMLInputElement).name,\n      value: (event.target as HTMLInputElement).value,\n    });\n  };\n\n  useEffect(() => {\n    if (AgentState.error) {\n      console.log(\"useEffect ErroR\");\n      StepperDispatch({ type: SET_STEP_ERROR });\n    }\n  }, [AgentState.error]);\n\n  useEffect(() => {\n    if (AgentState.success) {\n      console.log(\"useEffect SUcces\");\n      StepperDispatch({ type: SET_STEP_SUCCESS });\n    }\n  }, [AgentState.success]);\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12} spacing={3}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Agent\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Lizards are a widespread group of squamate reptiles, with over 6,000\n            species, ranging across all continents except Antarctica\n          </Typography>\n        </Grid>\n        <Accordeon\n          error={AgentState.error}\n          success={AgentState.success}\n          title=\"Info\"\n          description=\"description\"\n        >\n          <Grid container spacing={3}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                id=\"outlined-full-width\"\n                label=\"Agent name (*)\"\n                error={AgentState.errorMessage.name !== \"\"}\n                style={{ margin: 8 }}\n                placeholder=\"name\"\n                helperText={\n                  AgentState.errorMessage.name !== \"\"\n                    ? AgentState.errorMessage.name\n                    : \"Required\"\n                }\n                fullWidth\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                margin=\"dense\"\n                variant=\"outlined\"\n                value={AgentState.name}\n                name={\"name\"}\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                required\n                id=\"outlined-full-width\"\n                label=\"Reacorded URL (*)\"\n                error={AgentState.errorMessage.url !== \"\"}\n                style={{ margin: 8 }}\n                placeholder=\"url\"\n                helperText={\n                  AgentState.errorMessage.url !== \"\"\n                    ? AgentState.errorMessage.url\n                    : \"Required\"\n                }\n                fullWidth\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                margin=\"dense\"\n                variant=\"outlined\"\n                value={AgentState.url}\n                name={\"url\"}\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Button\n                onClick={() => {\n                  AgentDispatch({ type: AGENT_SET_ERROR });\n                }}\n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.button}\n              >\n                Save\n              </Button>\n            </Grid>\n          </Grid>\n        </Accordeon>\n      </Grid>\n      <Grid item xs={12} spacing={3} className={classes.action}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!AgentState.success}\n          endIcon={\n            AgentState.error ? <ReportProblemIcon /> : <NavigateNextIcon />\n          }\n          onClick={() => {\n            StepperDispatch({ type: GOT_TO_NEXT_STEP });\n          }}\n        >\n          Next\n        </Button>\n      </Grid>\n    </div>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/store/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/User/index.tsx",["554","555","556"],"import React, { useContext, useEffect } from \"react\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Accordeon from \"../common/Accordeon\";\n\nimport { Button, Grid, Paper, Typography } from \"@material-ui/core\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\nimport PersonalInfoForm from \"./forms/PersonalInfo\";\nimport AddressInfoForm from \"./forms/AddressInfo\";\nimport AditionalInfoForm from \"./forms/AditionalInfo\";\nimport MedicareForm from \"./forms/MediCare\";\nimport PrimaryCareForm from \"./forms/PrimaryCare\";\nimport { AppContext } from \"../../store\";\nimport {\n  SET_STEP_ERROR,\n  SET_STEP_SUCCESS,\n  GOT_TO_NEXT_STEP,\n} from \"../../Reducer/Stepper\";\nimport { USER_SET_ERROR } from \"../../Reducer/User\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    form: {\n      \"& .MuiTextField-root\": {\n        margin: theme.spacing(1),\n        width: 200,\n      },\n    },\n    action: {\n      justifyContent: \"flex-end\",\n      display: \"flex\",\n      marginTop: \"30px\",\n    },\n    button: {\n      margin: \"0 15px\",\n      backgroundColor: \"green\",\n    },\n    root: {\n      flexGrow: 1,\n      padding: \"30px 15px\",\n      backgroundColor: \"transparent\",\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary,\n    },\n  })\n);\nexport default function User() {\n  const classes = useStyles();\n  const { UserState, UserDispatch, StepperDispatch } = useContext(AppContext);\n\n  useEffect(() => {\n    if (UserState.error) {\n      StepperDispatch({ type: SET_STEP_ERROR });\n    }\n  }, [UserState.error]);\n\n  useEffect(() => {\n    if (UserState.success) {\n      StepperDispatch({ type: SET_STEP_SUCCESS });\n    }\n  }, [UserState.success]);\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12} spacing={3}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            User Info\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Lizards are a widespread group of squamate reptiles, with over 6,000\n            species, ranging across all continents except Antarctica\n          </Typography>\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <Accordeon\n            error={UserState.errorMessage.PersonalInfo.error}\n            success={UserState.errorMessage.PersonalInfo.success}\n            title=\"Personal Info\"\n            description=\"description here\"\n          >\n            <PersonalInfoForm />\n          </Accordeon>\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <Accordeon\n            error={UserState.errorMessage.AddressInfo.error}\n            success={UserState.errorMessage.AddressInfo.success}\n            title=\"Address\"\n            description=\"description\"\n          >\n            <AddressInfoForm />\n          </Accordeon>\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <Accordeon\n            error={UserState.errorMessage.AditionalInformation.error}\n            success={UserState.errorMessage.AditionalInformation.success}\n            title=\"Aditional Information\"\n            description=\"description\"\n          >\n            <AditionalInfoForm />\n          </Accordeon>\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <Accordeon\n            error={UserState.errorMessage.MediCare.error}\n            success={UserState.errorMessage.MediCare.success}\n            title=\"MediCare\"\n            description=\"description\"\n          >\n            <MedicareForm />\n          </Accordeon>\n        </Grid>\n        <Grid item xs={12} spacing={3}>\n          <Accordeon\n            title=\"Primary Care\"\n            error={UserState.errorMessage.PrimaryCare.error}\n            success={UserState.errorMessage.PrimaryCare.success}\n            description=\"description\"\n          >\n            <PrimaryCareForm />\n          </Accordeon>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} spacing={3} className={classes.action}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          className={classes.button}\n          startIcon={<SaveIcon />}\n          disabled={UserState.success}\n          onClick={() => {\n            UserDispatch({ type: USER_SET_ERROR });\n          }}\n        >\n          Validate form\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!UserState.success}\n          endIcon={\n            UserState.error ? <ReportProblemIcon /> : <NavigateNextIcon />\n          }\n          onClick={() => {\n            StepperDispatch({ type: GOT_TO_NEXT_STEP });\n          }}\n        >\n          Next\n        </Button>\n      </Grid>\n    </div>\n  );\n}\n",["557","558"],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/Accordeon.stories.tsx",[],"/private/var/www/oberholtzermedia-form/src/stories/Header.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/Accordeon/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PersonalInfo.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Agent/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/index.tsx",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/User/User.initialState.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/common/InputPhone/index.tsx",["559"],"import React from \"react\";\nimport MaskedInput from \"react-text-mask\";\nimport Input from \"@material-ui/core/Input\";\nimport { TextField } from \"@material-ui/core\";\n\ninterface TextMaskCustomProps {\n  inputRef: (ref: HTMLInputElement | null) => void;\n}\n\nfunction TextMaskCustom(props: TextMaskCustomProps) {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref: any) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      mask={[\n        \"(\",\n        /[1-9]/,\n        /\\d/,\n        /\\d/,\n        \")\",\n        \" \",\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        \"-\",\n        /\\d/,\n        /\\d/,\n        /\\d/,\n        /\\d/,\n      ]}\n      placeholderChar={\"\\u2000\"}\n      showMask\n    />\n  );\n}\n\nexport default function InputPhone({\n  value,\n  onChange,\n  name,\n  id,\n  error,\n  label,\n  helperText,\n  placeholder,\n}: any) {\n  return (\n    <TextField\n      value={value}\n      onChange={onChange}\n      fullWidth\n      InputProps={{\n        inputComponent: TextMaskCustom as any,\n      }}\n      id={id}\n      label={label}\n      error={error}\n      style={{ margin: 8 }}\n      placeholder={placeholder}\n      helperText={helperText}\n      InputLabelProps={{\n        shrink: true,\n      }}\n      margin=\"dense\"\n      variant=\"outlined\"\n      name={name}\n    />\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AditionalInfo.tsx",["560","561","562","563","564","565","566","567","568","569"],"import React, { useContext, useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AppContext } from \"../../../store\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {\n  Button,\n  Checkbox,\n  FormGroup,\n  FormHelperText,\n  InputLabel,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport {\n  USER_UPDATE,\n  USER_SET_ERROR_ADITIONAL_INFO,\n  USER_UPDATE_ADITIONAL_INFO,\n} from \"../../../Reducer/User\";\nimport { EthnicityList } from \"../../../Reducer/User/User.initialState\";\nimport InputPhone from \"../../common/InputPhone\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: `0 ${theme.spacing(3)}px`,\n      width: \"95%\",\n    },\n    radio: {\n      flexDirection: \"row\",\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    button: {\n      margin: theme.spacing(1, 1, 0, 0),\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\nexport default function UserAditionalInformationInterface() {\n  const classes = useStyles();\n  const { UserState, UserDispatch } = useContext(AppContext);\n  const [internalError, setErr] = useState<string>(\"\");\n  const handleDateChange = (date: Date | null) => {\n    UserDispatch({\n      type: USER_UPDATE,\n      key: \"birthDate\",\n      value: date,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    console.log(\"handleChange\", event);\n    UserDispatch({\n      type: USER_UPDATE_ADITIONAL_INFO,\n      key: (event.target as HTMLInputElement).name,\n      value: (event.target as HTMLInputElement).value,\n    });\n\n    //     previousTests: Array<string>;\n    //   salivaSwabTest?: boolean;\n    //   isAlzheimerorDementiatype?: boolean;\n    //   isNursingLiving?: boolean;\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid container className={classes.root} spacing={2}>\n        {internalError ? (\n          <Grid item xs={12}>\n            <Alert severity=\"error\">{internalError}</Alert>\n          </Grid>\n        ) : (\n          <>\n            {UserState.errorMessage.AditionalInformation.success && (\n              <Grid item xs={12}>\n                <Alert severity=\"success\">\n                  This section was validated successfully .\n                </Alert>\n              </Grid>\n            )}\n          </>\n        )}\n        <Grid item xs={12}>\n          <FormControl\n            required\n            className={classes.formControl}\n            error={\n              UserState.errorMessage.AditionalInformation.message\n                .salivaSwabTest !== \"\"\n            }\n          >\n            <InputLabel htmlFor=\"salivaSwabTest-required\">\n              Have you ever taken a Saliva Swab DNA test?\n            </InputLabel>\n            <Select\n              native\n              name=\"salivaSwabTest\"\n              inputProps={{\n                id: \"is-required\",\n              }}\n              onChange={handleChange}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <option value={\"Yes\"}>Yes</option>\n              <option value={\"No\"}>No</option>\n            </Select>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message\n                .salivaSwabTest !== \"\"\n                ? UserState.errorMessage.AditionalInformation.message\n                    .salivaSwabTest\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl\n            required\n            className={classes.formControl}\n            error={\n              UserState.errorMessage.AditionalInformation.message\n                .isNursingLiving !== \"\"\n            }\n          >\n            <InputLabel htmlFor=\"isNursingLiving-required\">\n              Currenly living in a nursing home or assisted living facility?\n            </InputLabel>\n            <Select\n              native\n              name=\"isNursingLiving\"\n              inputProps={{\n                id: \"is-required\",\n              }}\n              onChange={handleChange}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <option value={\"Yes\"}>Yes</option>\n              <option value={\"No\"}>No</option>\n            </Select>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message\n                .isNursingLiving !== \"\"\n                ? UserState.errorMessage.AditionalInformation.message\n                    .isNursingLiving\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl\n            required\n            className={classes.formControl}\n            error={\n              UserState.errorMessage.AditionalInformation.message\n                .isAlzheimerorDementiatype !== \"\"\n            }\n          >\n            <InputLabel htmlFor=\"isAlzheimerorDementiatype-required\">\n              Do you have Alzheimer's or Dementia?\n            </InputLabel>\n            <Select\n              native\n              name=\"isAlzheimerorDementiatype\"\n              inputProps={{\n                id: \"is-required\",\n              }}\n              onChange={handleChange}\n            >\n              <option aria-label=\"None\" value=\"\" />\n              <option value={\"Yes\"}>Yes</option>\n              <option value={\"No\"}>No</option>\n            </Select>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message\n                .isAlzheimerorDementiatype !== \"\"\n                ? UserState.errorMessage.AditionalInformation.message\n                    .isAlzheimerorDementiatype\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12}>\n          <FormControl\n            required\n            error={\n              UserState.errorMessage.AditionalInformation.message\n                .previousTests !== \"\"\n            }\n            component=\"fieldset\"\n            className={classes.formControl}\n          >\n            <FormLabel component=\"legend\">Previous Generic Test</FormLabel>\n            <FormGroup>\n              {[\"Cancer\", \"Diabetes\", \"Cardio\"].map(\n                (item: string, index: number) => (\n                  <FormControlLabel\n                    key={`form-item-PreviousGenericTest${index}-${item}`}\n                    control={\n                      <Checkbox\n                        checked={UserState.AditionalInformation.previousTests.includes(\n                          item\n                        )}\n                        value={item}\n                        onChange={(\n                          event: React.ChangeEvent<{\n                            checked?: boolean | undefined;\n                            value: unknown;\n                          }>\n                        ) => {\n                          if (event.target.checked) {\n                            UserDispatch({\n                              type: USER_UPDATE_ADITIONAL_INFO,\n                              key: \"previousTests\",\n                              value: [\n                                ...UserState.AditionalInformation.previousTests,\n                                event.target.value,\n                              ],\n                            });\n                          } else {\n                            const index = UserState.AditionalInformation.previousTests.findIndex(\n                              (i: string) => i === event.target.value\n                            );\n                            const newPreviousTests =\n                              UserState.AditionalInformation.previousTests;\n                            newPreviousTests.splice(index, 1);\n\n                            UserDispatch({\n                              type: USER_UPDATE_ADITIONAL_INFO,\n                              key: \"previousTests\",\n                              value: newPreviousTests,\n                            });\n                          }\n                        }}\n                        name={item}\n                      />\n                    }\n                    label={item}\n                  />\n                )\n              )}\n            </FormGroup>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message\n                .previousTests !== \"\"\n                ? UserState.errorMessage.AditionalInformation.message\n                    .previousTests\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          {/* <FormControl\n            component=\"fieldset\"\n            error={\n              UserState.errorMessage.AditionalInformation.message.ethnicity\n            }\n            className={classes.formControl}\n          >\n            <FormLabel component=\"legend\">Ethnicity (*) </FormLabel>\n            <RadioGroup\n              aria-label=\"ethnicity\"\n              name=\"ethnicity\"\n              value={UserState.AditionalInformation.ethnicity.value}\n              onChange={handleChange}\n              className={classes.radio}\n            >\n              {EthnicityList.map((et: string, key: number) => (\n                <FormControlLabel\n                  value={et}\n                  key={et}\n                  control={<Radio />}\n                  label={et}\n                />\n              ))}\n            </RadioGroup>\n            <FormHelperText>\n              {UserState.errorMessage.AditionalInformation.message.ethnicity !==\n              \"\"\n                ? UserState.errorMessage.AditionalInformation.message.ethnicity\n                : \"Required\"}\n            </FormHelperText>\n          </FormControl> */}\n        </Grid>\n        {/* // /////////////////////// */}\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          onClick={() => {\n            UserDispatch({ type: USER_SET_ERROR_ADITIONAL_INFO });\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}\n        >\n          Save\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/AddressInfo.tsx",["570","571","572","573","574","575","576","577","578","579","580"],"import React, { useContext, useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AppContext } from \"../../../store\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {\n  Button,\n  Checkbox,\n  FormGroup,\n  FormHelperText,\n  InputLabel,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from \"@material-ui/pickers\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport {\n  USER_SET_ERROR_ADDRESS_INFO,\n  USER_UPDATE_ADDRESS_INFO,\n} from \"../../../Reducer/User\";\nimport { AddressStatesList } from \"../../../Reducer/User/User.initialState\";\nimport InputPhone from \"../../common/InputPhone\";\nimport { validateAddress } from \"../../../../actions/profile\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: `0 ${theme.spacing(3)}px`,\n      width: \"95%\",\n    },\n    radio: {\n      flexDirection: \"row\",\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    button: {\n      margin: theme.spacing(1, 1, 0, 0),\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\n// The first commit of Material-UI\n// const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n//   new Date(UserState.AddressInfo.firstName)\n// );\n\nexport default function UserAddressInfoForm() {\n  const classes = useStyles();\n  const [loading, setLoading] = useState<boolean>(false);\n  const { UserState, UserDispatch } = useContext(AppContext);\n  const [internalError, setErr] = useState<string>(\"\");\n\n  const handleDateChange = (date: Date | null) => {\n    UserDispatch({\n      type: USER_UPDATE_ADDRESS_INFO,\n      key: \"birthDate\",\n      value: date,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    console.log(\"handleChange\", event);\n    UserDispatch({\n      type: USER_UPDATE_ADDRESS_INFO,\n      key: (event.target as HTMLInputElement).name,\n      value: (event.target as HTMLInputElement).value,\n    });\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid container className={classes.root} spacing={2}>\n        {internalError ? (\n          <Grid item xs={12}>\n            <Alert severity=\"error\">{internalError}</Alert>\n          </Grid>\n        ) : (\n          <>\n            {UserState.errorMessage.AddressInfo.success && (\n              <Grid item xs={12}>\n                <Alert severity=\"success\">\n                  This section was validated successfully .\n                </Alert>\n              </Grid>\n            )}\n          </>\n        )}\n        <Grid item xs={12} sm={6}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"Street\"\n            error={UserState.errorMessage.AddressInfo.message.street !== \"\"}\n            style={{ margin: 8 }}\n            placeholder=\"Street\"\n            helperText={\n              UserState.errorMessage.AddressInfo.message.street !== \"\"\n                ? UserState.errorMessage.AddressInfo.message.street\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.AddressInfo.street}\n            name={\"street\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            disabled={loading}\n            id=\"outlined-full-width\"\n            label=\"Apartament/ Unit\"\n            style={{ margin: 8 }}\n            placeholder=\"Apartament/ Unit\"\n            helperText={\"optional\"}\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.AddressInfo.street2}\n            name={\"street2\"}\n            onChange={handleChange}\n          />\n        </Grid>\n\n        <Grid item xs={12} sm={4}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"City\"\n            error={UserState.errorMessage.AddressInfo.message.city !== \"\"}\n            style={{ margin: 8 }}\n            placeholder=\"City\"\n            helperText={\n              UserState.errorMessage.AddressInfo.message.city !== \"\"\n                ? UserState.errorMessage.AddressInfo.message.city\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.AddressInfo.city}\n            name={\"city\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Grid item xs={12}>\n            <FormControl\n              required\n              disabled={loading}\n              className={classes.formControl}\n              error={UserState.errorMessage.AddressInfo.message.state !== \"\"}\n            >\n              <InputLabel htmlFor=\"state-required\">State</InputLabel>\n              <Select\n                native\n                name=\"state\"\n                inputProps={{\n                  id: \"is-required\",\n                  name: \"state\",\n                }}\n                onChange={handleChange}\n              >\n                <option aria-label=\"None\" value=\"\" />\n                {AddressStatesList.map((state: string) => (\n                  <option value={state} key={`AddressStatesList-${state}`}>\n                    {state}\n                  </option>\n                ))}\n              </Select>\n              <FormHelperText>\n                {UserState.errorMessage.AddressInfo.message.state !== \"\"\n                  ? UserState.errorMessage.AddressInfo.message.state\n                  : \"Required\"}\n              </FormHelperText>\n            </FormControl>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"Zipcode\"\n            error={UserState.errorMessage.AddressInfo.message.zipcode !== \"\"}\n            style={{ margin: 8 }}\n            placeholder=\"Zipcode\"\n            helperText={\n              UserState.errorMessage.AddressInfo.message.zipcode !== \"\"\n                ? UserState.errorMessage.AddressInfo.message.zipcode\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.AddressInfo.zipcode}\n            name={\"zipcode\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        {/* // /////////////////////// */}\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          onClick={() => {\n            // UserDispatch({ type: USER_SET_ERROR_ADDRESS_INFO });\n            if (!loading) {\n              setLoading(true);\n              validateAddress(UserState.AddressInfo)\n                .then((r: any) => {\n                  setErr(\"\");\n                  UserDispatch({ type: USER_SET_ERROR_ADDRESS_INFO });\n                  setLoading(false);\n                })\n                .catch((err: any) => {\n                  UserDispatch({ type: USER_SET_ERROR_ADDRESS_INFO });\n                  setErr(err.response.data.message);\n                  setLoading(false);\n                });\n            }\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}\n        >\n          Save\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n",["581","582"],"/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/MediCare.tsx",["583","584"],"import React, { useContext, useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AppContext } from \"../../../store\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport { Button, TextField } from \"@material-ui/core\";\n\nimport {\n  USER_SET_ERROR_MEDI_CARE,\n  USER_UPDATE_MEDICARE_INFO,\n} from \"../../../Reducer/User\";\nimport { checkMedicare } from \"../../../../actions/profile\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: `0 ${theme.spacing(3)}px`,\n      width: \"95%\",\n    },\n    radio: {\n      flexDirection: \"row\",\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    button: {\n      margin: theme.spacing(1, 1, 0, 0),\n    },\n    table: {\n      minWidth: 650,\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\nfunction createData(name: string, value: any) {\n  return { name, value };\n}\n\nconst rows = [\n  createData(\"Frozen yoghurt\", 159),\n  createData(\"Ice cream sandwich\", 237),\n  createData(\"Eclair\", 262),\n  createData(\"Cupcake\", 305),\n  createData(\"Gingerbread\", 356),\n];\n// The first commit of Material-UI\n// const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n//   new Date(UserState.MediCare.firstName)\n// );\n\nexport default function UserMedicareForm() {\n  const classes = useStyles();\n  const [loading, setLoading] = useState<boolean>(false);\n  const { UserState, UserDispatch } = useContext(AppContext);\n  const [internalError, setErr] = useState<string>(\"\");\n\n  const handleChange = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    console.log(\"handleChange\", event);\n    UserDispatch({\n      type: USER_UPDATE_MEDICARE_INFO,\n      key: (event.target as HTMLInputElement).name,\n      value: (event.target as HTMLInputElement).value,\n    });\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid container className={classes.root} spacing={2}>\n        {internalError ? (\n          <Grid item xs={12}>\n            <Alert severity=\"error\">{internalError}</Alert>\n          </Grid>\n        ) : (\n          <>\n            {UserState.errorMessage.MediCare.success && (\n              <Grid item xs={12}>\n                <Alert severity=\"success\">\n                  This section was validated successfully .\n                </Alert>\n              </Grid>\n            )}\n          </>\n        )}\n\n        <Grid item xs={12} sm={6}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"memberID\"\n            error={\n              UserState.errorMessage.MediCare.message.memberID !== \"\" ||\n              internalError !== \"\"\n            }\n            style={{ margin: 8 }}\n            placeholder=\"memberID\"\n            helperText={\n              UserState.errorMessage.MediCare.message.memberID !== \"\"\n                ? UserState.errorMessage.MediCare.message.memberID\n                : internalError\n                ? internalError\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.MediCare.memberID}\n            name={\"memberID\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        {/* // /////////////////////// */}\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          onClick={() => {\n            // UserDispatch({ type: USER_SET_ERROR_MEDI_CARE });\n            if (!loading) {\n              setLoading(true);\n              try {\n                if (UserState.MediCare.memberID === \"\") {\n                  UserDispatch({\n                    type: USER_SET_ERROR_MEDI_CARE,\n                  });\n                  setLoading(false);\n                } else\n                  checkMedicare(UserState)\n                    .then((r: any) => {\n                      setErr(\"\");\n                      UserDispatch({\n                        type: USER_UPDATE_MEDICARE_INFO,\n                        key: \"extendedMedicareLeadData\",\n                        value: r,\n                      });\n                      UserDispatch({ type: USER_SET_ERROR_MEDI_CARE });\n                      setLoading(false);\n                    })\n                    .catch((err: any) => {\n                      setErr(err);\n                      UserDispatch({\n                        type: USER_SET_ERROR_MEDI_CARE,\n                      });\n                      UserDispatch({\n                        type: USER_UPDATE_MEDICARE_INFO,\n                        key: \"extendedMedicareLeadData\",\n                        value: {},\n                      });\n                      setLoading(false);\n                    });\n              } catch (err) {\n                setErr(err);\n                UserDispatch({ type: USER_SET_ERROR_MEDI_CARE });\n                setLoading(false);\n              }\n            }\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}\n        >\n          Save\n        </Button>\n      </Grid>\n      {UserState.MediCare.extendedMedicareLeadData && (\n        <TableContainer component={Paper}>\n          <Table\n            className={classes.table}\n            size=\"small\"\n            aria-label=\"a dense table\"\n          >\n            <TableBody>\n              {Object.entries(UserState.MediCare.extendedMedicareLeadData).map(\n                (row: [string, any]) => {\n                  const [key, value] = row;\n                  console.log(row);\n                  switch (true) {\n                    case key === \"APIResponseMessage\":\n                    case key === \"EDIErrorMessage\":\n                    case key === \"DisclaimerMessage\":\n                    case key === \"PayerName\":\n                    case key === \"DOS\":\n                    case key === \"AddtionalInfo\":\n                      return (\n                        <TableRow key={key}>\n                          <TableCell component=\"th\" scope=\"row\">\n                            {key}\n                          </TableCell>\n                          <TableCell align=\"right\">\n                            <span\n                              dangerouslySetInnerHTML={{ __html: value }}\n                            ></span>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    case key === \"MedicareInfoSummary\":\n                      return (\n                        <>\n                          {UserState.MediCare.extendedMedicareLeadData &&\n                            Object.entries(\n                              UserState.MediCare.extendedMedicareLeadData\n                                .MedicareInfoSummary\n                            )\n                              .filter((r: any) => typeof r[1] === \"string\")\n                              .map((row2: [string, any]) => (\n                                <TableRow key={row2[0]}>\n                                  <TableCell component=\"th\" scope=\"row\">\n                                    {row2[0]}\n                                  </TableCell>\n                                  <TableCell align=\"right\">\n                                    <span\n                                      dangerouslySetInnerHTML={{\n                                        __html: row2[1],\n                                      }}\n                                    ></span>\n                                  </TableCell>\n                                </TableRow>\n                              ))}\n                        </>\n                      );\n                  }\n                }\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </Grid>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/components/User/forms/PrimaryCare.tsx",["585"],"import React, { useContext, useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { AppContext } from \"../../../store\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport {\n  USER_SET_ERROR_PRIMARY_CARE,\n  USER_UPDATE_PRIMARYCARE,\n} from \"../../../Reducer/User\";\nimport InputPhone from \"../../common/InputPhone\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: `0 ${theme.spacing(3)}px`,\n      width: \"95%\",\n    },\n    radio: {\n      flexDirection: \"row\",\n    },\n    paper: {\n      height: 140,\n      width: 100,\n    },\n    button: {\n      margin: theme.spacing(1, 1, 0, 0),\n    },\n    table: {\n      minWidth: 650,\n    },\n    control: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\nexport default function UserPrimaryCareForm() {\n  const classes = useStyles();\n  const [loading, setLoading] = useState<boolean>(false);\n  const { UserState, UserDispatch } = useContext(AppContext);\n\n  const handleChange = (\n    event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>\n  ) => {\n    console.log(\"handleChange\", event);\n    UserDispatch({\n      type: USER_UPDATE_PRIMARYCARE,\n      key: (event.target as HTMLInputElement).name,\n      value: (event.target as HTMLInputElement).value,\n    });\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid container className={classes.root} spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            disabled={loading}\n            required\n            id=\"outlined-full-width\"\n            label=\"Doctor full name\"\n            error={UserState.errorMessage.PrimaryCare.message.name !== \"\"}\n            style={{ margin: 8 }}\n            placeholder=\"Doctor full name\"\n            helperText={\n              UserState.errorMessage.PrimaryCare.message.name !== \"\"\n                ? UserState.errorMessage.PrimaryCare.message.name\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.PrimaryCare.name}\n            name={\"name\"}\n            onChange={handleChange}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <InputPhone\n            id=\"outlined-full-width\"\n            label=\"Phone (*) \"\n            error={UserState.errorMessage.PrimaryCare.message.phone !== \"\"}\n            style={{ margin: 8 }}\n            placeholder=\"Placeholder\"\n            helperText={\n              UserState.errorMessage.PrimaryCare.message.phone !== \"\"\n                ? UserState.errorMessage.PrimaryCare.message.phone\n                : \"Required\"\n            }\n            fullWidth\n            InputLabelProps={{\n              shrink: true,\n            }}\n            margin=\"dense\"\n            variant=\"outlined\"\n            value={UserState.PrimaryCare.phone}\n            name=\"phone\"\n            onChange={handleChange}\n          />\n        </Grid>\n        {/* // /////////////////////// */}\n      </Grid>\n      <Grid item xs={12}>\n        <Button\n          onClick={() => {\n            UserDispatch({ type: USER_SET_ERROR_PRIMARY_CARE });\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          className={classes.button}\n        >\n          Save\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n","/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/index.tsx",["586","587","588","589","590"],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/index.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.initialState.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/quiz/index.tsx",["591","592","593","594"],"/private/var/www/oberholtzermedia-form/src/v2/Reducer/Cancer/Cancer.functions.ts",[],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/Quiz/index.tsx",["595","596","597","598"],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/PreviousTreatment/index.tsx",["599"],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/FamilyHistory/index.tsx",["600","601","602"],"/private/var/www/oberholtzermedia-form/src/v2/components/Cancer/FamilyHistory/form.tsx",["603"],{"ruleId":"604","severity":1,"message":"605","line":116,"column":6,"nodeType":"606","endLine":116,"endColumn":20,"suggestions":"607"},{"ruleId":"608","replacedBy":"609"},{"ruleId":"610","replacedBy":"611"},{"ruleId":"612","severity":1,"message":"613","line":3,"column":3,"nodeType":"614","messageId":"615","endLine":3,"endColumn":17},{"ruleId":"612","severity":1,"message":"616","line":4,"column":3,"nodeType":"614","messageId":"615","endLine":4,"endColumn":8},{"ruleId":"612","severity":1,"message":"617","line":5,"column":3,"nodeType":"614","messageId":"615","endLine":5,"endColumn":15},{"ruleId":"612","severity":1,"message":"618","line":6,"column":3,"nodeType":"614","messageId":"615","endLine":6,"endColumn":15},{"ruleId":"612","severity":1,"message":"619","line":50,"column":10,"nodeType":"614","messageId":"615","endLine":50,"endColumn":14},{"ruleId":"612","severity":1,"message":"620","line":50,"column":16,"nodeType":"614","messageId":"615","endLine":50,"endColumn":23},{"ruleId":"612","severity":1,"message":"621","line":51,"column":10,"nodeType":"614","messageId":"615","endLine":51,"endColumn":17},{"ruleId":"612","severity":1,"message":"622","line":51,"column":19,"nodeType":"614","messageId":"615","endLine":51,"endColumn":29},{"ruleId":"612","severity":1,"message":"623","line":55,"column":9,"nodeType":"614","messageId":"615","endLine":55,"endColumn":23},{"ruleId":"612","severity":1,"message":"624","line":56,"column":9,"nodeType":"614","messageId":"615","endLine":56,"endColumn":26},{"ruleId":"604","severity":1,"message":"625","line":121,"column":6,"nodeType":"606","endLine":121,"endColumn":50,"suggestions":"626"},{"ruleId":"604","severity":1,"message":"605","line":125,"column":6,"nodeType":"606","endLine":125,"endColumn":25,"suggestions":"627"},{"ruleId":"608","replacedBy":"628"},{"ruleId":"610","replacedBy":"629"},{"ruleId":"612","severity":1,"message":"630","line":3,"column":30,"nodeType":"614","messageId":"615","endLine":3,"endColumn":46},{"ruleId":"612","severity":1,"message":"631","line":22,"column":10,"nodeType":"614","messageId":"615","endLine":22,"endColumn":20},{"ruleId":"612","severity":1,"message":"632","line":55,"column":7,"nodeType":"614","messageId":"615","endLine":55,"endColumn":22},{"ruleId":"604","severity":1,"message":"633","line":173,"column":6,"nodeType":"606","endLine":173,"endColumn":77,"suggestions":"634"},{"ruleId":"612","severity":1,"message":"635","line":16,"column":3,"nodeType":"614","messageId":"615","endLine":16,"endColumn":7},{"ruleId":"612","severity":1,"message":"636","line":17,"column":3,"nodeType":"614","messageId":"615","endLine":17,"endColumn":11},{"ruleId":"612","severity":1,"message":"637","line":18,"column":3,"nodeType":"614","messageId":"615","endLine":18,"endColumn":12},{"ruleId":"612","severity":1,"message":"638","line":19,"column":3,"nodeType":"614","messageId":"615","endLine":19,"endColumn":14},{"ruleId":"612","severity":1,"message":"639","line":20,"column":3,"nodeType":"614","messageId":"615","endLine":20,"endColumn":8},{"ruleId":"612","severity":1,"message":"640","line":26,"column":10,"nodeType":"614","messageId":"615","endLine":26,"endColumn":38},{"ruleId":"612","severity":1,"message":"641","line":31,"column":10,"nodeType":"614","messageId":"615","endLine":31,"endColumn":17},{"ruleId":"612","severity":1,"message":"642","line":34,"column":5,"nodeType":"614","messageId":"615","endLine":34,"endColumn":14},{"ruleId":"612","severity":1,"message":"643","line":37,"column":5,"nodeType":"614","messageId":"615","endLine":37,"endColumn":21},{"ruleId":"612","severity":1,"message":"644","line":39,"column":5,"nodeType":"614","messageId":"615","endLine":39,"endColumn":10},{"ruleId":"612","severity":1,"message":"645","line":40,"column":5,"nodeType":"614","messageId":"615","endLine":40,"endColumn":13},{"ruleId":"612","severity":1,"message":"646","line":41,"column":5,"nodeType":"614","messageId":"615","endLine":41,"endColumn":17},{"ruleId":"604","severity":1,"message":"605","line":110,"column":6,"nodeType":"606","endLine":110,"endColumn":25,"suggestions":"647"},{"ruleId":"612","severity":1,"message":"616","line":5,"column":3,"nodeType":"614","messageId":"615","endLine":5,"endColumn":8},{"ruleId":"612","severity":1,"message":"619","line":27,"column":10,"nodeType":"614","messageId":"615","endLine":27,"endColumn":14},{"ruleId":"612","severity":1,"message":"620","line":27,"column":16,"nodeType":"614","messageId":"615","endLine":27,"endColumn":23},{"ruleId":"612","severity":1,"message":"623","line":29,"column":9,"nodeType":"614","messageId":"615","endLine":29,"endColumn":23},{"ruleId":"604","severity":1,"message":"605","line":54,"column":6,"nodeType":"606","endLine":54,"endColumn":24,"suggestions":"648"},{"ruleId":"612","severity":1,"message":"649","line":56,"column":9,"nodeType":"614","messageId":"615","endLine":56,"endColumn":27},{"ruleId":"612","severity":1,"message":"650","line":4,"column":10,"nodeType":"614","messageId":"615","endLine":4,"endColumn":26},{"ruleId":"612","severity":1,"message":"650","line":4,"column":10,"nodeType":"614","messageId":"615","endLine":4,"endColumn":26},{"ruleId":"608","replacedBy":"651"},{"ruleId":"610","replacedBy":"652"},{"ruleId":"612","severity":1,"message":"650","line":4,"column":10,"nodeType":"614","messageId":"615","endLine":4,"endColumn":26},{"ruleId":"608","replacedBy":"653"},{"ruleId":"610","replacedBy":"654"},{"ruleId":"612","severity":1,"message":"650","line":4,"column":10,"nodeType":"614","messageId":"615","endLine":4,"endColumn":26},{"ruleId":"608","replacedBy":"655"},{"ruleId":"610","replacedBy":"656"},{"ruleId":"608","replacedBy":"657"},{"ruleId":"610","replacedBy":"658"},{"ruleId":"612","severity":1,"message":"659","line":3,"column":18,"nodeType":"614","messageId":"615","endLine":3,"endColumn":28},{"ruleId":"612","severity":1,"message":"660","line":5,"column":3,"nodeType":"614","messageId":"615","endLine":5,"endColumn":30},{"ruleId":"612","severity":1,"message":"640","line":6,"column":3,"nodeType":"614","messageId":"615","endLine":6,"endColumn":31},{"ruleId":"612","severity":1,"message":"661","line":7,"column":3,"nodeType":"614","messageId":"615","endLine":7,"endColumn":27},{"ruleId":"608","replacedBy":"662"},{"ruleId":"610","replacedBy":"663"},{"ruleId":"612","severity":1,"message":"630","line":1,"column":10,"nodeType":"614","messageId":"615","endLine":1,"endColumn":26},{"ruleId":"612","severity":1,"message":"664","line":11,"column":22,"nodeType":"614","messageId":"615","endLine":11,"endColumn":29},{"ruleId":"612","severity":1,"message":"665","line":39,"column":5,"nodeType":"614","messageId":"615","endLine":39,"endColumn":12},{"ruleId":"612","severity":1,"message":"666","line":40,"column":5,"nodeType":"614","messageId":"615","endLine":40,"endColumn":18},{"ruleId":"612","severity":1,"message":"667","line":44,"column":5,"nodeType":"614","messageId":"615","endLine":44,"endColumn":16},{"ruleId":"612","severity":1,"message":"668","line":45,"column":5,"nodeType":"614","messageId":"615","endLine":45,"endColumn":23},{"ruleId":"612","severity":1,"message":"669","line":13,"column":3,"nodeType":"614","messageId":"615","endLine":13,"endColumn":13},{"ruleId":"612","severity":1,"message":"670","line":14,"column":3,"nodeType":"614","messageId":"615","endLine":14,"endColumn":17},{"ruleId":"612","severity":1,"message":"671","line":15,"column":3,"nodeType":"614","messageId":"615","endLine":15,"endColumn":11},{"ruleId":"612","severity":1,"message":"672","line":64,"column":18,"nodeType":"614","messageId":"615","endLine":64,"endColumn":27},{"ruleId":"608","replacedBy":"673"},{"ruleId":"610","replacedBy":"674"},{"ruleId":"608","replacedBy":"675"},{"ruleId":"610","replacedBy":"676"},{"ruleId":"612","severity":1,"message":"616","line":11,"column":3,"nodeType":"614","messageId":"615","endLine":11,"endColumn":8},{"ruleId":"612","severity":1,"message":"677","line":12,"column":3,"nodeType":"614","messageId":"615","endLine":12,"endColumn":9},{"ruleId":"612","severity":1,"message":"678","line":24,"column":10,"nodeType":"614","messageId":"615","endLine":24,"endColumn":17},{"ruleId":"612","severity":1,"message":"679","line":24,"column":19,"nodeType":"614","messageId":"615","endLine":24,"endColumn":29},{"ruleId":"604","severity":1,"message":"680","line":49,"column":6,"nodeType":"606","endLine":49,"endColumn":23,"suggestions":"681"},{"ruleId":"604","severity":1,"message":"605","line":56,"column":6,"nodeType":"606","endLine":56,"endColumn":23,"suggestions":"682"},{"ruleId":"612","severity":1,"message":"683","line":8,"column":3,"nodeType":"614","messageId":"615","endLine":8,"endColumn":12},{"ruleId":"612","severity":1,"message":"684","line":9,"column":3,"nodeType":"614","messageId":"615","endLine":9,"endColumn":8},{"ruleId":"612","severity":1,"message":"685","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":8},{"ruleId":"612","severity":1,"message":"616","line":11,"column":3,"nodeType":"614","messageId":"615","endLine":11,"endColumn":8},{"ruleId":"612","severity":1,"message":"677","line":12,"column":3,"nodeType":"614","messageId":"615","endLine":12,"endColumn":9},{"ruleId":"612","severity":1,"message":"679","line":20,"column":19,"nodeType":"614","messageId":"615","endLine":20,"endColumn":29},{"ruleId":"604","severity":1,"message":"680","line":45,"column":6,"nodeType":"606","endLine":45,"endColumn":16,"suggestions":"686"},{"ruleId":"604","severity":1,"message":"605","line":52,"column":6,"nodeType":"606","endLine":52,"endColumn":16,"suggestions":"687"},{"ruleId":"612","severity":1,"message":"683","line":8,"column":3,"nodeType":"614","messageId":"615","endLine":8,"endColumn":12},{"ruleId":"612","severity":1,"message":"684","line":9,"column":3,"nodeType":"614","messageId":"615","endLine":9,"endColumn":8},{"ruleId":"612","severity":1,"message":"685","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":8},{"ruleId":"612","severity":1,"message":"616","line":11,"column":3,"nodeType":"614","messageId":"615","endLine":11,"endColumn":8},{"ruleId":"612","severity":1,"message":"679","line":24,"column":19,"nodeType":"614","messageId":"615","endLine":24,"endColumn":29},{"ruleId":"612","severity":1,"message":"650","line":4,"column":10,"nodeType":"614","messageId":"615","endLine":4,"endColumn":26},{"ruleId":"612","severity":1,"message":"688","line":2,"column":31,"nodeType":"614","messageId":"615","endLine":2,"endColumn":35},{"ruleId":"608","replacedBy":"689"},{"ruleId":"610","replacedBy":"690"},{"ruleId":"612","severity":1,"message":"683","line":8,"column":3,"nodeType":"614","messageId":"615","endLine":8,"endColumn":12},{"ruleId":"612","severity":1,"message":"684","line":9,"column":3,"nodeType":"614","messageId":"615","endLine":9,"endColumn":8},{"ruleId":"612","severity":1,"message":"685","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":8},{"ruleId":"612","severity":1,"message":"616","line":11,"column":3,"nodeType":"614","messageId":"615","endLine":11,"endColumn":8},{"ruleId":"612","severity":1,"message":"679","line":23,"column":19,"nodeType":"614","messageId":"615","endLine":23,"endColumn":29},{"ruleId":"608","replacedBy":"691"},{"ruleId":"610","replacedBy":"692"},{"ruleId":"608","replacedBy":"693"},{"ruleId":"610","replacedBy":"694"},{"ruleId":"612","severity":1,"message":"616","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":8},{"ruleId":"612","severity":1,"message":"695","line":12,"column":3,"nodeType":"614","messageId":"615","endLine":12,"endColumn":17},{"ruleId":"612","severity":1,"message":"696","line":18,"column":3,"nodeType":"614","messageId":"615","endLine":18,"endColumn":23},{"ruleId":"612","severity":1,"message":"678","line":25,"column":10,"nodeType":"614","messageId":"615","endLine":25,"endColumn":17},{"ruleId":"612","severity":1,"message":"679","line":25,"column":19,"nodeType":"614","messageId":"615","endLine":25,"endColumn":29},{"ruleId":"604","severity":1,"message":"680","line":49,"column":6,"nodeType":"606","endLine":49,"endColumn":23,"suggestions":"697"},{"ruleId":"604","severity":1,"message":"605","line":56,"column":6,"nodeType":"606","endLine":56,"endColumn":23,"suggestions":"698"},{"ruleId":"612","severity":1,"message":"650","line":4,"column":10,"nodeType":"614","messageId":"615","endLine":4,"endColumn":26},{"ruleId":"612","severity":1,"message":"699","line":7,"column":20,"nodeType":"614","messageId":"615","endLine":7,"endColumn":33},{"ruleId":"612","severity":1,"message":"644","line":7,"column":35,"nodeType":"614","messageId":"615","endLine":7,"endColumn":40},{"ruleId":"612","severity":1,"message":"683","line":8,"column":3,"nodeType":"614","messageId":"615","endLine":8,"endColumn":12},{"ruleId":"612","severity":1,"message":"684","line":9,"column":3,"nodeType":"614","messageId":"615","endLine":9,"endColumn":8},{"ruleId":"612","severity":1,"message":"685","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":8},{"ruleId":"612","severity":1,"message":"616","line":11,"column":3,"nodeType":"614","messageId":"615","endLine":11,"endColumn":8},{"ruleId":"612","severity":1,"message":"679","line":23,"column":19,"nodeType":"614","messageId":"615","endLine":23,"endColumn":29},{"ruleId":"612","severity":1,"message":"644","line":26,"column":34,"nodeType":"614","messageId":"615","endLine":26,"endColumn":39},{"ruleId":"604","severity":1,"message":"680","line":33,"column":6,"nodeType":"606","endLine":33,"endColumn":25,"suggestions":"700"},{"ruleId":"604","severity":1,"message":"605","line":37,"column":6,"nodeType":"606","endLine":37,"endColumn":25,"suggestions":"701"},{"ruleId":"612","severity":1,"message":"650","line":4,"column":10,"nodeType":"614","messageId":"615","endLine":4,"endColumn":26},{"ruleId":"612","severity":1,"message":"699","line":7,"column":19,"nodeType":"614","messageId":"615","endLine":7,"endColumn":32},{"ruleId":"612","severity":1,"message":"644","line":7,"column":34,"nodeType":"614","messageId":"615","endLine":7,"endColumn":39},{"ruleId":"612","severity":1,"message":"685","line":9,"column":3,"nodeType":"614","messageId":"615","endLine":9,"endColumn":8},{"ruleId":"612","severity":1,"message":"702","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":15},{"ruleId":"612","severity":1,"message":"703","line":11,"column":3,"nodeType":"614","messageId":"615","endLine":11,"endColumn":14},{"ruleId":"612","severity":1,"message":"704","line":15,"column":8,"nodeType":"614","messageId":"615","endLine":15,"endColumn":17},{"ruleId":"612","severity":1,"message":"705","line":20,"column":3,"nodeType":"614","messageId":"615","endLine":20,"endColumn":30},{"ruleId":"612","severity":1,"message":"706","line":21,"column":3,"nodeType":"614","messageId":"615","endLine":21,"endColumn":22},{"ruleId":"612","severity":1,"message":"707","line":22,"column":3,"nodeType":"614","messageId":"615","endLine":22,"endColumn":22},{"ruleId":"612","severity":1,"message":"678","line":35,"column":10,"nodeType":"614","messageId":"615","endLine":35,"endColumn":17},{"ruleId":"612","severity":1,"message":"679","line":35,"column":19,"nodeType":"614","messageId":"615","endLine":35,"endColumn":29},{"ruleId":"708","severity":1,"message":"709","line":72,"column":58,"nodeType":"710","messageId":"711","endLine":72,"endColumn":60},{"ruleId":"604","severity":1,"message":"680","line":94,"column":6,"nodeType":"606","endLine":94,"endColumn":23,"suggestions":"712"},{"ruleId":"604","severity":1,"message":"713","line":128,"column":6,"nodeType":"606","endLine":128,"endColumn":23,"suggestions":"714"},{"ruleId":"604","severity":1,"message":"715","line":143,"column":6,"nodeType":"606","endLine":143,"endColumn":19,"suggestions":"716"},{"ruleId":"604","severity":1,"message":"605","line":147,"column":6,"nodeType":"606","endLine":147,"endColumn":23,"suggestions":"717"},{"ruleId":"612","severity":1,"message":"705","line":4,"column":39,"nodeType":"614","messageId":"615","endLine":4,"endColumn":66},{"ruleId":"612","severity":1,"message":"718","line":2,"column":22,"nodeType":"614","messageId":"615","endLine":2,"endColumn":31},{"ruleId":"612","severity":1,"message":"631","line":4,"column":10,"nodeType":"614","messageId":"615","endLine":4,"endColumn":20},{"ruleId":"612","severity":1,"message":"719","line":8,"column":11,"nodeType":"614","messageId":"615","endLine":8,"endColumn":22},{"ruleId":"612","severity":1,"message":"630","line":1,"column":10,"nodeType":"614","messageId":"615","endLine":1,"endColumn":26},{"ruleId":"612","severity":1,"message":"720","line":9,"column":3,"nodeType":"614","messageId":"615","endLine":9,"endColumn":22},{"ruleId":"612","severity":1,"message":"721","line":14,"column":7,"nodeType":"614","messageId":"615","endLine":14,"endColumn":21},{"ruleId":"612","severity":1,"message":"722","line":27,"column":23,"nodeType":"614","messageId":"615","endLine":27,"endColumn":37},{"ruleId":"612","severity":1,"message":"723","line":28,"column":7,"nodeType":"614","messageId":"615","endLine":28,"endColumn":14},{"ruleId":"612","severity":1,"message":"724","line":28,"column":16,"nodeType":"614","messageId":"615","endLine":28,"endColumn":29},{"ruleId":"612","severity":1,"message":"667","line":28,"column":31,"nodeType":"614","messageId":"615","endLine":28,"endColumn":42},{"ruleId":"608","replacedBy":"725"},{"ruleId":"610","replacedBy":"726"},{"ruleId":"612","severity":1,"message":"683","line":7,"column":3,"nodeType":"614","messageId":"615","endLine":7,"endColumn":12},{"ruleId":"612","severity":1,"message":"684","line":8,"column":3,"nodeType":"614","messageId":"615","endLine":8,"endColumn":8},{"ruleId":"612","severity":1,"message":"685","line":9,"column":3,"nodeType":"614","messageId":"615","endLine":9,"endColumn":8},{"ruleId":"612","severity":1,"message":"616","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":8},{"ruleId":"612","severity":1,"message":"703","line":11,"column":3,"nodeType":"614","messageId":"615","endLine":11,"endColumn":14},{"ruleId":"612","severity":1,"message":"678","line":20,"column":10,"nodeType":"614","messageId":"615","endLine":20,"endColumn":17},{"ruleId":"612","severity":1,"message":"679","line":20,"column":19,"nodeType":"614","messageId":"615","endLine":20,"endColumn":29},{"ruleId":"612","severity":1,"message":"649","line":28,"column":9,"nodeType":"614","messageId":"615","endLine":28,"endColumn":27},{"ruleId":"604","severity":1,"message":"680","line":51,"column":6,"nodeType":"606","endLine":51,"endColumn":17,"suggestions":"727"},{"ruleId":"604","severity":1,"message":"605","line":55,"column":6,"nodeType":"606","endLine":55,"endColumn":17,"suggestions":"728"},{"ruleId":"612","severity":1,"message":"677","line":2,"column":31,"nodeType":"614","messageId":"615","endLine":2,"endColumn":37},{"ruleId":"612","severity":1,"message":"642","line":8,"column":11,"nodeType":"614","messageId":"615","endLine":8,"endColumn":20},{"ruleId":"612","severity":1,"message":"699","line":8,"column":35,"nodeType":"614","messageId":"615","endLine":8,"endColumn":48},{"ruleId":"612","severity":1,"message":"729","line":3,"column":10,"nodeType":"614","messageId":"615","endLine":3,"endColumn":26},{"ruleId":"612","severity":1,"message":"730","line":7,"column":22,"nodeType":"614","messageId":"615","endLine":7,"endColumn":34},{"ruleId":"612","severity":1,"message":"731","line":35,"column":10,"nodeType":"614","messageId":"615","endLine":35,"endColumn":17},{"ruleId":"612","severity":1,"message":"732","line":59,"column":5,"nodeType":"614","messageId":"615","endLine":59,"endColumn":12},{"ruleId":"612","severity":1,"message":"733","line":61,"column":5,"nodeType":"614","messageId":"615","endLine":61,"endColumn":10},{"ruleId":"612","severity":1,"message":"734","line":65,"column":5,"nodeType":"614","messageId":"615","endLine":65,"endColumn":18},{"ruleId":"612","severity":1,"message":"735","line":66,"column":5,"nodeType":"614","messageId":"615","endLine":66,"endColumn":10},{"ruleId":"612","severity":1,"message":"736","line":71,"column":9,"nodeType":"614","messageId":"615","endLine":71,"endColumn":13},{"ruleId":"608","replacedBy":"737"},{"ruleId":"610","replacedBy":"738"},{"ruleId":"612","severity":1,"message":"739","line":1,"column":40,"nodeType":"614","messageId":"615","endLine":1,"endColumn":50},{"ruleId":"612","severity":1,"message":"740","line":7,"column":24,"nodeType":"614","messageId":"615","endLine":7,"endColumn":29},{"ruleId":"604","severity":1,"message":"741","line":66,"column":6,"nodeType":"606","endLine":66,"endColumn":24,"suggestions":"742"},{"ruleId":"604","severity":1,"message":"741","line":73,"column":6,"nodeType":"606","endLine":73,"endColumn":26,"suggestions":"743"},{"ruleId":"612","severity":1,"message":"740","line":6,"column":24,"nodeType":"614","messageId":"615","endLine":6,"endColumn":29},{"ruleId":"604","severity":1,"message":"741","line":60,"column":6,"nodeType":"606","endLine":60,"endColumn":23,"suggestions":"744"},{"ruleId":"604","severity":1,"message":"741","line":66,"column":6,"nodeType":"606","endLine":66,"endColumn":25,"suggestions":"745"},{"ruleId":"608","replacedBy":"746"},{"ruleId":"610","replacedBy":"747"},{"ruleId":"612","severity":1,"message":"685","line":3,"column":8,"nodeType":"614","messageId":"615","endLine":3,"endColumn":13},{"ruleId":"612","severity":1,"message":"748","line":13,"column":3,"nodeType":"614","messageId":"615","endLine":13,"endColumn":12},{"ruleId":"612","severity":1,"message":"749","line":16,"column":8,"nodeType":"614","messageId":"615","endLine":16,"endColumn":20},{"ruleId":"612","severity":1,"message":"750","line":18,"column":3,"nodeType":"614","messageId":"615","endLine":18,"endColumn":21},{"ruleId":"612","severity":1,"message":"751","line":19,"column":3,"nodeType":"614","messageId":"615","endLine":19,"endColumn":26},{"ruleId":"612","severity":1,"message":"752","line":22,"column":8,"nodeType":"614","messageId":"615","endLine":22,"endColumn":13},{"ruleId":"612","severity":1,"message":"753","line":23,"column":8,"nodeType":"614","messageId":"615","endLine":23,"endColumn":18},{"ruleId":"612","severity":1,"message":"754","line":32,"column":10,"nodeType":"614","messageId":"615","endLine":32,"endColumn":23},{"ruleId":"612","severity":1,"message":"755","line":33,"column":8,"nodeType":"614","messageId":"615","endLine":33,"endColumn":18},{"ruleId":"612","severity":1,"message":"756","line":63,"column":25,"nodeType":"614","messageId":"615","endLine":63,"endColumn":31},{"ruleId":"612","severity":1,"message":"757","line":64,"column":9,"nodeType":"614","messageId":"615","endLine":64,"endColumn":25},{"ruleId":"612","severity":1,"message":"758","line":8,"column":3,"nodeType":"614","messageId":"615","endLine":8,"endColumn":11},{"ruleId":"612","severity":1,"message":"683","line":9,"column":3,"nodeType":"614","messageId":"615","endLine":9,"endColumn":12},{"ruleId":"612","severity":1,"message":"749","line":16,"column":8,"nodeType":"614","messageId":"615","endLine":16,"endColumn":20},{"ruleId":"612","severity":1,"message":"750","line":18,"column":3,"nodeType":"614","messageId":"615","endLine":18,"endColumn":21},{"ruleId":"612","severity":1,"message":"751","line":19,"column":3,"nodeType":"614","messageId":"615","endLine":19,"endColumn":26},{"ruleId":"612","severity":1,"message":"752","line":22,"column":8,"nodeType":"614","messageId":"615","endLine":22,"endColumn":13},{"ruleId":"612","severity":1,"message":"753","line":23,"column":8,"nodeType":"614","messageId":"615","endLine":23,"endColumn":18},{"ruleId":"612","severity":1,"message":"759","line":24,"column":8,"nodeType":"614","messageId":"615","endLine":24,"endColumn":24},{"ruleId":"612","severity":1,"message":"760","line":26,"column":8,"nodeType":"614","messageId":"615","endLine":26,"endColumn":17},{"ruleId":"612","severity":1,"message":"755","line":32,"column":8,"nodeType":"614","messageId":"615","endLine":32,"endColumn":18},{"ruleId":"612","severity":1,"message":"757","line":71,"column":9,"nodeType":"614","messageId":"615","endLine":71,"endColumn":25},{"ruleId":"608","replacedBy":"761"},{"ruleId":"610","replacedBy":"762"},{"ruleId":"612","severity":1,"message":"763","line":53,"column":7,"nodeType":"614","messageId":"615","endLine":53,"endColumn":11},{"ruleId":"708","severity":1,"message":"764","line":191,"column":38,"nodeType":"710","messageId":"765","endLine":191,"endColumn":40},{"ruleId":"612","severity":1,"message":"679","line":42,"column":19,"nodeType":"614","messageId":"615","endLine":42,"endColumn":29},{"ruleId":"612","severity":1,"message":"739","line":1,"column":40,"nodeType":"614","messageId":"615","endLine":1,"endColumn":50},{"ruleId":"612","severity":1,"message":"740","line":6,"column":24,"nodeType":"614","messageId":"615","endLine":6,"endColumn":29},{"ruleId":"612","severity":1,"message":"766","line":56,"column":9,"nodeType":"614","messageId":"615","endLine":56,"endColumn":21},{"ruleId":"604","severity":1,"message":"741","line":80,"column":6,"nodeType":"606","endLine":80,"endColumn":25,"suggestions":"767"},{"ruleId":"604","severity":1,"message":"741","line":87,"column":6,"nodeType":"606","endLine":87,"endColumn":27,"suggestions":"768"},{"ruleId":"612","severity":1,"message":"677","line":5,"column":3,"nodeType":"614","messageId":"615","endLine":5,"endColumn":9},{"ruleId":"612","severity":1,"message":"740","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":8},{"ruleId":"612","severity":1,"message":"769","line":14,"column":3,"nodeType":"614","messageId":"615","endLine":14,"endColumn":13},{"ruleId":"612","severity":1,"message":"770","line":17,"column":10,"nodeType":"614","messageId":"615","endLine":17,"endColumn":40},{"ruleId":"612","severity":1,"message":"677","line":5,"column":3,"nodeType":"614","messageId":"615","endLine":5,"endColumn":9},{"ruleId":"612","severity":1,"message":"740","line":10,"column":3,"nodeType":"614","messageId":"615","endLine":10,"endColumn":8},{"ruleId":"612","severity":1,"message":"769","line":14,"column":3,"nodeType":"614","messageId":"615","endLine":14,"endColumn":13},{"ruleId":"612","severity":1,"message":"770","line":17,"column":10,"nodeType":"614","messageId":"615","endLine":17,"endColumn":40},{"ruleId":"612","severity":1,"message":"740","line":3,"column":16,"nodeType":"614","messageId":"615","endLine":3,"endColumn":21},{"ruleId":"612","severity":1,"message":"740","line":3,"column":24,"nodeType":"614","messageId":"615","endLine":3,"endColumn":29},{"ruleId":"612","severity":1,"message":"771","line":11,"column":7,"nodeType":"614","messageId":"615","endLine":11,"endColumn":17},{"ruleId":"612","severity":1,"message":"772","line":20,"column":7,"nodeType":"614","messageId":"615","endLine":20,"endColumn":13},{"ruleId":"773","severity":1,"message":"774","line":6,"column":7,"nodeType":"614","messageId":"775","endLine":6,"endColumn":23},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'save' and 'updateContext'. Either include them or remove the dependency array.","ArrayExpression",["776"],"no-native-reassign",["777"],"no-negated-in-lhs",["778"],"@typescript-eslint/no-unused-vars","'DropdownToggle' is defined but never used.","Identifier","unusedVar","'Alert' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'code' is assigned a value but never used.","'setCode' is assigned a value but never used.","'altCode' is assigned a value but never used.","'setAltCode' is assigned a value but never used.","'toggleDropDown' is assigned a value but never used.","'toggleAltDropDown' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'PersonalInfo.data.birthDate', 'PersonalInfo.data.email', 'PersonalInfo.data.ethnicity', 'PersonalInfo.data.gender', 'PersonalInfo.data.lastName', 'PersonalInfo.data.phone', and 'PersonalInfo.data.previousTests.length'. Either include them or remove the dependency array.",["779"],["780"],["777"],["778"],"'TabItemInterface' is defined but never used.","'submitForm' is defined but never used.","'reversePopulate' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'ContextData'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNextTab' needs the current value of 'ContextData'.",["781"],"'Card' is defined but never used.","'CardText' is defined but never used.","'CardTitle' is defined but never used.","'CardColumns' is defined but never used.","'Table' is defined but never used.","'ProfileMedicareDataInterface' is defined but never used.","'mResult' is assigned a value but never used.","'activeTab' is assigned a value but never used.","'registerFunction' is assigned a value but never used.","'Error' is assigned a value but never used.","'setError' is assigned a value but never used.","'setActiveTab' is assigned a value but never used.",["782"],["783"],"'showError' is assigned a value but never used.","'ProfileInterface' is defined but never used.",["777"],["778"],["777"],["778"],["777"],["778"],["777"],["778"],"'compareAsc' is defined but never used.","'ProfileAddressDataInterface' is defined but never used.","'ProfileUserDataInterface' is defined but never used.",["777"],["778"],"'useMemo' is defined but never used.","'nextTab' is assigned a value but never used.","'goToNextPanel' is assigned a value but never used.","'goToNextTab' is assigned a value but never used.","'setIsReviewingData' is assigned a value but never used.","'Breadcrumb' is defined but never used.","'BreadcrumbItem' is defined but never used.","'Collapse' is defined but never used.","'setTables' is assigned a value but never used.",["777"],["778"],["777"],["778"],"'Button' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'updateContext'. Either include it or remove the dependency array.",["784"],["785"],"'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.",["786"],["787"],"'Form' is defined but never used.",["777"],["778"],["777"],["778"],["777"],["778"],"'CardImgOverlay' is defined but never used.","'CardiacDataInterface' is defined but never used.",["788"],["789"],"'updateContext' is assigned a value but never used.",["790"],["791"],"'FormFeedback' is defined but never used.","'CustomInput' is defined but never used.","'InputMask' is defined but never used.","'FamilyMemberHeartConditions' is defined but never used.","'DiagnosedCancerList' is defined but never used.","'TreatmentCancerList' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["792"],"React Hook useCallback has missing dependencies: 'Diagnostic.data.cancerList', 'Diagnostic.error', and 'updateContext'. Either include them or remove the dependency array.",["793"],"React Hook useEffect has a missing dependency: 'Diagnostic.data.cancerList'. Either include it or remove the dependency array.",["794"],["795"],"'useEffect' is defined but never used.","'ContextData' is assigned a value but never used.","'UncontrolledPopover' is defined but never used.","'PopoverContent' is assigned a value but never used.","'setActivePanel' is assigned a value but never used.","'prevTab' is assigned a value but never used.","'backToPrevTab' is assigned a value but never used.",["777"],["778"],["796"],["797"],"'AppDataInterface' is defined but never used.","'createStyles' is defined but never used.","'FormRow' is defined but never used.","'checked' is assigned a value but never used.","'error' is assigned a value but never used.","'onRadioChange' is assigned a value but never used.","'radio' is assigned a value but never used.","'bull' is assigned a value but never used.",["777"],["778"],"'useReducer' is defined but never used.","'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'StepperDispatch'. Either include it or remove the dependency array.",["798"],["799"],["800"],["801"],["777"],["778"],"'TextField' is defined but never used.","'DateFnsUtils' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'EthnicityList' is defined but never used.","'InputPhone' is defined but never used.","'setErr' is assigned a value but never used.","'handleDateChange' is assigned a value but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'FormLabel' is defined but never used.",["777"],["778"],"'rows' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'handleChange' is assigned a value but never used.",["802"],["803"],"'Typography' is defined but never used.","'CancerDiagnosticErrorInterface' is defined but never used.","'cancerList' is assigned a value but never used.","'Sugery' is assigned a value but never used.","@typescript-eslint/no-redeclare","'FamilyMemberForm' is already defined.","redeclared",{"desc":"804","fix":"805"},"no-global-assign","no-unsafe-negation",{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"808","fix":"812"},{"desc":"813","fix":"814"},{"desc":"815","fix":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},{"desc":"821","fix":"822"},{"desc":"823","fix":"824"},{"desc":"817","fix":"825"},{"desc":"826","fix":"827"},{"desc":"828","fix":"829"},{"desc":"830","fix":"831"},{"desc":"832","fix":"833"},{"desc":"834","fix":"835"},{"desc":"817","fix":"836"},{"desc":"837","fix":"838"},{"desc":"839","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"847","fix":"848"},{"desc":"849","fix":"850"},{"desc":"851","fix":"852"},"Update the dependencies array to be: [Address.data, save, updateContext]",{"range":"853","text":"854"},"Update the dependencies array to be: [PersonalInfo.data.birthDate, PersonalInfo.data.email, PersonalInfo.data.ethnicity, PersonalInfo.data.firstName, PersonalInfo.data.gender, PersonalInfo.data.lastName, PersonalInfo.data.phone, PersonalInfo.data.previousTests.length, updateContext]",{"range":"855","text":"856"},"Update the dependencies array to be: [PersonalInfo.data, save, updateContext]",{"range":"857","text":"858"},"Update the dependencies array to be: [ContextData, activeTab]",{"range":"859","text":"860"},{"range":"861","text":"858"},"Update the dependencies array to be: [PrimaryCare.data, save, updateContext]",{"range":"862","text":"863"},"Update the dependencies array to be: [Diagnostic.data.list.length, updateContext]",{"range":"864","text":"865"},"Update the dependencies array to be: [Diagnostic.data, save, updateContext]",{"range":"866","text":"867"},"Update the dependencies array to be: [BMI.data.value, updateContext]",{"range":"868","text":"869"},"Update the dependencies array to be: [BMI.data, save, updateContext]",{"range":"870","text":"871"},"Update the dependencies array to be: [Diagnostic.data.typeOfCardiac.length, updateContext]",{"range":"872","text":"873"},{"range":"874","text":"867"},"Update the dependencies array to be: [updateContext]",{"range":"875","text":"876"},"Update the dependencies array to be: [FamilyMember.data, save, updateContext]",{"range":"877","text":"878"},"Update the dependencies array to be: [Diagnostic.data.cancerList, Diagnostic.data.isDiagnosed, updateContext]",{"range":"879","text":"880"},"Update the dependencies array to be: [Diagnostic.data.cancerList, Diagnostic.error, currentStepItem.number, currentStepItem.radio, currentStepItem.secondLabel, currentStepItem.slug, updateContext]",{"range":"881","text":"882"},"Update the dependencies array to be: [Diagnostic.data.cancerList, currentStep]",{"range":"883","text":"884"},{"range":"885","text":"867"},"Update the dependencies array to be: [Info.data.name, Info.data.url, updateContext]",{"range":"886","text":"887"},"Update the dependencies array to be: [Info.data, save, updateContext]",{"range":"888","text":"889"},"Update the dependencies array to be: [AgentState.error, StepperDispatch]",{"range":"890","text":"891"},"Update the dependencies array to be: [AgentState.success, StepperDispatch]",{"range":"892","text":"893"},"Update the dependencies array to be: [StepperDispatch, UserState.error]",{"range":"894","text":"895"},"Update the dependencies array to be: [StepperDispatch, UserState.success]",{"range":"896","text":"897"},"Update the dependencies array to be: [CancerState.error, StepperDispatch]",{"range":"898","text":"899"},"Update the dependencies array to be: [CancerState.success, StepperDispatch]",{"range":"900","text":"901"},[2036,2050],"[Address.data, save, updateContext]",[3147,3191],"[PersonalInfo.data.birthDate, PersonalInfo.data.email, PersonalInfo.data.ethnicity, PersonalInfo.data.firstName, PersonalInfo.data.gender, PersonalInfo.data.lastName, PersonalInfo.data.phone, PersonalInfo.data.previousTests.length, updateContext]",[3253,3272],"[PersonalInfo.data, save, updateContext]",[5289,5360],"[ContextData, activeTab]",[2982,3001],[1472,1490],"[PrimaryCare.data, save, updateContext]",[1162,1179],"[Diagnostic.data.list.length, updateContext]",[1281,1298],"[Diagnostic.data, save, updateContext]",[1112,1122],"[BMI.data.value, updateContext]",[1224,1234],"[BMI.data, save, updateContext]",[1244,1261],"[Diagnostic.data.typeOfCardiac.length, updateContext]",[1363,1380],[852,871],"[updateContext]",[933,952],"[FamilyMember.data, save, updateContext]",[2826,2843],"[Diagnostic.data.cancerList, Diagnostic.data.isDiagnosed, updateContext]",[3986,4003],"[Diagnostic.data.cancerList, Diagnostic.error, currentStepItem.number, currentStepItem.radio, currentStepItem.secondLabel, currentStepItem.slug, updateContext]",[4348,4361],"[Diagnostic.data.cancerList, currentStep]",[4423,4440],[1106,1117],"[Info.data.name, Info.data.url, updateContext]",[1179,1190],"[Info.data, save, updateContext]",[1877,1895],"[AgentState.error, StepperDispatch]",[2050,2070],"[AgentState.success, StepperDispatch]",[1718,1735],"[StepperDispatch, UserState.error]",[1850,1869],"[StepperDispatch, UserState.success]",[2168,2187],"[CancerState.error, StepperDispatch]",[2343,2364],"[CancerState.success, StepperDispatch]"]